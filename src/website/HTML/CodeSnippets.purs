-- | Auto-generated module containing code snippets
-- | Generated by scripts/extract-snippets.js
-- | DO NOT EDIT THIS FILE MANUALLY
module CodeSnippets where

import Prelude

-- | Snippet metadata
type SnippetInfo =
  { name :: String
  , content :: String
  , source :: String
  , lines :: String
  }

-- | All available snippets
snippets :: Array SnippetInfo
snippets =
  [ { name: "selectionMClass"
    , content: """class (Monad m) <= SelectionM selection m where
  -- | Append a new element to a selection and return the new element.
  -- |
  -- | This is the primary way to build up a visualization by adding elements
  -- | to a container. Each element can have attributes applied immediately.
  -- |
  -- | ```purescript
  -- | svg <- appendTo root Svg [width 800.0, height 600.0]
  -- | circle <- appendTo svg Circle [cx 50.0, cy 50.0, radius 25.0]
  -- | ```
  -- |
  -- | Maps to D3's `selection.append()` - see https://d3js.org/d3-selection#selection_append
  appendTo        :: selection -> Element -> Array (SelectionAttribute) -> m selection

  -- | Select descendant elements matching a selector within a selection.
  -- |
  -- | This allows you to select elements that are children of the current selection,
  -- | useful for working with structured SVG groups or HTML layouts.
  -- |
  -- | ```purescript
  -- | groups <- selectUnder svg "g.data-group"
  -- | circles <- selectUnder groups "circle"
  -- | ```
  -- |
  -- | Maps to D3's `selection.selectAll()` - see https://d3js.org/d3-selection#selection_selectAll
  selectUnder     :: selection -> Selector selection -> m selection

  -- | Attach to an existing DOM element using a CSS selector.
  -- |
  -- | This is typically the **first operation** in any visualization - it selects
  -- | the container element where your visualization will be rendered.
  -- |
  -- | ```purescript
  -- | root <- attach "#chart"  -- Selects <div id="chart"></div>
  -- | ```
  -- |
  -- | Maps to D3's `d3.select()` - see https://d3js.org/d3-selection#select
  attach          :: Selector selection -> m selection

  -- | Filter a selection to only elements matching a selector.
  -- |
  -- | Useful for narrowing down selections based on classes or other attributes.
  -- |
  -- | ```purescript
  -- | allCircles <- selectUnder svg "circle"
  -- | redCircles <- filterSelection allCircles ".red"
  -- | ```
  -- |
  -- | Maps to D3's `selection.filter()` - see https://d3js.org/d3-selection#selection_filter
  filterSelection :: selection -> Selector selection -> m selection

  -- | Merge two selections into one.
  -- |
  -- | Commonly used to merge enter and update selections after a data join
  -- | so you can apply the same attributes to both.
  -- |
  -- | ```purescript
  -- | result <- updateJoin svg Circle data keyFn
  -- | merged <- mergeSelections result.enter result.update
  -- | setAttributes merged [fill "blue", radius 5.0]
  -- | ```
  -- |
  -- | Maps to D3's `selection.merge()` - see https://d3js.org/d3-selection#selection_merge
  mergeSelections :: selection -> selection -> m selection

  -- | Apply attributes to a selection.
  -- |
  -- | This is how you style and position elements. Attributes are applied in order.
  -- |
  -- | ```purescript
  -- | setAttributes circle [fill "red", stroke "black", strokeWidth 2.0]
  -- | ```
  -- |
  -- | See `PSD3.Attributes` for the full list of available attributes.
  setAttributes   :: selection -> Array (SelectionAttribute) -> m Unit

  -- | Attach behavior (drag, zoom) to a selection.
  -- |
  -- | This enables interactivity by attaching event handlers.
  -- |
  -- | ```purescript
  -- | on circles (Drag DefaultDrag)
  -- | on svg (Zoom { extent: ..., scale: ..., name: "chart", target: svg })
  -- | ```
  -- |
  -- | See `PSD3.Internal.Selection.Types` for available behaviors.
  on              :: selection -> Behavior selection -> m Unit

  -- | Open a selection for data binding.
  -- |
  -- | This is an advanced operation used internally by the update join pattern.
  -- | Most users won't need to call this directly.
  -- |
  -- | **Note**: This operation may be refactored in future versions.
  openSelection   :: selection -> Selector selection -> m selection

  -- | Bind data to elements using a simple join (enter-only pattern).
  -- |
  -- | Use this when you have **static data** that doesn't change. It's simpler
  -- | than `updateJoin` and only handles the "enter" case.
  -- |
  -- | ```purescript
  -- | let data = [1, 2, 3, 4, 5]
  -- | circles <- simpleJoin svg Circle data keyIsID_
  -- | setAttributes circles [cy 50.0, radius 10.0]
  -- | ```
  -- |
  -- | The key function identifies each datum uniquely for D3's internal tracking.
  -- |
  -- | Maps to D3's data join - see https://d3js.org/d3-selection#joining-data
  simpleJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_) -> m selection

  -- | Bind data to elements using nested selections where child data is extracted from parent datum.
  -- |
  -- | Use this for **hierarchical data structures** where child elements need data derived from
  -- | their parent element's bound datum. This enables patterns like tables (rows → cells) or
  -- | nested visualizations (groups → elements).
  -- |
  -- | ```purescript
  -- | let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  -- |
  -- | -- First join: bind rows to outer array
  -- | rows <- simpleJoin tbody Tr matrix keyIsID_
  -- |
  -- | -- Second join: bind cells to each row's inner array
  -- | cellSelection <- openSelection rows "td"
  -- | cells <- nestedJoin cellSelection Td
  -- |            (\d -> coerceDatumToArray d)  -- Extract array from parent datum
  -- |            keyIsID_
  -- | ```
  -- |
  -- | The extraction function receives the parent element's datum and returns any `Foldable`
  -- | container (Array, List, Map.values, etc.). This is automatically converted to an Array
  -- | for D3's use.
  -- |
  -- | **Type flexibility:** The `Foldable` constraint means you can extract from:
  -- | - Arrays: `\d -> coerceDatumToArray d`
  -- | - Lists: `\d -> coerceDatumToList d`
  -- | - Map values: `\d -> Map.values (coerceDatumToMap d)`
  -- | - Lenses: `\d -> view (_record <<< _children) d`
  -- | - Transformed data: `\d -> filter p >>> map f $ extractData d`
  -- |
  -- | See Mike Bostock's [Nested Selections](https://bost.ocks.org/mike/nest/) for more on this pattern.
  -- |
  -- | Maps to D3's `.data(function(d) { return d; })` pattern.
  nestedJoin      :: ∀ f datum. Foldable f =>
                     selection -> Element -> (Datum_ -> f datum) -> (Datum_ -> Index_) -> m selection

  -- | Bind data to elements using the General Update Pattern (enter/update/exit).
  -- |
  -- | Use this when you have **dynamic data** that changes over time. It returns
  -- | three selections so you can handle each case differently:
  -- |
  -- | - `enter`: New data points that need elements created
  -- | - `update`: Existing data points that need updates
  -- | - `exit`: Old elements whose data was removed
  -- |
  -- | ```purescript
  -- | result <- updateJoin svg Circle data keyFn
  -- |
  -- | -- Create new elements
  -- | newCircles <- appendTo result.enter Circle []
  -- | setAttributes newCircles [fill "green", radius 5.0]
  -- |
  -- | -- Update existing elements
  -- | setAttributes result.update [fill "blue"]
  -- |
  -- | -- Remove old elements
  -- | setAttributes result.exit [remove]
  -- | ```
  -- |
  -- | See https://d3js.org/d3-selection#joining-data for the General Update Pattern.
  updateJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_)
    -> m { enter :: selection, exit :: selection, update :: selection }"""
    , source: "src/lib/PSD3/Capabilities/Selection.purs"
    , lines: "85-258"
    }
  ]

-- | Look up a snippet by name
getSnippet :: String -> String
getSnippet name = case name of
  "selectionMClass" -> """class (Monad m) <= SelectionM selection m where
  -- | Append a new element to a selection and return the new element.
  -- |
  -- | This is the primary way to build up a visualization by adding elements
  -- | to a container. Each element can have attributes applied immediately.
  -- |
  -- | ```purescript
  -- | svg <- appendTo root Svg [width 800.0, height 600.0]
  -- | circle <- appendTo svg Circle [cx 50.0, cy 50.0, radius 25.0]
  -- | ```
  -- |
  -- | Maps to D3's `selection.append()` - see https://d3js.org/d3-selection#selection_append
  appendTo        :: selection -> Element -> Array (SelectionAttribute) -> m selection

  -- | Select descendant elements matching a selector within a selection.
  -- |
  -- | This allows you to select elements that are children of the current selection,
  -- | useful for working with structured SVG groups or HTML layouts.
  -- |
  -- | ```purescript
  -- | groups <- selectUnder svg "g.data-group"
  -- | circles <- selectUnder groups "circle"
  -- | ```
  -- |
  -- | Maps to D3's `selection.selectAll()` - see https://d3js.org/d3-selection#selection_selectAll
  selectUnder     :: selection -> Selector selection -> m selection

  -- | Attach to an existing DOM element using a CSS selector.
  -- |
  -- | This is typically the **first operation** in any visualization - it selects
  -- | the container element where your visualization will be rendered.
  -- |
  -- | ```purescript
  -- | root <- attach "#chart"  -- Selects <div id="chart"></div>
  -- | ```
  -- |
  -- | Maps to D3's `d3.select()` - see https://d3js.org/d3-selection#select
  attach          :: Selector selection -> m selection

  -- | Filter a selection to only elements matching a selector.
  -- |
  -- | Useful for narrowing down selections based on classes or other attributes.
  -- |
  -- | ```purescript
  -- | allCircles <- selectUnder svg "circle"
  -- | redCircles <- filterSelection allCircles ".red"
  -- | ```
  -- |
  -- | Maps to D3's `selection.filter()` - see https://d3js.org/d3-selection#selection_filter
  filterSelection :: selection -> Selector selection -> m selection

  -- | Merge two selections into one.
  -- |
  -- | Commonly used to merge enter and update selections after a data join
  -- | so you can apply the same attributes to both.
  -- |
  -- | ```purescript
  -- | result <- updateJoin svg Circle data keyFn
  -- | merged <- mergeSelections result.enter result.update
  -- | setAttributes merged [fill "blue", radius 5.0]
  -- | ```
  -- |
  -- | Maps to D3's `selection.merge()` - see https://d3js.org/d3-selection#selection_merge
  mergeSelections :: selection -> selection -> m selection

  -- | Apply attributes to a selection.
  -- |
  -- | This is how you style and position elements. Attributes are applied in order.
  -- |
  -- | ```purescript
  -- | setAttributes circle [fill "red", stroke "black", strokeWidth 2.0]
  -- | ```
  -- |
  -- | See `PSD3.Attributes` for the full list of available attributes.
  setAttributes   :: selection -> Array (SelectionAttribute) -> m Unit

  -- | Attach behavior (drag, zoom) to a selection.
  -- |
  -- | This enables interactivity by attaching event handlers.
  -- |
  -- | ```purescript
  -- | on circles (Drag DefaultDrag)
  -- | on svg (Zoom { extent: ..., scale: ..., name: "chart", target: svg })
  -- | ```
  -- |
  -- | See `PSD3.Internal.Selection.Types` for available behaviors.
  on              :: selection -> Behavior selection -> m Unit

  -- | Open a selection for data binding.
  -- |
  -- | This is an advanced operation used internally by the update join pattern.
  -- | Most users won't need to call this directly.
  -- |
  -- | **Note**: This operation may be refactored in future versions.
  openSelection   :: selection -> Selector selection -> m selection

  -- | Bind data to elements using a simple join (enter-only pattern).
  -- |
  -- | Use this when you have **static data** that doesn't change. It's simpler
  -- | than `updateJoin` and only handles the "enter" case.
  -- |
  -- | ```purescript
  -- | let data = [1, 2, 3, 4, 5]
  -- | circles <- simpleJoin svg Circle data keyIsID_
  -- | setAttributes circles [cy 50.0, radius 10.0]
  -- | ```
  -- |
  -- | The key function identifies each datum uniquely for D3's internal tracking.
  -- |
  -- | Maps to D3's data join - see https://d3js.org/d3-selection#joining-data
  simpleJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_) -> m selection

  -- | Bind data to elements using nested selections where child data is extracted from parent datum.
  -- |
  -- | Use this for **hierarchical data structures** where child elements need data derived from
  -- | their parent element's bound datum. This enables patterns like tables (rows → cells) or
  -- | nested visualizations (groups → elements).
  -- |
  -- | ```purescript
  -- | let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  -- |
  -- | -- First join: bind rows to outer array
  -- | rows <- simpleJoin tbody Tr matrix keyIsID_
  -- |
  -- | -- Second join: bind cells to each row's inner array
  -- | cellSelection <- openSelection rows "td"
  -- | cells <- nestedJoin cellSelection Td
  -- |            (\d -> coerceDatumToArray d)  -- Extract array from parent datum
  -- |            keyIsID_
  -- | ```
  -- |
  -- | The extraction function receives the parent element's datum and returns any `Foldable`
  -- | container (Array, List, Map.values, etc.). This is automatically converted to an Array
  -- | for D3's use.
  -- |
  -- | **Type flexibility:** The `Foldable` constraint means you can extract from:
  -- | - Arrays: `\d -> coerceDatumToArray d`
  -- | - Lists: `\d -> coerceDatumToList d`
  -- | - Map values: `\d -> Map.values (coerceDatumToMap d)`
  -- | - Lenses: `\d -> view (_record <<< _children) d`
  -- | - Transformed data: `\d -> filter p >>> map f $ extractData d`
  -- |
  -- | See Mike Bostock's [Nested Selections](https://bost.ocks.org/mike/nest/) for more on this pattern.
  -- |
  -- | Maps to D3's `.data(function(d) { return d; })` pattern.
  nestedJoin      :: ∀ f datum. Foldable f =>
                     selection -> Element -> (Datum_ -> f datum) -> (Datum_ -> Index_) -> m selection

  -- | Bind data to elements using the General Update Pattern (enter/update/exit).
  -- |
  -- | Use this when you have **dynamic data** that changes over time. It returns
  -- | three selections so you can handle each case differently:
  -- |
  -- | - `enter`: New data points that need elements created
  -- | - `update`: Existing data points that need updates
  -- | - `exit`: Old elements whose data was removed
  -- |
  -- | ```purescript
  -- | result <- updateJoin svg Circle data keyFn
  -- |
  -- | -- Create new elements
  -- | newCircles <- appendTo result.enter Circle []
  -- | setAttributes newCircles [fill "green", radius 5.0]
  -- |
  -- | -- Update existing elements
  -- | setAttributes result.update [fill "blue"]
  -- |
  -- | -- Remove old elements
  -- | setAttributes result.exit [remove]
  -- | ```
  -- |
  -- | See https://d3js.org/d3-selection#joining-data for the General Update Pattern.
  updateJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_)
    -> m { enter :: selection, exit :: selection, update :: selection }"""
  _ -> "Snippet not found: " <> name

-- | Get snippet info by name
getSnippetInfo :: String -> SnippetInfo
getSnippetInfo name = case name of
  "selectionMClass" ->
    { name: "selectionMClass"
    , content: """class (Monad m) <= SelectionM selection m where
  -- | Append a new element to a selection and return the new element.
  -- |
  -- | This is the primary way to build up a visualization by adding elements
  -- | to a container. Each element can have attributes applied immediately.
  -- |
  -- | ```purescript
  -- | svg <- appendTo root Svg [width 800.0, height 600.0]
  -- | circle <- appendTo svg Circle [cx 50.0, cy 50.0, radius 25.0]
  -- | ```
  -- |
  -- | Maps to D3's `selection.append()` - see https://d3js.org/d3-selection#selection_append
  appendTo        :: selection -> Element -> Array (SelectionAttribute) -> m selection

  -- | Select descendant elements matching a selector within a selection.
  -- |
  -- | This allows you to select elements that are children of the current selection,
  -- | useful for working with structured SVG groups or HTML layouts.
  -- |
  -- | ```purescript
  -- | groups <- selectUnder svg "g.data-group"
  -- | circles <- selectUnder groups "circle"
  -- | ```
  -- |
  -- | Maps to D3's `selection.selectAll()` - see https://d3js.org/d3-selection#selection_selectAll
  selectUnder     :: selection -> Selector selection -> m selection

  -- | Attach to an existing DOM element using a CSS selector.
  -- |
  -- | This is typically the **first operation** in any visualization - it selects
  -- | the container element where your visualization will be rendered.
  -- |
  -- | ```purescript
  -- | root <- attach "#chart"  -- Selects <div id="chart"></div>
  -- | ```
  -- |
  -- | Maps to D3's `d3.select()` - see https://d3js.org/d3-selection#select
  attach          :: Selector selection -> m selection

  -- | Filter a selection to only elements matching a selector.
  -- |
  -- | Useful for narrowing down selections based on classes or other attributes.
  -- |
  -- | ```purescript
  -- | allCircles <- selectUnder svg "circle"
  -- | redCircles <- filterSelection allCircles ".red"
  -- | ```
  -- |
  -- | Maps to D3's `selection.filter()` - see https://d3js.org/d3-selection#selection_filter
  filterSelection :: selection -> Selector selection -> m selection

  -- | Merge two selections into one.
  -- |
  -- | Commonly used to merge enter and update selections after a data join
  -- | so you can apply the same attributes to both.
  -- |
  -- | ```purescript
  -- | result <- updateJoin svg Circle data keyFn
  -- | merged <- mergeSelections result.enter result.update
  -- | setAttributes merged [fill "blue", radius 5.0]
  -- | ```
  -- |
  -- | Maps to D3's `selection.merge()` - see https://d3js.org/d3-selection#selection_merge
  mergeSelections :: selection -> selection -> m selection

  -- | Apply attributes to a selection.
  -- |
  -- | This is how you style and position elements. Attributes are applied in order.
  -- |
  -- | ```purescript
  -- | setAttributes circle [fill "red", stroke "black", strokeWidth 2.0]
  -- | ```
  -- |
  -- | See `PSD3.Attributes` for the full list of available attributes.
  setAttributes   :: selection -> Array (SelectionAttribute) -> m Unit

  -- | Attach behavior (drag, zoom) to a selection.
  -- |
  -- | This enables interactivity by attaching event handlers.
  -- |
  -- | ```purescript
  -- | on circles (Drag DefaultDrag)
  -- | on svg (Zoom { extent: ..., scale: ..., name: "chart", target: svg })
  -- | ```
  -- |
  -- | See `PSD3.Internal.Selection.Types` for available behaviors.
  on              :: selection -> Behavior selection -> m Unit

  -- | Open a selection for data binding.
  -- |
  -- | This is an advanced operation used internally by the update join pattern.
  -- | Most users won't need to call this directly.
  -- |
  -- | **Note**: This operation may be refactored in future versions.
  openSelection   :: selection -> Selector selection -> m selection

  -- | Bind data to elements using a simple join (enter-only pattern).
  -- |
  -- | Use this when you have **static data** that doesn't change. It's simpler
  -- | than `updateJoin` and only handles the "enter" case.
  -- |
  -- | ```purescript
  -- | let data = [1, 2, 3, 4, 5]
  -- | circles <- simpleJoin svg Circle data keyIsID_
  -- | setAttributes circles [cy 50.0, radius 10.0]
  -- | ```
  -- |
  -- | The key function identifies each datum uniquely for D3's internal tracking.
  -- |
  -- | Maps to D3's data join - see https://d3js.org/d3-selection#joining-data
  simpleJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_) -> m selection

  -- | Bind data to elements using nested selections where child data is extracted from parent datum.
  -- |
  -- | Use this for **hierarchical data structures** where child elements need data derived from
  -- | their parent element's bound datum. This enables patterns like tables (rows → cells) or
  -- | nested visualizations (groups → elements).
  -- |
  -- | ```purescript
  -- | let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  -- |
  -- | -- First join: bind rows to outer array
  -- | rows <- simpleJoin tbody Tr matrix keyIsID_
  -- |
  -- | -- Second join: bind cells to each row's inner array
  -- | cellSelection <- openSelection rows "td"
  -- | cells <- nestedJoin cellSelection Td
  -- |            (\d -> coerceDatumToArray d)  -- Extract array from parent datum
  -- |            keyIsID_
  -- | ```
  -- |
  -- | The extraction function receives the parent element's datum and returns any `Foldable`
  -- | container (Array, List, Map.values, etc.). This is automatically converted to an Array
  -- | for D3's use.
  -- |
  -- | **Type flexibility:** The `Foldable` constraint means you can extract from:
  -- | - Arrays: `\d -> coerceDatumToArray d`
  -- | - Lists: `\d -> coerceDatumToList d`
  -- | - Map values: `\d -> Map.values (coerceDatumToMap d)`
  -- | - Lenses: `\d -> view (_record <<< _children) d`
  -- | - Transformed data: `\d -> filter p >>> map f $ extractData d`
  -- |
  -- | See Mike Bostock's [Nested Selections](https://bost.ocks.org/mike/nest/) for more on this pattern.
  -- |
  -- | Maps to D3's `.data(function(d) { return d; })` pattern.
  nestedJoin      :: ∀ f datum. Foldable f =>
                     selection -> Element -> (Datum_ -> f datum) -> (Datum_ -> Index_) -> m selection

  -- | Bind data to elements using the General Update Pattern (enter/update/exit).
  -- |
  -- | Use this when you have **dynamic data** that changes over time. It returns
  -- | three selections so you can handle each case differently:
  -- |
  -- | - `enter`: New data points that need elements created
  -- | - `update`: Existing data points that need updates
  -- | - `exit`: Old elements whose data was removed
  -- |
  -- | ```purescript
  -- | result <- updateJoin svg Circle data keyFn
  -- |
  -- | -- Create new elements
  -- | newCircles <- appendTo result.enter Circle []
  -- | setAttributes newCircles [fill "green", radius 5.0]
  -- |
  -- | -- Update existing elements
  -- | setAttributes result.update [fill "blue"]
  -- |
  -- | -- Remove old elements
  -- | setAttributes result.exit [remove]
  -- | ```
  -- |
  -- | See https://d3js.org/d3-selection#joining-data for the General Update Pattern.
  updateJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_)
    -> m { enter :: selection, exit :: selection, update :: selection }"""
    , source: "src/lib/PSD3/Capabilities/Selection.purs"
    , lines: "85-258"
    }
  _ ->
    { name: "not-found"
    , content: "Snippet not found: " <> name
    , source: ""
    , lines: ""
    }
