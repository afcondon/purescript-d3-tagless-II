-- | Auto-generated module containing code snippets
-- | Generated by scripts/extract-snippets.js
-- | DO NOT EDIT THIS FILE MANUALLY
module CodeSnippets where

import Prelude

-- | Snippet metadata
type SnippetInfo =
  { name :: String
  , content :: String
  , source :: String
  , lines :: String
  }

-- ** Snippet Content Constants **

snippet_selectionMClass_content :: String
snippet_selectionMClass_content = "class (Monad m) <= SelectionM selection m where\n  -- | Append a new element to a selection and return the new element.\n  -- |\n  -- | This is the primary way to build up a visualization by adding elements\n  -- | to a container. Each element can have attributes applied immediately.\n  -- |\n  -- | ```purescript\n  -- | svg <- appendTo root Svg [width 800.0, height 600.0]\n  -- | circle <- appendTo svg Circle [cx 50.0, cy 50.0, radius 25.0]\n  -- | ```\n  -- |\n  -- | Maps to D3's `selection.append()` - see https://d3js.org/d3-selection#selection_append\n  appendTo        :: selection -> Element -> Array (SelectionAttribute) -> m selection\n\n  -- | Select descendant elements matching a selector within a selection.\n  -- |\n  -- | This allows you to select elements that are children of the current selection,\n  -- | useful for working with structured SVG groups or HTML layouts.\n  -- |\n  -- | ```purescript\n  -- | groups <- selectUnder svg \"g.data-group\"\n  -- | circles <- selectUnder groups \"circle\"\n  -- | ```\n  -- |\n  -- | Maps to D3's `selection.selectAll()` - see https://d3js.org/d3-selection#selection_selectAll\n  selectUnder     :: selection -> Selector selection -> m selection\n\n  -- | Attach to an existing DOM element using a CSS selector.\n  -- |\n  -- | This is typically the **first operation** in any visualization - it selects\n  -- | the container element where your visualization will be rendered.\n  -- |\n  -- | ```purescript\n  -- | root <- attach \"#chart\"  -- Selects <div id=\"chart\"></div>\n  -- | ```\n  -- |\n  -- | Maps to D3's `d3.select()` - see https://d3js.org/d3-selection#select\n  attach          :: Selector selection -> m selection\n\n  -- | Filter a selection to only elements matching a selector.\n  -- |\n  -- | Useful for narrowing down selections based on classes or other attributes.\n  -- |\n  -- | ```purescript\n  -- | allCircles <- selectUnder svg \"circle\"\n  -- | redCircles <- filterSelection allCircles \".red\"\n  -- | ```\n  -- |\n  -- | Maps to D3's `selection.filter()` - see https://d3js.org/d3-selection#selection_filter\n  filterSelection :: selection -> Selector selection -> m selection\n\n  -- | Merge two selections into one.\n  -- |\n  -- | Commonly used to merge enter and update selections after a data join\n  -- | so you can apply the same attributes to both.\n  -- |\n  -- | ```purescript\n  -- | result <- updateJoin svg Circle data keyFn\n  -- | merged <- mergeSelections result.enter result.update\n  -- | setAttributes merged [fill \"blue\", radius 5.0]\n  -- | ```\n  -- |\n  -- | Maps to D3's `selection.merge()` - see https://d3js.org/d3-selection#selection_merge\n  mergeSelections :: selection -> selection -> m selection\n\n  -- | Apply attributes to a selection.\n  -- |\n  -- | This is how you style and position elements. Attributes are applied in order.\n  -- |\n  -- | ```purescript\n  -- | setAttributes circle [fill \"red\", stroke \"black\", strokeWidth 2.0]\n  -- | ```\n  -- |\n  -- | See `PSD3.Attributes` for the full list of available attributes.\n  setAttributes   :: selection -> Array (SelectionAttribute) -> m Unit\n\n  -- | Attach behavior (drag, zoom) to a selection.\n  -- |\n  -- | This enables interactivity by attaching event handlers.\n  -- |\n  -- | ```purescript\n  -- | on circles (Drag DefaultDrag)\n  -- | on svg (Zoom { extent: ..., scale: ..., name: \"chart\", target: svg })\n  -- | ```\n  -- |\n  -- | See `PSD3.Internal.Selection.Types` for available behaviors.\n  on              :: selection -> Behavior selection -> m Unit\n\n  -- | Open a selection for data binding.\n  -- |\n  -- | This is an advanced operation used internally by the update join pattern.\n  -- | Most users won't need to call this directly.\n  -- |\n  -- | **Note**: This operation may be refactored in future versions.\n  openSelection   :: selection -> Selector selection -> m selection\n\n  -- | Bind data to elements using a simple join (enter-only pattern).\n  -- |\n  -- | Use this when you have **static data** that doesn't change. It's simpler\n  -- | than `updateJoin` and only handles the \"enter\" case.\n  -- |\n  -- | ```purescript\n  -- | let data = [1, 2, 3, 4, 5]\n  -- | circles <- simpleJoin svg Circle data keyIsID_\n  -- | setAttributes circles [cy 50.0, radius 10.0]\n  -- | ```\n  -- |\n  -- | The key function identifies each datum uniquely for D3's internal tracking.\n  -- |\n  -- | Maps to D3's data join - see https://d3js.org/d3-selection#joining-data\n  simpleJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_) -> m selection\n\n  -- | Bind data to elements using nested selections where child data is extracted from parent datum.\n  -- |\n  -- | Use this for **hierarchical data structures** where child elements need data derived from\n  -- | their parent element's bound datum. This enables patterns like tables (rows → cells) or\n  -- | nested visualizations (groups → elements).\n  -- |\n  -- | ```purescript\n  -- | let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n  -- |\n  -- | -- First join: bind rows to outer array\n  -- | rows <- simpleJoin tbody Tr matrix keyIsID_\n  -- |\n  -- | -- Second join: bind cells to each row's inner array\n  -- | cellSelection <- openSelection rows \"td\"\n  -- | cells <- nestedJoin cellSelection Td\n  -- |            (\\d -> coerceDatumToArray d)  -- Extract array from parent datum\n  -- |            keyIsID_\n  -- | ```\n  -- |\n  -- | The extraction function receives the parent element's datum and returns any `Foldable`\n  -- | container (Array, List, Map.values, etc.). This is automatically converted to an Array\n  -- | for D3's use.\n  -- |\n  -- | **Type flexibility:** The `Foldable` constraint means you can extract from:\n  -- | - Arrays: `\\d -> coerceDatumToArray d`\n  -- | - Lists: `\\d -> coerceDatumToList d`\n  -- | - Map values: `\\d -> Map.values (coerceDatumToMap d)`\n  -- | - Lenses: `\\d -> view (_record <<< _children) d`\n  -- | - Transformed data: `\\d -> filter p >>> map f $ extractData d`\n  -- |\n  -- | See Mike Bostock's [Nested Selections](https://bost.ocks.org/mike/nest/) for more on this pattern.\n  -- |\n  -- | Maps to D3's `.data(function(d) { return d; })` pattern.\n  nestedJoin      :: ∀ f datum. Foldable f =>\n                     selection -> Element -> (Datum_ -> f datum) -> (Datum_ -> Index_) -> m selection\n\n  -- | Bind data to elements using the General Update Pattern (enter/update/exit).\n  -- |\n  -- | Use this when you have **dynamic data** that changes over time. It returns\n  -- | three selections so you can handle each case differently:\n  -- |\n  -- | - `enter`: New data points that need elements created\n  -- | - `update`: Existing data points that need updates\n  -- | - `exit`: Old elements whose data was removed\n  -- |\n  -- | ```purescript\n  -- | result <- updateJoin svg Circle data keyFn\n  -- |\n  -- | -- Create new elements\n  -- | newCircles <- appendTo result.enter Circle []\n  -- | setAttributes newCircles [fill \"green\", radius 5.0]\n  -- |\n  -- | -- Update existing elements\n  -- | setAttributes result.update [fill \"blue\"]\n  -- |\n  -- | -- Remove old elements\n  -- | setAttributes result.exit [remove]\n  -- | ```\n  -- |\n  -- | See https://d3js.org/d3-selection#joining-data for the General Update Pattern.\n  updateJoin      :: ∀ datum.  selection -> Element -> (Array datum) -> (Datum_ -> Index_)\n    -> m { enter :: selection, exit :: selection, update :: selection }"

-- | All available snippets
snippets :: Array SnippetInfo
snippets =
  [ { name: "selectionMClass"
    , content: snippet_selectionMClass_content
    , source: "src/lib/PSD3/Capabilities/Selection.purs"
    , lines: "85-258"
    }
  ]

-- | Look up a snippet by name
getSnippet :: String -> String
getSnippet name = case name of
  "selectionMClass" -> snippet_selectionMClass_content
  _ -> "Snippet not found: " <> name

-- | Get snippet info by name
getSnippetInfo :: String -> SnippetInfo
getSnippetInfo name = case name of
  "selectionMClass" ->
    { name: "selectionMClass"
    , content: snippet_selectionMClass_content
    , source: "src/lib/PSD3/Capabilities/Selection.purs"
    , lines: "85-258"
    }
  _ ->
    { name: "not-found"
    , content: "Snippet not found: " <> name
    , source: ""
    , lines: ""
    }
