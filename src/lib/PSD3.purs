-- | PSD3: PureScript D3 - Type-safe, composable data visualization
-- |
-- | PSD3 is a PureScript library for creating D3.js visualizations using a type-safe,
-- | functional API. It wraps D3's selection, simulation, and layout APIs in a monadic
-- | interface that provides composability, type safety, and multiple interpretations.
-- |
-- | ## Key Features
-- |
-- | - **Type-safe**: Compile-time checking of visualization code
-- | - **Composable**: Build complex visualizations from simple parts
-- | - **Multiple Interpreters**: Run the same code as D3, debug strings, or AST
-- | - **Finally Tagless**: Abstract over monad and selection types
-- | - **Monadic API**: Use do-notation for clear, sequential visualization construction
-- |
-- | ## Architecture
-- |
-- | PSD3 uses a **finally tagless encoding** with three main capability type classes:
-- |
-- | 1. **SelectionM** - Core D3 operations (select, append, set attributes, data joins)
-- | 2. **SimulationM** - Force-directed graph simulations (extends SelectionM)
-- | 3. **SankeyM** - Sankey diagram layouts (extends SelectionM)
-- |
-- | Each capability has multiple interpreters:
-- | - **D3M** - Actually manipulates the DOM using D3.js
-- | - **StringM** - Generates a string representation (for debugging)
-- | - **MetaTreeM** - Builds an abstract syntax tree (for analysis)
-- |
-- | ## Quick Start
-- |
-- | For most visualizations, import this module and PSD3.Attributes:
-- |
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes (fill, strokeColor, cx, cy, radius, width, height)
-- | import Effect (Effect)
-- |
-- | main :: Effect Unit
-- | main = eval_D3M do
-- |   -- 1. Attach to a container element
-- |   root <- attach "#chart"
-- |
-- |   -- 2. Create SVG canvas
-- |   svg <- appendTo root Svg [width 800.0, height 600.0]
-- |
-- |   -- 3. Add elements with attributes
-- |   circle <- appendTo svg Circle
-- |     [ cx 100.0
-- |     , cy 100.0
-- |     , radius 50.0
-- |     , fill "steelblue"
-- |     , strokeColor "black"
-- |     ]
-- |
-- |   pure unit
-- | ```
-- |
-- | ## Data Visualization Example
-- |
-- | Bind data to elements using the General Update Pattern:
-- |
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes as A
-- |
-- | barChart :: forall m. SelectionM D3Selection_ m => Array Number -> m Unit
-- | barChart data = do
-- |   svg <- attach "#chart" >>= \r -> appendTo r Svg [A.width 500.0, A.height 300.0]
-- |
-- |   -- Data join: bind array to rectangles
-- |   bars <- simpleJoin svg Rect data (\d -> unsafeCoerce d)
-- |
-- |   -- Set attributes from data
-- |   setAttributes bars
-- |     [ A.x (\d i -> i * 25.0)          -- Position by index
-- |     , A.y (\d -> 300.0 - d)           -- Height from data value
-- |     , A.width 20.0
-- |     , A.height (\d -> d)              -- Bar height = data value
-- |     , A.fill "steelblue"
-- |     ]
-- |
-- | main :: Effect Unit
-- | main = eval_D3M $ barChart [50.0, 80.0, 120.0, 90.0, 110.0]
-- | ```
-- |
-- | ## Force Simulation Example
-- |
-- | Create animated, force-directed graphs:
-- |
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes as A
-- | import Control.Monad.State (MonadState)
-- | import PSD3.Internal.Simulation.Types (D3SimulationState_)
-- |
-- | forceGraph :: forall m.
-- |   SimulationM D3Selection_ m =>
-- |   MonadState { simulation :: D3SimulationState_ } m =>
-- |   GraphData ->
-- |   m Unit
-- | forceGraph graph = do
-- |   svg <- attach "#chart" >>= \r -> appendTo r Svg [A.width 800.0, A.height 600.0]
-- |
-- |   -- Load data into simulation
-- |   nodesInSim <- setNodes graph.nodes
-- |   linksInSim <- setLinks graph.links graph.nodes keyFn
-- |
-- |   -- Create visual elements
-- |   lines <- simpleJoin svg Line linksInSim linkKeyFn
-- |   circles <- simpleJoin svg Circle nodesInSim nodeKeyFn
-- |
-- |   setAttributes circles [A.radius 5.0, A.fill "steelblue"]
-- |
-- |   -- Update positions on each tick
-- |   addTickFunction "nodes" $ Step circles [A.cx nodeX, A.cy nodeY]
-- |   addTickFunction "links" $ Step lines
-- |     [A.x1 linkSourceX, A.y1 linkSourceY, A.x2 linkTargetX, A.y2 linkTargetY]
-- |
-- |   -- Start animation
-- |   start
-- | ```
-- |
-- | ## Sankey Diagram Example
-- |
-- | Create flow diagrams:
-- |
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes as A
-- | import Control.Monad.State (MonadState)
-- | import PSD3.Internal.Sankey.Types (SankeyLayoutState_)
-- |
-- | sankeyDiagram :: forall m.
-- |   SankeyM D3Selection_ m =>
-- |   MonadState { sankeyLayout :: SankeyLayoutState_ } m =>
-- |   FlowData ->
-- |   m Unit
-- | sankeyDiagram data = do
-- |   svg <- attach "#chart" >>= \r -> appendTo r Svg [A.width 1000.0, A.height 600.0]
-- |
-- |   -- Compute layout
-- |   layoutResult <- setSankeyData data 1000.0 600.0
-- |
-- |   -- Render links
-- |   links <- simpleJoin svg Path layoutResult.links keyFn
-- |   setAttributes links
-- |     [ A.d sankeyLinkPath_
-- |     , A.strokeWidth link_.width
-- |     , A.fill "none"
-- |     , A.strokeColor link_.color
-- |     ]
-- |
-- |   -- Render nodes
-- |   nodes <- simpleJoin svg Rect layoutResult.nodes keyFn
-- |   setAttributes nodes
-- |     [ A.x node_.x0
-- |     , A.y node_.y0
-- |     , A.width (\n -> node_.x1 n - node_.x0 n)
-- |     , A.height (\n -> node_.y1 n - node_.y0 n)
-- |     , A.fill node_.color
-- |     ]
-- | ```
-- |
-- | ## Running Visualizations
-- |
-- | Different run functions for different capabilities:
-- |
-- | **Basic Selection API**:
-- | ```purescript
-- | eval_D3M :: forall a. D3M a -> Effect a
-- | ```
-- |
-- | **Force Simulations**:
-- | ```purescript
-- | evalEffectSimulation :: forall a. D3SimM a -> Effect a
-- | runWithD3_Simulation :: forall a. D3SimM a -> Effect Unit
-- | ```
-- |
-- | **Sankey Diagrams**:
-- | ```purescript
-- | evalEffectSankey :: forall a. D3SankeyM a -> Effect a
-- | runWithD3_Sankey :: forall a. D3SankeyM a -> Effect Unit
-- | ```
-- |
-- | ## Module Organization
-- |
-- | **Core Modules** (import these):
-- | - `PSD3` - Main module (this one) - core types and functions
-- | - `PSD3.Attributes` - All attribute functions (fill, cx, width, etc.)
-- |
-- | **Capability Type Classes**:
-- | - `PSD3.Capabilities.Selection` - Core selection operations
-- | - `PSD3.Capabilities.Simulation` - Force simulation operations
-- | - `PSD3.Capabilities.Sankey` - Sankey layout operations
-- |
-- | **Type Definitions**:
-- | - `PSD3.Types` - All PSD3 types in one module
-- | - `PSD3.Internal.Types` - Core type definitions
-- | - `PSD3.Internal.Simulation.Types` - Simulation-specific types
-- | - `PSD3.Internal.Sankey.Types` - Sankey-specific types
-- |
-- | **Interpreters**:
-- | - `PSD3.Interpreter.D3` - D3.js interpreter (DOM manipulation)
-- | - `PSD3.Interpreter.String` - String interpreter (debugging)
-- | - `PSD3.Interpreter.MetaTree` - AST interpreter (analysis)
-- |
-- | **Data Structures**:
-- | - `PSD3.Data.Tree` - Tree data structures and operations
-- | - `PSD3.Data.Node` - Node and link data types
-- |
-- | ## Import Patterns
-- |
-- | **Most common** (basic visualizations):
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes as A
-- | ```
-- |
-- | **Force simulations**:
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes as A
-- | import Control.Monad.State (MonadState)
-- | import PSD3.Internal.Simulation.Types (D3SimulationState_)
-- | ```
-- |
-- | **Sankey diagrams**:
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes as A
-- | import Control.Monad.State (MonadState)
-- | import PSD3.Internal.Sankey.Types (SankeyLayoutState_)
-- | ```
-- |
-- | **Custom type-safe code**:
-- | ```purescript
-- | import PSD3
-- | import PSD3.Attributes as A
-- | import PSD3.Types  -- For type signatures
-- | ```
-- |
-- | ## Exports
-- |
-- | This module re-exports:
-- |
-- | **From Prelude**:
-- | - Common functions and type classes
-- |
-- | **Type Classes** (capabilities):
-- | - `SelectionM` - Basic selection operations
-- | - `SimulationM` - Force simulation operations
-- | - `SankeyM` - Sankey layout operations
-- |
-- | **Type Class Methods**:
-- | - Selection: `attach`, `appendTo`, `selectUnder`, `setAttributes`, `simpleJoin`, `updateJoin`, etc.
-- | - Simulation: `setNodes`, `setLinks`, `start`, `stop`, `addTickFunction`, etc.
-- | - Sankey: `setSankeyData`, `setSankeyDataWithConfig`
-- |
-- | **Interpreters and Run Functions**:
-- | - `D3M`, `D3SimM`, `D3SankeyM` - Monad types
-- | - `eval_D3M`, `evalEffectSimulation`, `evalEffectSankey` - Run in Effect
-- | - `runWithD3_Simulation`, `runWithD3_Sankey` - Run with existing state
-- |
-- | **Common Types**:
-- | - `Element` - SVG/HTML element types (Svg, Circle, Rect, Path, etc.)
-- | - `D3Selection_` - Opaque selection type
-- | - `Selector` - CSS selector string type
-- | - `SelectionAttribute` - Attribute type
-- | - `Behavior` - Interactive behaviors (Drag, Zoom)
-- | - `DragBehavior` - Drag behavior variants
-- | - `Datum_`, `Index_` - Data and index types
-- |
-- | ## See Also
-- |
-- | - [D3.js Documentation](https://d3js.org/) - Underlying D3 library
-- | - `PSD3.Capabilities.Selection` - Selection API documentation
-- | - `PSD3.Capabilities.Simulation` - Simulation API documentation
-- | - `PSD3.Capabilities.Sankey` - Sankey API documentation
-- | - `PSD3.Attributes` - All available attributes
-- | - `PSD3.Types` - All type definitions
module PSD3 (module X) where

import Prelude as X

import PSD3.Capabilities.Selection (class SelectionM, appendTo, attach, filterSelection, mergeSelections, on, openSelection, selectUnder, setAttributes, simpleJoin, updateJoin) as X
import PSD3.Capabilities.Simulation (class SimulationM, actualizeForces, addTickFunction, mergeNewDataWithSim, removeTickFunction, setConfigVariable, setLinks, setLinksFromSelection, setNodes, setNodesFromSelection, simulationHandle, start, stop) as X
import PSD3.Capabilities.Sankey (class SankeyM, setSankeyData, setSankeyDataWithConfig) as X

import PSD3.Interpreter.D3 (D3M, D3SankeyM, D3SimM, eval_D3M, evalEffectSankey, evalEffectSimulation, eval_D3M_Sankey, eval_D3M_Simulation, exec_D3M, exec_D3M_Sankey, exec_D3M_Simulation, runD3M, runWithD3_Sankey, runWithD3_Simulation, run_D3M_Sankey, run_D3M_Simulation) as X

import PSD3.Internal.Types (D3Selection_, Datum_, Element(..), Index_, Selector) as X
import PSD3.Internal.Selection.Types (Behavior(..), DragBehavior(..), SelectionAttribute) as X
