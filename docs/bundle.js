// Generated by purs bundle 0.14.3
var PS = {};
(function(exports) {
  /* global XMLHttpRequest */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url, xhr) {
        if (xhr.nodejsBaseUrl === null) {
          var urllib = module.require("url");
          var u = urllib.parse(url);
          u.protocol = u.protocol || "http:";
          u.hostname = u.hostname || "localhost";
          return urllib.format(u);
        } else {
          return url || "/";
        }
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            // eslint-disable-next-line no-eq-null,eqeqeq
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        var onerror = function (msgIdent) {
          return function () {
            errback(new Error(msgIdent));
          };
        };
        xhr.onerror = onerror(requestFailedMessageIdent);
        xhr.ontimeout = onerror(timeoutErrorMessageIdent);
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            body: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.timeout = options.timeout;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Affjax"] = PS["Affjax"] || {});
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["flap"] = flap;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);  
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 243, column 1 - line 243, column 62): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.MediaType.Common"] = $PS["Data.MediaType.Common"] || {};
  var exports = $PS["Data.MediaType.Common"];          
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Affjax.RequestBody"] = $PS["Affjax.RequestBody"] || {};
  var exports = $PS["Affjax.RequestBody"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["toMediaType"] = toMediaType;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["alaF"] = alaF;
  exports["under"] = under;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Affjax.RequestHeader"] = $PS["Affjax.RequestHeader"] || {};
  var exports = $PS["Affjax.RequestHeader"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var value = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
  }; 
  var name = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["name"] = name;
  exports["value"] = value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Affjax.ResponseFormat"] = $PS["Affjax.ResponseFormat"] || {};
  var exports = $PS["Affjax.ResponseFormat"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Affjax.ResponseFormat (line 44, column 3 - line 50, column 19): " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  var string = new $$String(Control_Category.identity(Control_Category.categoryFn));
  var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["string"] = string;
  exports["ignore"] = ignore;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Affjax.ResponseHeader"] = $PS["Affjax.ResponseHeader"] || {};
  var exports = $PS["Affjax.ResponseHeader"];      
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  exports["ResponseHeader"] = ResponseHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["unlessM"] = unlessM;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  }; 
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                      if (rm instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                      };
                      if (rm instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                              if (rn instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                              };
                              if (rn instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                  });
              };
          });
      };
  };
  exports["runExceptT"] = runExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }                      
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports.empty = {};

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["mkFn2"] = $foreign.mkFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  exports["lookup"] = lookup;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Foreign_Object = $PS["Foreign.Object"];   
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Folding ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.any = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["foreach"] = $foreign.foreach;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["pushWhile"] = pushWhile;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function(exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                       
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["sum"] = sum;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordUnit = new Ord(function () {
      return Data_Eq.eqUnit;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordUnit"] = ordUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  }; 
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  }; 
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubByEq = function (eq) {
      return function (xs) {
          return (function __do() {
              var arr = Data_Array_ST["new"]();
              Control_Monad_ST_Internal.foreach(xs)(function (x) {
                  return function __do() {
                      var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                          var $99 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                          var $100 = $foreign.any(function (v) {
                              return eq(v)(x);
                          });
                          return function ($101) {
                              return $99($100($101));
                          };
                      })())(Data_Array_ST.unsafeFreeze(arr))();
                      return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
                  };
              })();
              return Data_Array_ST.unsafeFreeze(arr)();
          })();
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var intercalate = function (dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST["new"]();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST["new"]();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elem"] = elem;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldl"] = foldl;
  exports["intercalate"] = intercalate;
  exports["sortBy"] = sortBy;
  exports["groupBy"] = groupBy;
  exports["nubByEq"] = nubByEq;
  exports["deleteBy"] = deleteBy;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["filter"] = $foreign.filter;
  exports["partition"] = $foreign.partition;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  // A helper which transforms the result ofencodeURIComponent to be compliant
  // with RFC3896, as described in the MDN documentation here:
  //
  // https://web.archive.org/web/20201206001047/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
  function toRFC3896(input) {
    return input.replace(/[!'()*]/g, function (c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  }

  exports._encodeURIComponent = function encode(fail, succeed, input) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input)));
    } catch (err) {
      return fail(err);
    }
  };

  function _decodeURIComponent(fail, succeed, input) {
    try {
      return succeed(decodeURIComponent(input));
    } catch (err) {
      return fail(err);
    }
  }
})(PS["JSURI"] = PS["JSURI"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["JSURI"] = $PS["JSURI"] || {};
  var exports = $PS["JSURI"];
  var $foreign = $PS["JSURI"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var $$encodeURIComponent = Data_Function_Uncurried.runFn3($foreign["_encodeURIComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["encodeURIComponent"] = $$encodeURIComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.FormURLEncoded"] = $PS["Data.FormURLEncoded"] || {};
  var exports = $PS["Data.FormURLEncoded"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var JSURI = $PS["JSURI"];
  var toArray = function (v) {
      return v;
  };                                                                                                                 
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return JSURI["encodeURIComponent"](v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                  return function (val) {
                      return key + ("=" + val);
                  };
              })(JSURI["encodeURIComponent"](v.value0)))(JSURI["encodeURIComponent"](v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 18 - line 39, column 108): " + [ v.constructor.name ]);
      };
      var $16 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_Common.joinWith("&"));
      var $17 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(encodePart);
      return function ($18) {
          return $16($17(toArray($18)));
      };
  })();
  exports["encode"] = encode;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.HTTP.Method"] = $PS["Data.HTTP.Method"] || {};
  var exports = $PS["Data.HTTP.Method"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];                                  
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method (line 43, column 1 - line 59, column 23): " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["GET"] = GET;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
  var bifunctorTuple = new Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifunctorEither = new Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v(v2.value0));
              };
              if (v2 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
  exports["bifunctorEither"] = bifunctorEither;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify'"] = modify$prime;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($58) {
          return go(f($58));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v = Effect_Ref.read(r)();
                      if (v instanceof Loop) {
                          var e = f(v.value0)();
                          Effect_Ref.write(e)(r)();
                          return false;
                      };
                      if (v instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
          };
      };
  });
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["forever"] = forever;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEffect"] = monadRecEffect;
  exports["monadRecEither"] = monadRecEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];                        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });           
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $235 = Data_NonEmpty.singleton(plusList);
      return function ($236) {
          return NonEmptyList($235($236));
      };
  })());
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Unit = $PS["Data.Unit"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                          return new Data_List_Types.Cons(v, acc);
                      })(function (v) {
                          return reverse(acc);
                      })(aa));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var wrappedOperation = function (name) {
      return function (f) {
          return function (v) {
              var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 97, column 3 - line 99, column 81): " + [ v1.constructor.name ]);
          };
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var reverse = wrappedOperation("reverse")(Data_List.reverse);
  var head = function (v) {
      return v.value0;
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["head"] = head;
  exports["reverse"] = reverse;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["null"] = $foreign["null"];
  exports["notNull"] = $foreign.notNull;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];       
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign["_fork"](false);
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };                                 
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var $$finally = function (fin) {
      return function (a) {
          return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
  };
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var functorFiber = new Data_Functor.Functor(function (f) {
      return function (t) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
      };
  });
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };   
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);                                  
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $50 = Control_Parallel_Class.parallel(parallelAff);
      var $51 = Control_Applicative.pure(applicativeAff);
      return function ($52) {
          return $50($51($52));
      };
  })());
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (res) {
              if (res instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(res.value0);
              };
              if (res instanceof Control_Monad_Rec_Class.Loop) {
                  return go(res.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 22): " + [ res.constructor.name ]);
          });
      };
      return go;
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["runAff_"] = runAff_;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["delay"] = delay;
  exports["finally"] = $$finally;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["functorFiber"] = functorFiber;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [ v.constructor.name ]);
  };
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readBoolean = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("Boolean");
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readBoolean"] = readBoolean;
  exports["fail"] = fail;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Affjax"] = $PS["Affjax"] || {};
  var exports = $PS["Affjax"];
  var $foreign = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Affjax_ResponseHeader = $PS["Affjax.ResponseHeader"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FormURLEncoded = $PS["Data.FormURLEncoded"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var RequestContentError = (function () {
      function RequestContentError(value0) {
          this.value0 = value0;
      };
      RequestContentError.create = function (value0) {
          return new RequestContentError(value0);
      };
      return RequestContentError;
  })();
  var ResponseBodyError = (function () {
      function ResponseBodyError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseBodyError.create = function (value0) {
          return function (value1) {
              return new ResponseBodyError(value0, value1);
          };
      };
      return ResponseBodyError;
  })();
  var TimeoutError = (function () {
      function TimeoutError() {

      };
      TimeoutError.value = new TimeoutError();
      return TimeoutError;
  })();
  var RequestFailedError = (function () {
      function RequestFailedError() {

      };
      RequestFailedError.value = new RequestFailedError();
      return RequestFailedError;
  })();
  var XHROtherError = (function () {
      function XHROtherError(value0) {
          this.value0 = value0;
      };
      XHROtherError.create = function (value0) {
          return new XHROtherError(value0);
      };
      return XHROtherError;
  })();
  var request = function (req) {
      var parseJSON = function (v) {
          if (v === "") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
          };
          return Data_Either.either((function () {
              var $51 = Foreign.fail(Data_Identity.monadIdentity);
              return function ($52) {
                  return $51(Foreign.ForeignError.create($52));
              };
          })())(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
      };
      var fromResponse = (function () {
          if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("ArrayBuffer");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Blob");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
              return function (x) {
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Document")(x))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("XMLDocument")(x)))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("HTMLDocument")(x));
              };
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($53) {
                  return req.responseFormat.value0(parseJSON($53));
              })(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String"));
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
              return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
          };
          throw new Error("Failed pattern match at Affjax (line 257, column 18 - line 265, column 57): " + [ req.responseFormat.constructor.name ]);
      })();
      var extractContent = function (v) {
          if (v instanceof Affjax_RequestBody.ArrayView) {
              return Data_Either.Right.create(v.value0(Foreign.unsafeToForeign));
          };
          if (v instanceof Affjax_RequestBody.Blob) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.Document) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody["String"]) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormData) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormURLEncoded) {
              return Data_Either.note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(Data_Functor.map(Data_Maybe.functorMaybe)(Foreign.unsafeToForeign)(Data_FormURLEncoded.encode(v.value0)));
          };
          if (v instanceof Affjax_RequestBody.Json) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 217, column 20 - line 232, column 69): " + [ v.constructor.name ]);
      };
      var addHeader = function (mh) {
          return function (hs) {
              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                  return Data_Array.snoc(hs)(mh.value0);
              };
              return hs;
          };
      };
      var headers = function (reqContent) {
          return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
      };
      var ajaxRequest = function (v) {
          return {
              method: Data_HTTP_Method.print(req.method),
              url: req.url,
              headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                  return {
                      field: Affjax_RequestHeader.name(h),
                      value: Affjax_RequestHeader.value(h)
                  };
              })(headers(req.content)),
              content: v,
              responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
              username: Data_Nullable.toNullable(req.username),
              password: Data_Nullable.toNullable(req.password),
              withCredentials: req.withCredentials,
              timeout: Data_Maybe.fromMaybe(0.0)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1;
              })(req.timeout))
          };
      };
      var send = function (content) {
          return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"]("AffjaxTimeoutErrorMessageIdent", "AffjaxRequestFailedMessageIdent", Affjax_ResponseHeader.ResponseHeader.create, ajaxRequest(content)))))(function (v) {
              if (v instanceof Data_Either.Right) {
                  var v1 = Control_Monad_Except.runExcept(fromResponse(v.value0.body));
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(new ResponseBodyError(Data_List_NonEmpty.head(v1.value0), v.value0));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          body: v1.value0,
                          headers: v.value0.headers,
                          status: v.value0.status,
                          statusText: v.value0.statusText
                      });
                  };
                  throw new Error("Failed pattern match at Affjax (line 193, column 9 - line 195, column 52): " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Left) {
                  var message = Effect_Exception.message(v.value0);
                  return Data_Either.Left.create((function () {
                      var $38 = message === "AffjaxTimeoutErrorMessageIdent";
                      if ($38) {
                          return TimeoutError.value;
                      };
                      var $39 = message === "AffjaxRequestFailedMessageIdent";
                      if ($39) {
                          return RequestFailedError.value;
                      };
                      return new XHROtherError(v.value0);
                  })());
              };
              throw new Error("Failed pattern match at Affjax (line 191, column 137 - line 201, column 33): " + [ v.constructor.name ]);
          });
      };
      if (req.content instanceof Data_Maybe.Nothing) {
          return send(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
      };
      if (req.content instanceof Data_Maybe.Just) {
          var v = extractContent(req.content.value0);
          if (v instanceof Data_Either.Right) {
              return send(Data_Nullable.toNullable(new Data_Maybe.Just(v.value0)));
          };
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(new RequestContentError(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 183, column 7 - line 187, column 48): " + [ v.constructor.name ]);
      };
      throw new Error("Failed pattern match at Affjax (line 179, column 3 - line 187, column 48): " + [ req.content.constructor.name ]);
  };
  var printError = function (v) {
      if (v instanceof RequestContentError) {
          return "There was a problem with the request content: " + v.value0;
      };
      if (v instanceof ResponseBodyError) {
          return "There was a problem with the response body: " + Foreign.renderForeignError(v.value0);
      };
      if (v instanceof TimeoutError) {
          return "There was a problem making the request: timeout";
      };
      if (v instanceof RequestFailedError) {
          return "There was a problem making the request: request failed";
      };
      if (v instanceof XHROtherError) {
          return "There was a problem making the request: " + Effect_Exception.message(v.value0);
      };
      throw new Error("Failed pattern match at Affjax (line 97, column 14 - line 107, column 66): " + [ v.constructor.name ]);
  };
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false,
      responseFormat: Affjax_ResponseFormat.ignore,
      timeout: Data_Maybe.Nothing.value
  };   
  var get = function (rf) {
      return function (u) {
          return request({
              method: defaultRequest.method,
              url: u,
              headers: defaultRequest.headers,
              content: defaultRequest.content,
              username: defaultRequest.username,
              password: defaultRequest.password,
              withCredentials: defaultRequest.withCredentials,
              responseFormat: rf,
              timeout: defaultRequest.timeout
          });
      };
  };
  exports["printError"] = printError;
  exports["get"] = get;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Applicative.Free"] = $PS["Control.Applicative.Free"] || {};
  var exports = $PS["Control.Applicative.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var Ap = (function () {
      function Ap(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ap.create = function (value0) {
          return function (value1) {
              return new Ap(value0, value1);
          };
      };
      return Ap;
  })();
  var mkAp = function (fba) {
      return function (fb) {
          return new Ap(fba, fb);
      };
  };
  var liftFreeAp = Lift.create;
  var goLeft = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_valStack) {
              return function ($copy_nat) {
                  return function ($copy_func) {
                      return function ($copy_count) {
                          var $tco_var_dictApplicative = $copy_dictApplicative;
                          var $tco_var_fStack = $copy_fStack;
                          var $tco_var_valStack = $copy_valStack;
                          var $tco_var_nat = $copy_nat;
                          var $tco_var_func = $copy_func;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
                              if (func instanceof Pure) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: Control_Applicative.pure(dictApplicative)(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Lift) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: nat(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Ap) {
                                  $tco_var_dictApplicative = dictApplicative;
                                  $tco_var_fStack = fStack;
                                  $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                                  $tco_var_nat = nat;
                                  $tco_var_func = func.value0;
                                  $copy_count = count + 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [ func.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
                          };
                          return $tco_result;
                      };
                  };
              };
          };
      };
  };
  var goApply = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_vals) {
              return function ($copy_gVal) {
                  var $tco_var_dictApplicative = $copy_dictApplicative;
                  var $tco_var_fStack = $copy_fStack;
                  var $tco_var_vals = $copy_vals;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictApplicative, fStack, vals, gVal) {
                      if (fStack instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return new Data_Either.Left(gVal);
                      };
                      if (fStack instanceof Data_List_Types.Cons) {
                          var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
                          var $14 = fStack.value0.count === 1;
                          if ($14) {
                              if (fStack.value1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return new Data_Either.Left(gRes);
                              };
                              $tco_var_dictApplicative = dictApplicative;
                              $tco_var_fStack = fStack.value1;
                              $tco_var_vals = vals;
                              $copy_gVal = gRes;
                              return;
                          };
                          if (vals instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Data_Either.Left(gRes);
                          };
                          if (vals instanceof Data_List_Types.Cons) {
                              $tco_done = true;
                              return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                  func: gRes,
                                  count: fStack.value0.count - 1 | 0
                              }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [ vals.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [ fStack.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var functorFreeAp = new Data_Functor.Functor(function (f) {
      return function (x) {
          return mkAp(new Pure(f))(x);
      };
  });
  var foldFreeAp = function (dictApplicative) {
      return function (nat) {
          return function (z) {
              var go = function ($copy_v) {
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v) {
                      if (v.value1.value0 instanceof Pure) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Lift) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Ap) {
                          var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
                          $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
                          return;
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [ v.value1.value0.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($copy_v);
                  };
                  return $tco_result;
              };
              return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
          };
      };
  };
  var retractFreeAp = function (dictApplicative) {
      return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyFreeAp = new Control_Apply.Apply(function () {
      return functorFreeAp;
  }, function (fba) {
      return function (fb) {
          return mkAp(fba)(fb);
      };
  });
  var applicativeFreeAp = new Control_Applicative.Applicative(function () {
      return applyFreeAp;
  }, Pure.create);
  var hoistFreeAp = function (f) {
      return foldFreeAp(applicativeFreeAp)(function ($37) {
          return liftFreeAp(f($37));
      });
  };
  exports["retractFreeAp"] = retractFreeAp;
  exports["hoistFreeAp"] = hoistFreeAp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Fork.Class"] = $PS["Control.Monad.Fork.Class"] || {};
  var exports = $PS["Control.Monad.Fork.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
      this.Functor1 = Functor1;
      this.Monad0 = Monad0;
      this.fork = fork;
      this.join = join;
      this.suspend = suspend;
  };
  var monadForkAff = new MonadFork(function () {
      return Effect_Aff.functorFiber;
  }, function () {
      return Effect_Aff.monadAff;
  }, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
  var fork = function (dict) {
      return dict.fork;
  };
  exports["fork"] = fork;
  exports["monadForkAff"] = monadForkAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done1 = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($136) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($136));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["foldFree"] = foldFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeMonad"] = freeMonad;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify"] = modify;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];                
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
              });
          };
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadEffectState = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadStateT(dictMonadEffect.Monad0());
      }, (function () {
          var $110 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
          var $111 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($112) {
              return $110($111($112));
          };
      })());
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["runStateT"] = runStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadEffectState"] = monadEffectState;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Attributes.Instances"] = $PS["D3.Attributes.Instances"] || {};
  var exports = $PS["D3.Attributes.Instances"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];                
  var Static = (function () {
      function Static(value0) {
          this.value0 = value0;
      };
      Static.create = function (value0) {
          return new Static(value0);
      };
      return Static;
  })();
  var Fn = (function () {
      function Fn(value0) {
          this.value0 = value0;
      };
      Fn.create = function (value0) {
          return new Fn(value0);
      };
      return Fn;
  })();
  var FnI = (function () {
      function FnI(value0) {
          this.value0 = value0;
      };
      FnI.create = function (value0) {
          return new FnI(value0);
      };
      return FnI;
  })();
  var StringAttr = (function () {
      function StringAttr(value0) {
          this.value0 = value0;
      };
      StringAttr.create = function (value0) {
          return new StringAttr(value0);
      };
      return StringAttr;
  })();
  var NumberAttr = (function () {
      function NumberAttr(value0) {
          this.value0 = value0;
      };
      NumberAttr.create = function (value0) {
          return new NumberAttr(value0);
      };
      return NumberAttr;
  })();
  var ArrayAttr = (function () {
      function ArrayAttr(value0) {
          this.value0 = value0;
      };
      ArrayAttr.create = function (value0) {
          return new ArrayAttr(value0);
      };
      return ArrayAttr;
  })();
  var AttributeSetter = (function () {
      function AttributeSetter(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttributeSetter.create = function (value0) {
          return function (value1) {
              return new AttributeSetter(value0, value1);
          };
      };
      return AttributeSetter;
  })();
  var ToAttr = function (toAttr) {
      this.toAttr = toAttr;
  };
  var unboxAttr = function (v) {
      if (v instanceof StringAttr && v.value0 instanceof Static) {
          return v.value0.value0;
      };
      if (v instanceof StringAttr && v.value0 instanceof Fn) {
          return v.value0.value0;
      };
      if (v instanceof StringAttr && v.value0 instanceof FnI) {
          return v.value0.value0;
      };
      if (v instanceof NumberAttr && v.value0 instanceof Static) {
          return v.value0.value0;
      };
      if (v instanceof NumberAttr && v.value0 instanceof Fn) {
          return v.value0.value0;
      };
      if (v instanceof NumberAttr && v.value0 instanceof FnI) {
          return v.value0.value0;
      };
      if (v instanceof ArrayAttr && v.value0 instanceof Static) {
          return v.value0.value0;
      };
      if (v instanceof ArrayAttr && v.value0 instanceof Fn) {
          return v.value0.value0;
      };
      if (v instanceof ArrayAttr && v.value0 instanceof FnI) {
          return v.value0.value0;
      };
      throw new Error("Failed pattern match at D3.Attributes.Instances (line 49, column 3 - line 60, column 46): " + [ v.constructor.name ]);
  }; 
  var toAttrStringFn = new ToAttr(function ($34) {
      return StringAttr.create(Fn.create($34));
  });
  var toAttrString = new ToAttr(function ($35) {
      return StringAttr.create(Static.create($35));
  });
  var toAttrNumberFnI = new ToAttr(function ($36) {
      return NumberAttr.create(FnI.create(Data_Function_Uncurried.mkFn2($36)));
  });
  var toAttrNumberFn = new ToAttr(function ($37) {
      return NumberAttr.create(Fn.create($37));
  });
  var toAttrNumber = new ToAttr(function ($38) {
      return NumberAttr.create(Static.create($38));
  });
  var toAttr = function (dict) {
      return dict.toAttr;
  };
  var attributeLabel = function (v) {
      return v.value0;
  };
  exports["toAttr"] = toAttr;
  exports["AttributeSetter"] = AttributeSetter;
  exports["attributeLabel"] = attributeLabel;
  exports["Static"] = Static;
  exports["Fn"] = Fn;
  exports["FnI"] = FnI;
  exports["StringAttr"] = StringAttr;
  exports["NumberAttr"] = NumberAttr;
  exports["ArrayAttr"] = ArrayAttr;
  exports["unboxAttr"] = unboxAttr;
  exports["toAttrString"] = toAttrString;
  exports["toAttrStringFn"] = toAttrStringFn;
  exports["toAttrNumber"] = toAttrNumber;
  exports["toAttrNumberFn"] = toAttrNumberFn;
  exports["toAttrNumberFnI"] = toAttrNumberFnI;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Data.Types"] = $PS["D3.Data.Types"] || {};
  var exports = $PS["D3.Data.Types"];
  var Data_Show = $PS["Data.Show"];
  var MouseEnter = (function () {
      function MouseEnter() {

      };
      MouseEnter.value = new MouseEnter();
      return MouseEnter;
  })();
  var MouseLeave = (function () {
      function MouseLeave() {

      };
      MouseLeave.value = new MouseLeave();
      return MouseLeave;
  })();
  var MouseClick = (function () {
      function MouseClick() {

      };
      MouseClick.value = new MouseClick();
      return MouseClick;
  })();
  var MouseDown = (function () {
      function MouseDown() {

      };
      MouseDown.value = new MouseDown();
      return MouseDown;
  })();
  var MouseUp = (function () {
      function MouseUp() {

      };
      MouseUp.value = new MouseUp();
      return MouseUp;
  })();
  var Div = (function () {
      function Div() {

      };
      Div.value = new Div();
      return Div;
  })();
  var Svg = (function () {
      function Svg() {

      };
      Svg.value = new Svg();
      return Svg;
  })();
  var Circle = (function () {
      function Circle() {

      };
      Circle.value = new Circle();
      return Circle;
  })();
  var Line = (function () {
      function Line() {

      };
      Line.value = new Line();
      return Line;
  })();
  var Group = (function () {
      function Group() {

      };
      Group.value = new Group();
      return Group;
  })();
  var Text = (function () {
      function Text() {

      };
      Text.value = new Text();
      return Text;
  })();
  var Path = (function () {
      function Path() {

      };
      Path.value = new Path();
      return Path;
  })();
  var Rect = (function () {
      function Rect() {

      };
      Rect.value = new Rect();
      return Rect;
  })();
  var DefaultCubic = (function () {
      function DefaultCubic() {

      };
      DefaultCubic.value = new DefaultCubic();
      return DefaultCubic;
  })();
  var showMouseEvent = new Data_Show.Show(function (v) {
      if (v instanceof MouseEnter) {
          return "mouseenter";
      };
      if (v instanceof MouseLeave) {
          return "mouseleave";
      };
      if (v instanceof MouseClick) {
          return "click";
      };
      if (v instanceof MouseDown) {
          return "mousedown";
      };
      if (v instanceof MouseUp) {
          return "mouseup";
      };
      throw new Error("Failed pattern match at D3.Data.Types (line 46, column 1 - line 51, column 30): " + [ v.constructor.name ]);
  });
  var showElement = new Data_Show.Show(function (v) {
      if (v instanceof Div) {
          return "div";
      };
      if (v instanceof Svg) {
          return "svg";
      };
      if (v instanceof Circle) {
          return "circle";
      };
      if (v instanceof Line) {
          return "line";
      };
      if (v instanceof Group) {
          return "g";
      };
      if (v instanceof Text) {
          return "text";
      };
      if (v instanceof Path) {
          return "path";
      };
      if (v instanceof Rect) {
          return "rect";
      };
      throw new Error("Failed pattern match at D3.Data.Types (line 25, column 1 - line 33, column 23): " + [ v.constructor.name ]);
  });
  exports["Svg"] = Svg;
  exports["Circle"] = Circle;
  exports["Line"] = Line;
  exports["Group"] = Group;
  exports["Text"] = Text;
  exports["Path"] = Path;
  exports["MouseClick"] = MouseClick;
  exports["DefaultCubic"] = DefaultCubic;
  exports["showElement"] = showElement;
  exports["showMouseEvent"] = showMouseEvent;
})(PS);
(function(exports) {
  const debug = false        
  exports.d3Append_ = element => selection => { return selection.append(element) }
  exports.d3DataWithKeyFunction_ = data => keyFn => selection => { return selection.data(data, keyFn) }
  exports.d3EnterAndAppend_ = element => selection => { return selection.enter().append(element) }
  exports.d3GetExitSelection_ = selection => { return selection.exit() }
  exports.d3GetEnterSelection_ = selection => { return selection.enter() }
  exports.d3GetSelectionData_ = selection => { return selection.data() }
  exports.d3FilterSelection_ = selection => selector => selection.filter(selector)
  exports.d3LowerSelection_ = selection => selection.lower()
  exports.d3MergeSelectionWith_ = enter => update => { return enter.merge(update); }
  exports.d3OrderSelection_ = selection => selection.order()
  exports.d3RaiseSelection_ = selection => selection.raise()
  exports.d3RemoveSelection_ = selection => { return selection.remove() }
  exports.d3SelectAllInDOM_ = selector => { return d3.selectAll(selector) }
  exports.d3SelectFirstInDOM_ = selector => { return d3.select(selector) }
  exports.d3SelectionIsEmpty_ = selection => selection.empty()
  exports.d3SelectionSelect_ = selector => selection => { return selection.select(selector) }
  exports.d3SelectionSelectAll_ = selector => selection => { return selection.selectAll(selector) }
  exports.d3SetAttr_ = name => value => selection => { return selection.attr(name, value) }
  exports.d3SetHTML_ = value => selection => { return selection.html(value) }
  exports.d3SetProperty_ = value => selection => { return selection.property(value) }
  exports.d3SetText_ = value => selection => { return selection.text(value) }
  exports.d3SortSelection_ = selection => compare => selection.sort(compare)
  exports.simulationDrag_ = label => selection => simulation => dragFn => selection.call(dragFn(label, simulation))
  exports.disableDrag_ = selection => { return selection.on('.drag', null) }
  exports.getIndexFromDatum_ = datum => { return (typeof datum.index == `undefined`) ? "?" : datum.index }
  exports.selectionOn_ = selection => event => callback => { return selection.on(event, callback) }
  exports.d3AddTransition_ = selection => transition => {
    var handle
    if (transition.name == '') {
      handle = selection.transition()
      // if transition is unnamed we configure it...
      if (transition.duration != 0) {
        handle.duration(transition.duration)
      }
      if (transition.delay != 0) {
        handle.delay(transition.delay)
      }
    } else {
      handle = selection.transition(transition.name)
    }
    return handle
  }
  // *****************************************************************************************************************
  // *****  there will either need to be quite a range of these functions or a way of writing them in Purs     *******
  // *****  this is really down in the weeds of D3 without supporting abstractions in the PS library           *******
  // *****  CONCRETE EXAMPLE: this defaults to updating fx but in Spago example position is on parent, using   *******
  // *****  transforms to move both circle and label together (only way to position a <group> in SVG)
  // *****************************************************************************************************************
  exports.simdrag = (label,simulation) => {  
    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }
    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }
    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
    return d3.drag()
            .on('start.' + label, dragstarted)
            .on('drag.' + label, dragged)
            .on('end.' + label, dragended);
  }
  // *****************************************************************************************************************
  // ************************** functions from d3js Simulation module         *****************************************
  // *****************************************************************************************************************
  exports.linksForceName = "links"
  exports.disableTick_ = simulation => name => { return simulation.on('tick.' + name, () => null) }
  exports.forceCenter_ = () => d3.forceCenter()
  exports.forceCollideFn_ = () => d3.forceCollide()
  exports.forceLink_ = () => d3.forceLink().id(d => d.id)
  exports.forceMany_ = () => d3.forceManyBody()
  exports.forceRadial_ = () => d3.forceRadial()
  exports.forceX_ = () => d3.forceX()
  exports.forceY_ = () => d3.forceY()                        
  exports.getNodes_ = simulation => simulation.nodes()
  exports.keyIsID_ = d => { 
    // console.log(`FFI: looking up the id of node: ${d.id}`);
    return d.id;
  }
  exports.setAlpha_ = simulation => alpha => {
    console.log(`FFI: setting simulation.alpha to ${alpha}`);
    simulation.alpha(alpha)
  }
  exports.setAlphaDecay_ = simulation => alphaDecay => simulation.alphaDecay(alphaDecay)
  exports.setAlphaMin_ = simulation => alphaMin => simulation.alphaMin(alphaMin)
  exports.setAlphaTarget_ = simulation => alphaTarget => simulation.alphaTarget(alphaTarget)
  exports.setAlphaTarget_ = simulation => target => simulation.alphaTarget(target)
  exports.setAsNullForceInSimulation_ = simulation => label => simulation.force(label, null)
  exports.setForceDistance_ = force => attr => force.distance(attr)
  exports.setForceDistanceMax_ = force => attr => force.distanceMax(attr)
  exports.setForceDistanceMin_ = force => attr => force.distanceMin(attr)
  exports.setForceIterations_ = force => attr => force.iterations(attr)
  exports.setForceRadius_ = force => attr => force.radius(attr)
  exports.setForceStrength_ = force => attr => force.strength(attr)
  exports.setForceTheta_ = force => attr => force.theta(attr)
  exports.setForceX_ = force => attr => force.x(attr)
  exports.setForceY_ = force => attr => force.y(attr)           
  exports.setVelocityDecay_ = simulation => velocityDecay => simulation.velocityDecay(velocityDecay)
  exports.startSimulation_ = simulation => {
    console.log(`FFI: restarting the simulation, alpha is: ${simulation.alpha()}`);
    simulation.restart()
  }
  exports.stopSimulation_ = simulation => simulation.stop()
  exports.initSimulation_ = config => keyFn => { 
    const simulation = d3.
       forceSimulation([])
      .force(exports.linksForceName, d3.forceLink([]).id(keyFn))
      .alpha(config.alpha) // default is 1
      .alphaTarget(config.alphaTarget) // default is 0
      .alphaMin(config.alphaMin) // default is 0.0001
      .alphaDecay(config.alphaDecay) // default is 0.0228
      .velocityDecay(config.velocityDecay) // default is 0.4
    if (true) {
      console.log(`FFI: initSimulation${simulation}`)
    }
    return simulation
  }
  exports.readSimulationVariables = simulation => {
    return {
      alpha: simulation.alpha(),
      alphaTarget: simulation.alphaTarget(),
      alphaMin: simulation.alphaMin(),
      alphaDecay: simulation.alphaDecay(),
      velocityDecay: simulation.velocityDecay()
    }
  }
  unpin = d => {
    d.fx = null
    d.fy = null
    return d;
  }
  // we create an object that contains only those fields that we want to override what was in the existing selection's data
  // concretely, if we want update to change fx/fy status then we put that data in here otherwise it will be unchanged
  // no matter what the incoming data object has for fx/fy
  getBaseForAssign = (newNodeMap, key) => {
    let newnode = newNodeMap.get(key)
    if (newnode) {
      var updatedCount;
      if (typeof newnode.updatedCount === 'undefined') {
        updatedCount = 0;
      } else {
        updatedCount = newnode.updatedCount + 1;
      }
      return { fx: newnode.fx, fy: newnode.fy, updatedCount: updatedCount }
    } else {
      return d
    }
  }

  exports.d3PreserveSimulationPositions_ = selection => nodedata => keyFn => {
    // create a map from our chosen id to the OLD obj reference, got from the data thats attached to selection
    const oldNodeMap = new Map(selection.data().map(d => [keyFn(d), d])); 
    // create a map from our chosen id to the NEW / incoming obj reference
    const newNodeMap = new Map(nodedata.map(d => [keyFn(d), d])); 
    // we need to copy the fx/fy (at least) from the updating data 
    console.log(`FFI: d3PreserveSimulationPositions_ given ${nodedata.length} nodes, in selection ${selection.data().length}`);
  
    // REVIEW (also what if we wanted r, say, or x, to change???)
    // we need to be able to specify which fields are to change, ideally, and which are not
    let updatedNodeData = nodedata.map(d => {
      let id = keyFn(d)
      let newNode = newNodeMap.get(id)
      let shell = {}
      if (newNode) {
        console.log(`FFI: copying fx/fy from incoming node to old object (if present)`);
        shell = { fx: newNode.fx, fy: newNode.fy, gridXY: newNode.gridXY, updated: true }
      }
      return Object.assign(oldNodeMap.get(id) || d, shell)
    });
    return updatedNodeData
  }
  exports.d3PreserveLinkReferences_ = link => links => {
    const old = new Map(link.data().map(d => [exports.getLinkID_(d), d])); 
    let updatedLinkData = links.map(d => Object.assign(old.get(exports.getLinkID_(d)) || d, {} ));
    // now, based on link signature, we should really de-swizzle here? and we may HAVE TO do so
    return updatedLinkData
  }
  exports.getIDsFromNodes_ = nodes => keyFn => {
    const keys = [];
    for (let i = 0; i < nodes.length; i++) {
      keys[i] = keyFn(nodes[i]);
    }
    return keys
  }

  exports.setNodes_ = simulation => nodes => {
    console.log(`FFI: setting nodes in simulation, there are ${nodes.length} nodes`);
    simulation.nodes(nodes)
    return simulation.nodes()
  }
  // we're going to always use the same name for the links force denominated by the linksForceName string
  exports.setLinks_ = simulation => links => {
    console.log(`FFI: setting links in simulation, there are ${links.length} links`);
    simulation.force(exports.linksForceName).links(links)
  }
  // returns array of links with ids replaced by object references, invalid links are discarded
  exports.swizzleLinks_ = links => simNodes => keyFn => {
    console.log(`FFI: swizzling links in simulation, there are ${links.length} links`);
    const nodeById = new Map(simNodes.map(d => [keyFn(d), d])); // creates a map from our chosen id to the old obj reference
    // we could use the copy approach from d3PreserveSimulationPositions here so that links animate
    const swizzledLinks = links.filter( (link, index, arr)  => {
      // look up both source and target (which could be id or obj reference)
      // if both source and target are found in nodeMap then we can swizzle and return true
      // else we just return false and this node will go in the bit bucket
      if (typeof link.source !== "object") { 
        link.source = nodeById.get(link.source) // try to get object reference if we don't have it
      } else {
        link.source = nodeById.get(keyFn(link.source)) // try to replace object reference with new object reference
      }
      if (typeof link.target !== "object") { 
        link.target = nodeById.get(link.target)
      } else {
        link.target = nodeById.get(keyFn(link.target))
      }
      // now let's see what we got from that and if we have a valid link or not
      if (typeof link.source === 'undefined' || link.target === 'undefined') {
        return false; // filter this node
      } else {
        link.id = keyFn(link.source) + "-" + keyFn(link.target)
        return true // we've updated the 
      }
    })
    return swizzledLinks
  }
  exports.unsetLinks_ = simulation => {
    const linkForce = d3.forceLink([])
    console.log('FFI: removing all links from simulation');
    simulation.force(exports.linksForceName, linkForce)
    return simulation
  }
  // this will work on both swizzled and unswizzled links
  exports.getLinkID_ = keyFn => link => { // version for generating an ID for the link object
    const sourceID = (typeof link.source == `object`) ? keyFn(link.source) : link.source
    const targetID = (typeof link.target == `object`) ? keyFn(link.target) : link.target
    return sourceID + "-" + targetID 
  }
  exports.getLinkIDs_ = keyFn => link => { // version for generating the pairs to check against node ids for pruning
    const sourceID = (typeof link.source == `object`) ? keyFn(link.source) : link.source
    const targetID = (typeof link.target == `object`) ? keyFn(link.target) : link.target
    return { sourceID, targetID } 
  }
  exports.getLinksFromSimulation_ = simulation => {
    linksForce = simulation.force(exports.linksForceName)
    if (typeof linksForce === `undefined`) {
      return [] // either the force wasn't found, or the force wasn't a links force
    }
    const result = linksForce.links()
    if (typeof result === `undefined`) {
      return []
    }
    return result
  }
  exports.onTick_ = simulation => name => tickFn => {
    var result = simulation.on('tick.' + name, () => {
      tickFn()
    })
    return result;
  }   
  exports.putForceInSimulation_ = simulation => label => force => {
    // console.log(`FFI: Putting ${label} force in the simulation`);
    simulation.force(label, force)
  }                                            
  exports.descendants_ = tree => tree.descendants()  
  exports.getClusterLayoutFn_ = () => d3.cluster()
  exports.getTreeLayoutFn_ = () => d3.tree()
  exports.hasChildren_ = d => (d.children === 'undefined') ? false : true 
  exports.getHierarchyValue_ = d => (d.value === 'undefined') ? null : d.value // returns a Nullable Number 
  exports.getHierarchyChildren_ = d => !d.children ? [] : d.children // don't think this can ever be null in valid hierarchy node but this gives us confidence that PureScript type is right 
  exports.hierarchyFromJSON_ = json => d3.hierarchy(json)
  exports.hNodeDepth_ = node => node.depth
  exports.hNodeHeight_ = node => node.height
  exports.links_ = tree => tree.links()            
  exports.runLayoutFn_ = layout => root => layout(root)
  exports.sharesParent_ = a => b => a.parent == b.parent
  exports.treeSetNodeSize_ = tree => widthHeight => tree.nodeSize(widthHeight)
  exports.treeSetSeparation_ = tree => separationFn => tree.separation(separationFn)
  exports.treeSetSize_ = tree => widthHeight => tree.size(widthHeight)
  exports.treeSortForTree_Spago = root =>
    root.
       sum(function (d) {
        return d.value
      })
      .sort(function (a, b) {
        const result =
          b.height - a.height || a.data.name.localeCompare(b.data.name)
        return result
      })
  exports.treeMinMax_ = root => {
    let max_x = -(Infinity) // start max with smallest possible number
    let min_x = Infinity    // start min with the largest possible number
    let max_y = -(Infinity)
    let min_y = Infinity
    root.each(d => {
      if (d.x > max_x) max_x = d.x // if we find a value greater than current max, that's our new maximum
      if (d.y > max_y) max_y = d.y 

      if (d.x < min_x) min_x = d.x // if we find a value less than current min, that's our new minimum
      if (d.y < min_y) min_y = d.y 
      // console.log(`FFI: node ${d} (${min_x}, ${min_y}) (${max_x}, ${max_y})`);
    })      
    return { xMin: min_x, xMax: max_x, yMin: min_y, yMax: max_y }
  }
  exports.linkHorizontal_ = d3.
     linkHorizontal()
    .x(d => d.y)
    .y(d => d.x)
  exports.linkVertical_ = d3.
     linkVertical()
    .x(d => d.x)
    .y(d => d.y)
  exports.linkClusterHorizontal_ = levelSpacing => d =>
    `M${d.target.y}, ${d.target.x}
   C${  d.source.y + levelSpacing / 2},${d.target.x}
   ${  d.source.y + levelSpacing / 2},${d.source.x}
   ${  d.source.y},${d.source.x}`
  exports.linkClusterVertical_ = levelSpacing => d =>
    `M${d.target.x}, ${d.target.y}
   C${  d.target.x}, ${d.source.y + levelSpacing / 2}
   ${  d.source.x},${d.source.y + levelSpacing / 2}
   ${  d.source.x},${d.source.y}`
  exports.linkRadial_ = angleFn => radiusFn =>
    d3.
       linkRadial()
      .angle(angleFn)
      .radius(radiusFn)
  // *****************************************************************************************************************
  // ************************** functions from d3js zoom module         *****************************************
  // *****************************************************************************************************************

  exports.d3AttachZoomDefaultExtent_ = selection => config => {
    function zoomed ({ transform }) {
      config.target.attr('transform', transform)
    }
    // "If extent is not specified, returns the current extent accessor, which
    // defaults to [[0, 0], [width, height]] where width is the client width of the
    // element and height is its client height; for SVG elements, the nearest
    // ancestor SVG element’s viewBox, or width and height attributes, are used.""
    return selection.call(
      d3.
         zoom()
        .scaleExtent(config.scaleExtent)
        .on(`zoom.${config.name}`, zoomed)
    )
  }
  exports.d3AttachZoom_ = selection => config => {
    selection.call(
      d3.
         zoom()
        .extent(config.extent) // extent is [ [], [] ]
        .scaleExtent(config.scaleExtent)
        .on(`zoom.${config.name}`, (event) => { config.target.attr('transform', event.transform) })
    )
    return selection
  }
})(PS["D3.FFI"] = PS["D3.FFI"] || {});
(function(exports) {
  exports.idTreeLeaf_ = obj => {
    const treeObj = Object.assign({}, obj)
    treeObj.isTreeLeaf = true
    return treeObj
  }
  exports.idTreeParent_ = obj => children => {
    const treeObj = Object.assign({}, obj)
    treeObj.isTreeLeaf = false
    treeObj.children = children
    return treeObj
  }

  exports.emptyTreeJson_ = {}
})(PS["D3.Data.Tree"] = PS["D3.Data.Tree"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 580, column 3 - line 580, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $775 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($776) {
                                  return Data_Maybe.Just.create($775($776));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["alter"] = alter;
  exports["update"] = update;
  exports["keys"] = keys;
  exports["union"] = union;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Data.Tree"] = $PS["D3.Data.Tree"] || {};
  var exports = $PS["D3.Data.Tree"];
  var $foreign = $PS["D3.Data.Tree"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var TidyTree = (function () {
      function TidyTree() {

      };
      TidyTree.value = new TidyTree();
      return TidyTree;
  })();
  var Dendrogram = (function () {
      function Dendrogram() {

      };
      Dendrogram.value = new Dendrogram();
      return Dendrogram;
  })();
  var Radial = (function () {
      function Radial() {

      };
      Radial.value = new Radial();
      return Radial;
  })();
  var Horizontal = (function () {
      function Horizontal() {

      };
      Horizontal.value = new Horizontal();
      return Horizontal;
  })();
  var Vertical = (function () {
      function Vertical() {

      };
      Vertical.value = new Vertical();
      return Vertical;
  })();
  var makeD3TreeJSONFromTreeID = function (root) {
      return function (nodesMap) {
          var go = function (v) {
              var v1 = Data_Map_Internal.lookup(Data_Ord.ordInt)(v.value0)(nodesMap);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return $foreign.emptyTreeJson_;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  if (v.value1 instanceof Data_List_Types.Nil) {
                      return $foreign.idTreeLeaf_(v1.value0);
                  };
                  return $foreign.idTreeParent_(v1.value0)(Data_Functor.map(Data_Functor.functorArray)(go)(Data_Array.fromFoldable(Data_List_Types.foldableList)(v.value1)));
              };
              throw new Error("Failed pattern match at D3.Data.Tree (line 49, column 7 - line 53, column 84): " + [ v1.constructor.name ]);
          };
          return go(root);
      };
  }; 
  var eqTreeLayout = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Radial && y instanceof Radial) {
              return true;
          };
          if (x instanceof Horizontal && y instanceof Horizontal) {
              return true;
          };
          if (x instanceof Vertical && y instanceof Vertical) {
              return true;
          };
          return false;
      };
  });
  exports["TidyTree"] = TidyTree;
  exports["Dendrogram"] = Dendrogram;
  exports["Radial"] = Radial;
  exports["Horizontal"] = Horizontal;
  exports["Vertical"] = Vertical;
  exports["makeD3TreeJSONFromTreeID"] = makeD3TreeJSONFromTreeID;
  exports["eqTreeLayout"] = eqTreeLayout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.FFI"] = $PS["D3.FFI"] || {};
  var exports = $PS["D3.FFI"];
  var $foreign = $PS["D3.FFI"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var Data_Unit = $PS["Data.Unit"];
  var getLayout = function (layout) {
      if (layout instanceof D3_Data_Tree.TidyTree) {
          return $foreign.getTreeLayoutFn_(Data_Unit.unit);
      };
      if (layout instanceof D3_Data_Tree.Dendrogram) {
          return $foreign.getClusterLayoutFn_(Data_Unit.unit);
      };
      throw new Error("Failed pattern match at D3.FFI (line 260, column 3 - line 262, column 43): " + [ layout.constructor.name ]);
  };
  exports["getLayout"] = getLayout;
  exports["d3AttachZoom_"] = $foreign.d3AttachZoom_;
  exports["d3AttachZoomDefaultExtent_"] = $foreign.d3AttachZoomDefaultExtent_;
  exports["d3SelectAllInDOM_"] = $foreign.d3SelectAllInDOM_;
  exports["d3SelectFirstInDOM_"] = $foreign.d3SelectFirstInDOM_;
  exports["d3SelectionSelectAll_"] = $foreign.d3SelectionSelectAll_;
  exports["d3SelectionSelect_"] = $foreign.d3SelectionSelect_;
  exports["d3SelectionIsEmpty_"] = $foreign.d3SelectionIsEmpty_;
  exports["d3GetSelectionData_"] = $foreign.d3GetSelectionData_;
  exports["d3EnterAndAppend_"] = $foreign.d3EnterAndAppend_;
  exports["d3Append_"] = $foreign.d3Append_;
  exports["d3MergeSelectionWith_"] = $foreign.d3MergeSelectionWith_;
  exports["d3GetEnterSelection_"] = $foreign.d3GetEnterSelection_;
  exports["d3GetExitSelection_"] = $foreign.d3GetExitSelection_;
  exports["d3RemoveSelection_"] = $foreign.d3RemoveSelection_;
  exports["d3FilterSelection_"] = $foreign.d3FilterSelection_;
  exports["d3OrderSelection_"] = $foreign.d3OrderSelection_;
  exports["d3RaiseSelection_"] = $foreign.d3RaiseSelection_;
  exports["d3LowerSelection_"] = $foreign.d3LowerSelection_;
  exports["d3SortSelection_"] = $foreign.d3SortSelection_;
  exports["getIndexFromDatum_"] = $foreign.getIndexFromDatum_;
  exports["keyIsID_"] = $foreign.keyIsID_;
  exports["d3DataWithKeyFunction_"] = $foreign.d3DataWithKeyFunction_;
  exports["d3AddTransition_"] = $foreign.d3AddTransition_;
  exports["d3SetAttr_"] = $foreign.d3SetAttr_;
  exports["d3SetText_"] = $foreign.d3SetText_;
  exports["d3SetProperty_"] = $foreign.d3SetProperty_;
  exports["d3SetHTML_"] = $foreign.d3SetHTML_;
  exports["simulationDrag_"] = $foreign.simulationDrag_;
  exports["simdrag"] = $foreign.simdrag;
  exports["disableDrag_"] = $foreign.disableDrag_;
  exports["selectionOn_"] = $foreign.selectionOn_;
  exports["linksForceName"] = $foreign.linksForceName;
  exports["initSimulation_"] = $foreign.initSimulation_;
  exports["readSimulationVariables"] = $foreign.readSimulationVariables;
  exports["d3PreserveSimulationPositions_"] = $foreign.d3PreserveSimulationPositions_;
  exports["d3PreserveLinkReferences_"] = $foreign.d3PreserveLinkReferences_;
  exports["getIDsFromNodes_"] = $foreign.getIDsFromNodes_;
  exports["getNodes_"] = $foreign.getNodes_;
  exports["setNodes_"] = $foreign.setNodes_;
  exports["setLinks_"] = $foreign.setLinks_;
  exports["swizzleLinks_"] = $foreign.swizzleLinks_;
  exports["getLinkIDs_"] = $foreign.getLinkIDs_;
  exports["unsetLinks_"] = $foreign.unsetLinks_;
  exports["getLinksFromSimulation_"] = $foreign.getLinksFromSimulation_;
  exports["startSimulation_"] = $foreign.startSimulation_;
  exports["stopSimulation_"] = $foreign.stopSimulation_;
  exports["onTick_"] = $foreign.onTick_;
  exports["disableTick_"] = $foreign.disableTick_;
  exports["setAlpha_"] = $foreign.setAlpha_;
  exports["setAlphaMin_"] = $foreign.setAlphaMin_;
  exports["setAlphaDecay_"] = $foreign.setAlphaDecay_;
  exports["setAlphaTarget_"] = $foreign.setAlphaTarget_;
  exports["setVelocityDecay_"] = $foreign.setVelocityDecay_;
  exports["forceCenter_"] = $foreign.forceCenter_;
  exports["forceCollideFn_"] = $foreign.forceCollideFn_;
  exports["forceMany_"] = $foreign.forceMany_;
  exports["forceRadial_"] = $foreign.forceRadial_;
  exports["forceX_"] = $foreign.forceX_;
  exports["forceY_"] = $foreign.forceY_;
  exports["forceLink_"] = $foreign.forceLink_;
  exports["setForceRadius_"] = $foreign.setForceRadius_;
  exports["setForceStrength_"] = $foreign.setForceStrength_;
  exports["setForceTheta_"] = $foreign.setForceTheta_;
  exports["setForceDistanceMin_"] = $foreign.setForceDistanceMin_;
  exports["setForceDistanceMax_"] = $foreign.setForceDistanceMax_;
  exports["setForceIterations_"] = $foreign.setForceIterations_;
  exports["setForceX_"] = $foreign.setForceX_;
  exports["setForceY_"] = $foreign.setForceY_;
  exports["setForceDistance_"] = $foreign.setForceDistance_;
  exports["putForceInSimulation_"] = $foreign.putForceInSimulation_;
  exports["setAsNullForceInSimulation_"] = $foreign.setAsNullForceInSimulation_;
  exports["hierarchyFromJSON_"] = $foreign.hierarchyFromJSON_;
  exports["treeSortForTree_Spago"] = $foreign.treeSortForTree_Spago;
  exports["hasChildren_"] = $foreign.hasChildren_;
  exports["getHierarchyValue_"] = $foreign.getHierarchyValue_;
  exports["getHierarchyChildren_"] = $foreign.getHierarchyChildren_;
  exports["descendants_"] = $foreign.descendants_;
  exports["links_"] = $foreign.links_;
  exports["runLayoutFn_"] = $foreign.runLayoutFn_;
  exports["treeSetSize_"] = $foreign.treeSetSize_;
  exports["treeSetNodeSize_"] = $foreign.treeSetNodeSize_;
  exports["treeSetSeparation_"] = $foreign.treeSetSeparation_;
  exports["treeMinMax_"] = $foreign.treeMinMax_;
  exports["sharesParent_"] = $foreign.sharesParent_;
  exports["linkHorizontal_"] = $foreign.linkHorizontal_;
  exports["linkVertical_"] = $foreign.linkVertical_;
  exports["linkClusterHorizontal_"] = $foreign.linkClusterHorizontal_;
  exports["linkClusterVertical_"] = $foreign.linkClusterVertical_;
  exports["linkRadial_"] = $foreign.linkRadial_;
  exports["hNodeDepth_"] = $foreign.hNodeDepth_;
  exports["hNodeHeight_"] = $foreign.hNodeHeight_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Selection"] = $PS["D3.Selection"] || {};
  var exports = $PS["D3.Selection"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_FFI = $PS["D3.FFI"];
  var Data_Array = $PS["Data.Array"];
  var Data_Show = $PS["Data.Show"];
  var Order = (function () {
      function Order() {

      };
      Order.value = new Order();
      return Order;
  })();
  var Sort = (function () {
      function Sort(value0) {
          this.value0 = value0;
      };
      Sort.create = function (value0) {
          return new Sort(value0);
      };
      return Sort;
  })();
  var Raise = (function () {
      function Raise() {

      };
      Raise.value = new Raise();
      return Raise;
  })();
  var Lower = (function () {
      function Lower() {

      };
      Lower.value = new Lower();
      return Lower;
  })();
  var AttrT = (function () {
      function AttrT(value0) {
          this.value0 = value0;
      };
      AttrT.create = function (value0) {
          return new AttrT(value0);
      };
      return AttrT;
  })();
  var TextT = (function () {
      function TextT(value0) {
          this.value0 = value0;
      };
      TextT.create = function (value0) {
          return new TextT(value0);
      };
      return TextT;
  })();
  var HTMLT = (function () {
      function HTMLT(value0) {
          this.value0 = value0;
      };
      HTMLT.create = function (value0) {
          return new HTMLT(value0);
      };
      return HTMLT;
  })();
  var PropertyT = (function () {
      function PropertyT(value0) {
          this.value0 = value0;
      };
      PropertyT.create = function (value0) {
          return new PropertyT(value0);
      };
      return PropertyT;
  })();
  var OrderingT = (function () {
      function OrderingT(value0) {
          this.value0 = value0;
      };
      OrderingT.create = function (value0) {
          return new OrderingT(value0);
      };
      return OrderingT;
  })();
  var TransitionT = (function () {
      function TransitionT(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TransitionT.create = function (value0) {
          return function (value1) {
              return new TransitionT(value0, value1);
          };
      };
      return TransitionT;
  })();
  var RemoveT = (function () {
      function RemoveT() {

      };
      RemoveT.value = new RemoveT();
      return RemoveT;
  })();
  var OnT = (function () {
      function OnT(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnT.create = function (value0) {
          return function (value1) {
              return new OnT(value0, value1);
          };
      };
      return OnT;
  })();
  var OnT$prime = (function () {
      function OnT$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnT$prime.create = function (value0) {
          return function (value1) {
              return new OnT$prime(value0, value1);
          };
      };
      return OnT$prime;
  })();
  var DefaultDrag = (function () {
      function DefaultDrag() {

      };
      DefaultDrag.value = new DefaultDrag();
      return DefaultDrag;
  })();
  var NoDrag = (function () {
      function NoDrag() {

      };
      NoDrag.value = new NoDrag();
      return NoDrag;
  })();
  var CustomDrag = (function () {
      function CustomDrag(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CustomDrag.create = function (value0) {
          return function (value1) {
              return new CustomDrag(value0, value1);
          };
      };
      return CustomDrag;
  })();
  var Drag = (function () {
      function Drag(value0) {
          this.value0 = value0;
      };
      Drag.create = function (value0) {
          return new Drag(value0);
      };
      return Drag;
  })();
  var Zoom = (function () {
      function Zoom(value0) {
          this.value0 = value0;
      };
      Zoom.create = function (value0) {
          return new Zoom(value0);
      };
      return Zoom;
  })();
  var showOrderingAttribute = new Data_Show.Show(function (v) {
      if (v instanceof Order) {
          return "Order";
      };
      if (v instanceof Raise) {
          return "Raise";
      };
      if (v instanceof Lower) {
          return "Lower";
      };
      if (v instanceof Sort) {
          return "Sort";
      };
      throw new Error("Failed pattern match at D3.Selection (line 71, column 1 - line 75, column 25): " + [ v.constructor.name ]);
  });
  var showSelectionAttribute = new Data_Show.Show(function (v) {
      if (v instanceof AttrT) {
          return "chainable: attr " + D3_Attributes_Instances.attributeLabel(v.value0);
      };
      if (v instanceof TextT) {
          return "chainable: text";
      };
      if (v instanceof HTMLT) {
          return "chainable: html" + D3_Attributes_Instances.attributeLabel(v.value0);
      };
      if (v instanceof PropertyT) {
          return "chainable: property" + D3_Attributes_Instances.attributeLabel(v.value0);
      };
      if (v instanceof TransitionT) {
          return "chainable: transition";
      };
      if (v instanceof RemoveT) {
          return "chainable: remove";
      };
      if (v instanceof OnT) {
          return Data_Show.show(D3_Data_Types.showMouseEvent)(v.value0);
      };
      if (v instanceof OnT$prime) {
          return Data_Show.show(D3_Data_Types.showMouseEvent)(v.value0);
      };
      if (v instanceof OrderingT) {
          return "chainable: ordering" + Data_Show.show(showOrderingAttribute)(v.value0);
      };
      throw new Error("Failed pattern match at D3.Selection (line 55, column 1 - line 68, column 62): " + [ v.constructor.name ]);
  });
  var applySelectionAttributeD3 = function (selection_) {
      return function (v) {
          if (v instanceof AttrT) {
              return D3_FFI.d3SetAttr_(v.value0.value0)(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection_);
          };
          if (v instanceof TextT) {
              return D3_FFI.d3SetText_(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection_);
          };
          if (v instanceof PropertyT) {
              return D3_FFI.d3SetProperty_(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection_);
          };
          if (v instanceof HTMLT) {
              return D3_FFI.d3SetHTML_(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection_);
          };
          if (v instanceof RemoveT) {
              var removed_ = D3_FFI.d3RemoveSelection_(selection_);
              return removed_;
          };
          if (v instanceof TransitionT) {
              var tHandler = D3_FFI.d3AddTransition_(selection_)(v.value1);
              var v1 = Data_Array.foldl(applySelectionAttributeD3)(tHandler)(v.value0);
              return selection_;
          };
          if (v instanceof OnT) {
              return D3_FFI.selectionOn_(selection_)(Data_Show.show(D3_Data_Types.showMouseEvent)(v.value0))(v.value1);
          };
          if (v instanceof OnT$prime) {
              return D3_FFI.selectionOn_(selection_)(Data_Show.show(D3_Data_Types.showMouseEvent)(v.value0))(v.value1);
          };
          if (v instanceof OrderingT) {
              if (v.value0 instanceof Order) {
                  return D3_FFI.d3OrderSelection_(selection_);
              };
              if (v.value0 instanceof Sort) {
                  return D3_FFI.d3SortSelection_(selection_)(v.value0.value0);
              };
              if (v.value0 instanceof Raise) {
                  return D3_FFI.d3RaiseSelection_(selection_);
              };
              if (v.value0 instanceof Lower) {
                  return D3_FFI.d3LowerSelection_(selection_);
              };
              throw new Error("Failed pattern match at D3.Selection (line 108, column 3 - line 112, column 51): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at D3.Selection (line 78, column 1 - line 78, column 80): " + [ selection_.constructor.name, v.constructor.name ]);
      };
  };
  exports["DefaultDrag"] = DefaultDrag;
  exports["NoDrag"] = NoDrag;
  exports["CustomDrag"] = CustomDrag;
  exports["Drag"] = Drag;
  exports["Zoom"] = Zoom;
  exports["AttrT"] = AttrT;
  exports["TextT"] = TextT;
  exports["HTMLT"] = HTMLT;
  exports["PropertyT"] = PropertyT;
  exports["OrderingT"] = OrderingT;
  exports["TransitionT"] = TransitionT;
  exports["RemoveT"] = RemoveT;
  exports["OnT"] = OnT;
  exports["OnT'"] = OnT$prime;
  exports["applySelectionAttributeD3"] = applySelectionAttributeD3;
  exports["showSelectionAttribute"] = showSelectionAttribute;
  exports["showOrderingAttribute"] = showOrderingAttribute;
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn3 = function mkEffectFn3(fn) {
    return function(a, b, c) {
      return fn(a)(b)(c)();
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn3"] = $foreign.mkEffectFn3;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Attributes.Sugar"] = $PS["D3.Attributes.Sugar"] || {};
  var exports = $PS["D3.Attributes.Sugar"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Selection = $PS["D3.Selection"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Meet = (function () {
      function Meet() {

      };
      Meet.value = new Meet();
      return Meet;
  })();
  var Slice = (function () {
      function Slice() {

      };
      Slice.value = new Slice();
      return Slice;
  })();
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var YMin = (function () {
      function YMin() {

      };
      YMin.value = new YMin();
      return YMin;
  })();
  var YMid = (function () {
      function YMid() {

      };
      YMid.value = new YMid();
      return YMid;
  })();
  var YMax = (function () {
      function YMax() {

      };
      YMax.value = new YMax();
      return YMax;
  })();
  var XMin = (function () {
      function XMin() {

      };
      XMin.value = new XMin();
      return XMin;
  })();
  var XMid = (function () {
      function XMid() {

      };
      XMid.value = new XMid();
      return XMid;
  })();
  var XMax = (function () {
      function XMax() {

      };
      XMax.value = new XMax();
      return XMax;
  })();
  var AspectRatio = (function () {
      function AspectRatio(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      AspectRatio.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new AspectRatio(value0, value1, value2);
              };
          };
      };
      return AspectRatio;
  })();
  var showAspectRatioPreserve = new Data_Show.Show(function (v) {
      if (v instanceof Meet) {
          return "meet";
      };
      if (v instanceof Slice) {
          return "slice";
      };
      if (v instanceof None) {
          return "none";
      };
      throw new Error("Failed pattern match at D3.Attributes.Sugar (line 60, column 1 - line 63, column 22): " + [ v.constructor.name ]);
  });
  var showAlignAspectRatio_Y = new Data_Show.Show(function (v) {
      if (v instanceof YMin) {
          return "YMin";
      };
      if (v instanceof YMid) {
          return "YMid";
      };
      if (v instanceof YMax) {
          return "YMax";
      };
      throw new Error("Failed pattern match at D3.Attributes.Sugar (line 55, column 1 - line 58, column 21): " + [ v.constructor.name ]);
  });
  var showAlignAspectRatio_X = new Data_Show.Show(function (v) {
      if (v instanceof XMin) {
          return "xMin";
      };
      if (v instanceof XMid) {
          return "xMid";
      };
      if (v instanceof XMax) {
          return "xMax";
      };
      throw new Error("Failed pattern match at D3.Attributes.Sugar (line 50, column 1 - line 53, column 21): " + [ v.constructor.name ]);
  });
  var showAspectRatioSpec = new Data_Show.Show(function (v) {
      if (v.value2 instanceof None) {
          return "none";
      };
      return Data_Show.show(showAlignAspectRatio_X)(v.value0) + (Data_Show.show(showAlignAspectRatio_Y)(v.value1) + (" " + Data_Show.show(showAspectRatioPreserve)(v.value2)));
  });
  var y2 = function (dictToAttr) {
      var $60 = D3_Attributes_Instances.AttributeSetter.create("y2");
      var $61 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($62) {
          return D3_Selection.AttrT.create($60($61($62)));
      };
  };
  var y1 = function (dictToAttr) {
      var $63 = D3_Attributes_Instances.AttributeSetter.create("y1");
      var $64 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($65) {
          return D3_Selection.AttrT.create($63($64($65)));
      };
  };
  var y = function (dictToAttr) {
      var $66 = D3_Attributes_Instances.AttributeSetter.create("y");
      var $67 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($68) {
          return D3_Selection.AttrT.create($66($67($68)));
      };
  };
  var x2 = function (dictToAttr) {
      var $69 = D3_Attributes_Instances.AttributeSetter.create("x2");
      var $70 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($71) {
          return D3_Selection.AttrT.create($69($70($71)));
      };
  };
  var x1 = function (dictToAttr) {
      var $72 = D3_Attributes_Instances.AttributeSetter.create("x1");
      var $73 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($74) {
          return D3_Selection.AttrT.create($72($73($74)));
      };
  };
  var x = function (dictToAttr) {
      var $75 = D3_Attributes_Instances.AttributeSetter.create("x");
      var $76 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($77) {
          return D3_Selection.AttrT.create($75($76($77)));
      };
  };                                                                                                                                                                              
  var width = function (dictToAttr) {
      var $78 = D3_Attributes_Instances.AttributeSetter.create("width");
      var $79 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($80) {
          return D3_Selection.AttrT.create($78($79($80)));
      };
  };
  var viewBox = function (xo) {
      return function (yo) {
          return function (w) {
              return function (h) {
                  var vb = Data_Array.intercalate(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_Functor.functorArray)(Data_Show.show(Data_Show.showNumber))([ xo, yo, w, h ]));
                  return D3_Selection.AttrT.create(D3_Attributes_Instances.AttributeSetter.create("viewBox")(D3_Attributes_Instances.toAttr(D3_Attributes_Instances.toAttrString)(vb)));
              };
          };
      };
  };
  var transform$prime = (function () {
      var $81 = D3_Attributes_Instances.AttributeSetter.create("transform");
      return function ($82) {
          return D3_Selection.AttrT.create($81(D3_Attributes_Instances.StringAttr.create(D3_Attributes_Instances.Fn.create($82))));
      };
  })();
  var to = function (v) {
      return function (v1) {
          if (v instanceof D3_Selection.TransitionT && v.value0.length === 0) {
              return [ new D3_Selection.TransitionT(v1, v.value1) ];
          };
          if (v instanceof D3_Selection.TransitionT) {
              return [ new D3_Selection.TransitionT(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1), v.value1) ];
          };
          return Data_Array.cons(v)(v1);
      };
  };
  var textAnchor = function (dictToAttr) {
      var $83 = D3_Attributes_Instances.AttributeSetter.create("text-anchor");
      var $84 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($85) {
          return D3_Selection.AttrT.create($83($84($85)));
      };
  };
  var text = function (dictToAttr) {
      var $86 = D3_Attributes_Instances.AttributeSetter.create("text");
      var $87 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($88) {
          return D3_Selection.TextT.create($86($87($88)));
      };
  };
  var strokeWidth = function (dictToAttr) {
      var $89 = D3_Attributes_Instances.AttributeSetter.create("stroke-width");
      var $90 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($91) {
          return D3_Selection.AttrT.create($89($90($91)));
      };
  };
  var strokeOpacity = function (dictToAttr) {
      var $92 = D3_Attributes_Instances.AttributeSetter.create("stroke-opacity");
      var $93 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($94) {
          return D3_Selection.AttrT.create($92($93($94)));
      };
  };
  var strokeColor = function (dictToAttr) {
      var $95 = D3_Attributes_Instances.AttributeSetter.create("stroke");
      var $96 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($97) {
          return D3_Selection.AttrT.create($95($96($97)));
      };
  };
  var remove = D3_Selection.RemoveT.value;                         
  var radius = function (dictToAttr) {
      var $108 = D3_Attributes_Instances.AttributeSetter.create("r");
      var $109 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($110) {
          return D3_Selection.AttrT.create($108($109($110)));
      };
  };
  var preserveAspectRatio = (function () {
      var $111 = D3_Attributes_Instances.AttributeSetter.create("preserveAspectRatio");
      var $112 = D3_Attributes_Instances.toAttr(D3_Attributes_Instances.toAttrString);
      var $113 = Data_Show.show(showAspectRatioSpec);
      return function ($114) {
          return D3_Selection.AttrT.create($111($112($113($114))));
      };
  })();                                                            
  var opacity = function (dictToAttr) {
      var $121 = D3_Attributes_Instances.AttributeSetter.create("opacity");
      var $122 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($123) {
          return D3_Selection.AttrT.create($121($122($123)));
      };
  };
  var onMouseEventEffectful = function (event) {
      return function (listener) {
          return new D3_Selection["OnT'"](event, Effect_Uncurried.mkEffectFn3(listener));
      };
  };                                                                                                                                                                                
  var height = function (dictToAttr) {
      var $124 = D3_Attributes_Instances.AttributeSetter.create("height");
      var $125 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($126) {
          return D3_Selection.AttrT.create($124($125($126)));
      };
  };
  var fontSize = function (dictToAttr) {
      var $127 = D3_Attributes_Instances.AttributeSetter.create("font-size");
      var $128 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($129) {
          return D3_Selection.AttrT.create($127($128($129)));
      };
  };
  var fontFamily = function (dictToAttr) {
      var $130 = D3_Attributes_Instances.AttributeSetter.create("font-family");
      var $131 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($132) {
          return D3_Selection.AttrT.create($130($131($132)));
      };
  };
  var fill = function (dictToAttr) {
      var $133 = D3_Attributes_Instances.AttributeSetter.create("fill");
      var $134 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($135) {
          return D3_Selection.AttrT.create($133($134($135)));
      };
  };
  var dy = function (dictToAttr) {
      var $136 = D3_Attributes_Instances.AttributeSetter.create("dy");
      var $137 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($138) {
          return D3_Selection.AttrT.create($136($137($138)));
      };
  };
  var defaultTransition = {
      name: "",
      delay: 0.0,
      duration: 0.0,
      easing: D3_Data_Types.DefaultCubic.value
  };
  var transitionWithDuration = function (duration) {
      return new D3_Selection.TransitionT([  ], {
          name: defaultTransition.name,
          delay: defaultTransition.delay,
          duration: duration,
          easing: defaultTransition.easing
      });
  };
  var cy = function (dictToAttr) {
      var $142 = D3_Attributes_Instances.AttributeSetter.create("cy");
      var $143 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($144) {
          return D3_Selection.AttrT.create($142($143($144)));
      };
  };
  var cx = function (dictToAttr) {
      var $145 = D3_Attributes_Instances.AttributeSetter.create("cx");
      var $146 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($147) {
          return D3_Selection.AttrT.create($145($146($147)));
      };
  };
  var cursor = function (dictToAttr) {
      var $148 = D3_Attributes_Instances.AttributeSetter.create("cursor");
      var $149 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($150) {
          return D3_Selection.AttrT.create($148($149($150)));
      };
  };
  var classed = function (dictToAttr) {
      var $151 = D3_Attributes_Instances.AttributeSetter.create("class");
      var $152 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($153) {
          return D3_Selection.AttrT.create($151($152($153)));
      };
  };   
  var assembleTransforms = function (fs) {
      return function (d) {
          return Data_Array.intercalate(Data_Monoid.monoidString)(" ")(Data_Functor.flap(Data_Functor.functorArray)(fs)(d));
      };
  };
  var transform = function ($157) {
      return transform$prime(assembleTransforms($157));
  };
  var andThen = function (dictSemigroup) {
      return Data_Semigroup.append(dictSemigroup);
  };
  exports["strokeColor"] = strokeColor;
  exports["strokeOpacity"] = strokeOpacity;
  exports["opacity"] = opacity;
  exports["strokeWidth"] = strokeWidth;
  exports["fill"] = fill;
  exports["viewBox"] = viewBox;
  exports["preserveAspectRatio"] = preserveAspectRatio;
  exports["XMin"] = XMin;
  exports["XMid"] = XMid;
  exports["YMin"] = YMin;
  exports["YMid"] = YMid;
  exports["Meet"] = Meet;
  exports["AspectRatio"] = AspectRatio;
  exports["fontFamily"] = fontFamily;
  exports["textAnchor"] = textAnchor;
  exports["radius"] = radius;
  exports["fontSize"] = fontSize;
  exports["width"] = width;
  exports["height"] = height;
  exports["x"] = x;
  exports["y"] = y;
  exports["x1"] = x1;
  exports["y1"] = y1;
  exports["x2"] = x2;
  exports["y2"] = y2;
  exports["dy"] = dy;
  exports["cx"] = cx;
  exports["cy"] = cy;
  exports["text"] = text;
  exports["classed"] = classed;
  exports["cursor"] = cursor;
  exports["onMouseEventEffectful"] = onMouseEventEffectful;
  exports["transitionWithDuration"] = transitionWithDuration;
  exports["andThen"] = andThen;
  exports["to"] = to;
  exports["remove"] = remove;
  exports["transform'"] = transform$prime;
  exports["transform"] = transform;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Graph"] = $PS["Data.Graph"] || {};
  var exports = $PS["Data.Graph"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Graph = function (x) {
      return x;
  };
  var lookup = function (dictOrd) {
      return function (k) {
          return function (v) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Map_Internal.lookup(dictOrd)(k)(v));
          };
      };
  }; 
  var fromMap = Graph;
  exports["fromMap"] = fromMap;
  exports["lookup"] = lookup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Data.Graph"] = $PS["D3.Data.Graph"] || {};
  var exports = $PS["D3.Data.Graph"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Graph = $PS["Data.Graph"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var getReachableNodes = function (dictOrd) {
      return function (id) {
          return function (graph) {
              var processNextOpenDepPath = function (searchRecord) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.uncons(searchRecord.openDepPaths))(function (x) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(x.head))(function (firstID) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Graph.lookup(dictOrd)(firstID)(graph))(function (firstNode) {
                              var newDeps = Data_Array.partition(function (d) {
                                  return !Data_Array.elem(dictOrd.Eq0())(d)(searchRecord.nodes);
                              })(firstNode.links.targets);
                              var newOpenDepPaths = Data_Functor.mapFlipped(Data_Functor.functorArray)(newDeps.yes)(function (d) {
                                  return Data_Array.cons(d)(x.head);
                              });
                              var prunedLinks = Data_Functor.mapFlipped(Data_Functor.functorArray)(newDeps.no)(function (d) {
                                  return new Data_Tuple.Tuple(firstID, d);
                              });
                              var $5 = Data_Array["null"](newOpenDepPaths);
                              if ($5) {
                                  return Data_Maybe.Just.create({
                                      openDepPaths: x.tail,
                                      closedDepPaths: Data_Array.cons(x.head)(searchRecord.closedDepPaths),
                                      redundantLinks: Data_Semigroup.append(Data_Semigroup.semigroupArray)(searchRecord.redundantLinks)(prunedLinks),
                                      dependencyTree: searchRecord.dependencyTree,
                                      nodes: searchRecord.nodes
                                  });
                              };
                              return Data_Maybe.Just.create({
                                  openDepPaths: Data_Semigroup.append(Data_Semigroup.semigroupArray)(x.tail)(newOpenDepPaths),
                                  nodes: Data_Semigroup.append(Data_Semigroup.semigroupArray)(searchRecord.nodes)(newDeps.yes),
                                  redundantLinks: Data_Semigroup.append(Data_Semigroup.semigroupArray)(searchRecord.redundantLinks)(prunedLinks),
                                  closedDepPaths: searchRecord.closedDepPaths,
                                  dependencyTree: searchRecord.dependencyTree
                              });
                          });
                      });
                  });
              };
              var go = function ($copy_v) {
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v) {
                      if (v.openDepPaths.length === 0) {
                          $tco_done = true;
                          return v;
                      };
                      var v1 = processNextOpenDepPath(v);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return v;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $copy_v = v1.value0;
                          return;
                      };
                      throw new Error("Failed pattern match at D3.Data.Graph (line 26, column 7 - line 28, column 49): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($copy_v);
                  };
                  return $tco_result;
              };
              return go({
                  nodes: [  ],
                  openDepPaths: [ [ id ] ],
                  closedDepPaths: [  ],
                  redundantLinks: [  ],
                  dependencyTree: Data_Maybe.Nothing.value
              });
          };
      };
  };
  exports["getReachableNodes"] = getReachableNodes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Capabilities"] = $PS["D3Tagless.Capabilities"] || {};
  var exports = $PS["D3Tagless.Capabilities"];
  var SelectionM = function (Monad0, appendTo, attach, filterSelection, mergeSelections, on, openSelection, selectUnder, setAttributes, simpleJoin, updateJoin) {
      this.Monad0 = Monad0;
      this.appendTo = appendTo;
      this.attach = attach;
      this.filterSelection = filterSelection;
      this.mergeSelections = mergeSelections;
      this.on = on;
      this.openSelection = openSelection;
      this.selectUnder = selectUnder;
      this.setAttributes = setAttributes;
      this.simpleJoin = simpleJoin;
      this.updateJoin = updateJoin;
  };
  var SimulationM = function (Monad0, SelectionM1, actualizeForces, addTickFunction, mergeNewDataWithSim, removeTickFunction, setConfigVariable, setLinks, setLinksFromSelection, setNodes, setNodesFromSelection, simulationHandle, start, stop) {
      this.Monad0 = Monad0;
      this.SelectionM1 = SelectionM1;
      this.actualizeForces = actualizeForces;
      this.addTickFunction = addTickFunction;
      this.mergeNewDataWithSim = mergeNewDataWithSim;
      this.removeTickFunction = removeTickFunction;
      this.setConfigVariable = setConfigVariable;
      this.setLinks = setLinks;
      this.setLinksFromSelection = setLinksFromSelection;
      this.setNodes = setNodes;
      this.setNodesFromSelection = setNodesFromSelection;
      this.simulationHandle = simulationHandle;
      this.start = start;
      this.stop = stop;
  };
  var updateJoin = function (dict) {
      return dict.updateJoin;
  };
  var stop = function (dict) {
      return dict.stop;
  };
  var start = function (dict) {
      return dict.start;
  };
  var simulationHandle = function (dict) {
      return dict.simulationHandle;
  };
  var simpleJoin = function (dict) {
      return dict.simpleJoin;
  };
  var setNodesFromSelection = function (dict) {
      return dict.setNodesFromSelection;
  };
  var setNodes = function (dict) {
      return dict.setNodes;
  };
  var setLinksFromSelection = function (dict) {
      return dict.setLinksFromSelection;
  };
  var setLinks = function (dict) {
      return dict.setLinks;
  };
  var setConfigVariable = function (dict) {
      return dict.setConfigVariable;
  };
  var setAttributes = function (dict) {
      return dict.setAttributes;
  };
  var selectUnder = function (dict) {
      return dict.selectUnder;
  };
  var openSelection = function (dict) {
      return dict.openSelection;
  };
  var on = function (dict) {
      return dict.on;
  };
  var mergeSelections = function (dict) {
      return dict.mergeSelections;
  };
  var mergeNewDataWithSim = function (dict) {
      return dict.mergeNewDataWithSim;
  };
  var attach = function (dict) {
      return dict.attach;
  };
  var appendTo = function (dict) {
      return dict.appendTo;
  };
  var addTickFunction = function (dict) {
      return dict.addTickFunction;
  };
  var actualizeForces = function (dict) {
      return dict.actualizeForces;
  };
  exports["actualizeForces"] = actualizeForces;
  exports["addTickFunction"] = addTickFunction;
  exports["appendTo"] = appendTo;
  exports["attach"] = attach;
  exports["mergeNewDataWithSim"] = mergeNewDataWithSim;
  exports["mergeSelections"] = mergeSelections;
  exports["on"] = on;
  exports["openSelection"] = openSelection;
  exports["selectUnder"] = selectUnder;
  exports["setAttributes"] = setAttributes;
  exports["setConfigVariable"] = setConfigVariable;
  exports["setLinks"] = setLinks;
  exports["setLinksFromSelection"] = setLinksFromSelection;
  exports["setNodes"] = setNodes;
  exports["setNodesFromSelection"] = setNodesFromSelection;
  exports["simpleJoin"] = simpleJoin;
  exports["simulationHandle"] = simulationHandle;
  exports["start"] = start;
  exports["stop"] = stop;
  exports["updateJoin"] = updateJoin;
  exports["SelectionM"] = SelectionM;
  exports["SimulationM"] = SimulationM;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOfStartingAt = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                           
  var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["charAt"] = charAt;
  exports["indexOf'"] = indexOf$prime;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  "use strict";
  $PS["D3.Examples.GUP"] = $PS["D3.Examples.GUP"] || {};
  var exports = $PS["D3.Examples.GUP"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var keyFunction = Unsafe_Coerce.unsafeCoerce;
  var indexIsNumber = Unsafe_Coerce.unsafeCoerce;

  // in the interests of brevity these unsafe functions are defined here with the "script"
  // however, in a larger program both Model and Unsafe would be their own modules
  var datumIsChar = Unsafe_Coerce.unsafeCoerce;
  var exGeneralUpdatePattern = function (dictSelectionM) {
      return function (selector) {
          var xFromIndex = function (v) {
              return function (i) {
                  return 50.0 + indexIsNumber(i) * 48.0;
              };
          };
          var transition = D3_Attributes_Sugar.transitionWithDuration(2000.0);
          var update = D3_Attributes_Sugar.andThen(Data_Semigroup.semigroupArray)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("update"), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("gray"), D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumber)(200.0) ])(D3_Attributes_Sugar.to(transition)([ D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumberFnI)(xFromIndex) ]));
          var exit = D3_Attributes_Sugar.andThen(Data_Semigroup.semigroupArray)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("exit"), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("brown") ])(D3_Attributes_Sugar.to(transition)([ D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumber)(400.0), D3_Attributes_Sugar.remove ]));
          var enter = D3_Attributes_Sugar.andThen(Data_Semigroup.semigroupArray)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("enter"), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("green"), D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumberFnI)(xFromIndex), D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Attributes_Sugar.text(D3_Attributes_Instances.toAttrStringFn)(function ($2) {
              return Data_String_CodeUnits.singleton(datumIsChar($2));
          }), D3_Attributes_Sugar.fontSize(D3_Attributes_Instances.toAttrNumber)(96.0) ])(D3_Attributes_Sugar.to(transition)([ D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumber)(200.0) ]));
          return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.attach(dictSelectionM)(selector))(function (root) {
              return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.appendTo(dictSelectionM)(root)(D3_Data_Types.Svg.value)([ D3_Attributes_Sugar.viewBox(0.0)(0.0)(650.0)(650.0), D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("d3svg gup") ]))(function (svg) {
                  return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.appendTo(dictSelectionM)(svg)(D3_Data_Types.Group.value)([  ]))(function (letterGroup) {
                      return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(function (letters) {
                          return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.openSelection(dictSelectionM)(letterGroup)("text"))(function (enterSelection) {
                              return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.updateJoin(dictSelectionM)(enterSelection)(D3_Data_Types.Text.value)(letters)(keyFunction))(function (updateSelections) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.setAttributes(dictSelectionM)(updateSelections.exit)(exit))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.setAttributes(dictSelectionM)(updateSelections.update)(update))(function () {
                                          return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.appendTo(dictSelectionM)(updateSelections.enter)(D3_Data_Types.Text.value)([  ]))(function (newlyEntered) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.setAttributes(dictSelectionM)(newlyEntered)(enter))(function () {
                                                  return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(newlyEntered);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  exports["exGeneralUpdatePattern"] = exGeneralUpdatePattern;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.LesMis.Unsafe"] = $PS["D3.Examples.LesMis.Unsafe"] || {};
  var exports = $PS["D3.Examples.LesMis.Unsafe"];
  var unboxD3SimNode = function (datum) {
      return datum;
  };
  var unboxD3SimLink = function (datum) {
      return datum;
  };
  exports["unboxD3SimNode"] = unboxD3SimNode;
  exports["unboxD3SimLink"] = unboxD3SimLink;
})(PS);
(function(exports) {
  // REVIEW big TODO here is to expose the domain setting of the scales so that this is usable in multiple contexts

  const d3SchemeCategory10 = d3.scaleOrdinal(d3.schemeCategory10)
  exports.d3SchemeCategory10N_ = number => d3SchemeCategory10(number)

  const d3SchemePaired = d3.scaleOrdinal(d3.schemePaired)
  exports.d3SchemePairedN_ = number => d3SchemePaired(number)

  const d3SchemeDiverging10 = d3.scaleDiverging(d3.interpolateBrBG)
                                .domain([0,250,500]);                  

  const d3SchemeSequential10 = d3.scaleSequential()
                                 .interpolator(d3.interpolateYlOrRd)
                                 .domain([0,5,10]); // TODO this should be determined by number of nodes in sim
  exports.d3SchemeSequential10N_ = number => d3SchemeSequential10(number)
})(PS["D3.Scales"] = PS["D3.Scales"] || {});
(function($PS) {
  "use strict";
  $PS["D3.Scales"] = $PS["D3.Scales"] || {};
  var exports = $PS["D3.Scales"];
  var $foreign = $PS["D3.Scales"];
  exports["d3SchemeCategory10N_"] = $foreign.d3SchemeCategory10N_;
  exports["d3SchemeSequential10N_"] = $foreign.d3SchemeSequential10N_;
  exports["d3SchemePairedN_"] = $foreign.d3SchemePairedN_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap()(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  var use = function (dictMonadState) {
      return function (p) {
          return Control_Monad_State_Class.gets(dictMonadState)(function (v) {
              return viewOn(v)(p);
          });
      };
  };
  exports["view"] = view;
  exports["use"] = use;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["right"] = right;
  exports["Choice"] = Choice;
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  var fanout = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                      return new Data_Tuple.Tuple(a, a);
                  })(Control_Category.identity(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
              };
          };
      };
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["Strong"] = Strong;
  exports["fanout"] = fanout;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Either = $PS["Data.Either"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($24) {
                  return v1(f($24));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($25) {
          return v(Data_Tuple.fst($25));
      };
  }, function (v) {
      return function ($26) {
          return v(Data_Tuple.snd($26));
      };
  });
  var choiceForget = function (dictMonoid) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorForget;
      }, function (v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
      }, function (v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
      });
  };
  exports["Forget"] = Forget;
  exports["choiceForget"] = choiceForget;
  exports["strongForget"] = strongForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Iso.Newtype"] = $PS["Data.Lens.Iso.Newtype"] || {};
  var exports = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var _Newtype = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (dictProfunctor) {
              return Data_Lens_Iso.iso(Data_Newtype.unwrap())(Data_Newtype.wrap())(dictProfunctor);
          };
      };
  };
  exports["_Newtype"] = _Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var set = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Record"] = $PS["Data.Lens.Record"] || {};
  var exports = $PS["Data.Lens.Record"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Record = $PS["Record"];                
  var prop = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (dictStrong) {
                      return Data_Lens_Lens.lens(Record.get(dictIsSymbol)()(l))(Data_Function.flip(Record.set(dictIsSymbol)()()(l)))(dictStrong);
                  };
              };
          };
      };
  };
  exports["prop"] = prop;
})(PS);
(function(exports) {
  "use strict";

  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = (function() {
    try {
      return req === undefined ? undefined : req("util");
    } catch(e) {
      return undefined;
    }
  })();

  exports._trace = function (x, k) {
    // node only recurses two levels into an object before printing
    // "[object]" for further objects when using console.log()
    if (util !== undefined) {
      console.log(util.inspect(x, { depth: null, colors: true }));
    } else {
      console.log(x);
    }
    return k({});
  };

  exports._spy = function (tag, x) {
    if (util !== undefined) {
      console.log(tag + ":", util.inspect(x, { depth: null, colors: true }));
    } else {
      console.log(tag + ":", x);
    }
    return x;
  };
})(PS["Debug"] = PS["Debug"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Debug"] = $PS["Debug"] || {};
  var exports = $PS["Debug"];
  var $foreign = $PS["Debug"];
  var trace = function (dictDebugWarning) {
      return function (a) {
          return function (k) {
              return $foreign["_trace"](a, k);
          };
      };
  };
  var spy = function (dictDebugWarning) {
      return function (tag) {
          return function (a) {
              return $foreign["_spy"](tag, a);
          };
      };
  };
  exports["trace"] = trace;
  exports["spy"] = spy;
})(PS);
(function($PS) {
  "use strict";
  $PS["D3.Simulation.Types"] = $PS["D3.Simulation.Types"] || {};
  var exports = $PS["D3.Simulation.Types"];
  var D3_FFI = $PS["D3.FFI"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Debug = $PS["Debug"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Step = (function () {
      function Step(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Step.create = function (value0) {
          return function (value1) {
              return new Step(value0, value1);
          };
      };
      return Step;
  })();
  var StepTransformFFI = (function () {
      function StepTransformFFI(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StepTransformFFI.create = function (value0) {
          return function (value1) {
              return new StepTransformFFI(value0, value1);
          };
      };
      return StepTransformFFI;
  })();
  var Alpha = (function () {
      function Alpha(value0) {
          this.value0 = value0;
      };
      Alpha.create = function (value0) {
          return new Alpha(value0);
      };
      return Alpha;
  })();
  var AlphaTarget = (function () {
      function AlphaTarget(value0) {
          this.value0 = value0;
      };
      AlphaTarget.create = function (value0) {
          return new AlphaTarget(value0);
      };
      return AlphaTarget;
  })();
  var AlphaMin = (function () {
      function AlphaMin(value0) {
          this.value0 = value0;
      };
      AlphaMin.create = function (value0) {
          return new AlphaMin(value0);
      };
      return AlphaMin;
  })();
  var AlphaDecay = (function () {
      function AlphaDecay(value0) {
          this.value0 = value0;
      };
      AlphaDecay.create = function (value0) {
          return new AlphaDecay(value0);
      };
      return AlphaDecay;
  })();
  var VelocityDecay = (function () {
      function VelocityDecay(value0) {
          this.value0 = value0;
      };
      VelocityDecay.create = function (value0) {
          return new VelocityDecay(value0);
      };
      return VelocityDecay;
  })();
  var ForceManyBody = (function () {
      function ForceManyBody() {

      };
      ForceManyBody.value = new ForceManyBody();
      return ForceManyBody;
  })();
  var ForceCenter = (function () {
      function ForceCenter() {

      };
      ForceCenter.value = new ForceCenter();
      return ForceCenter;
  })();
  var ForceCollide = (function () {
      function ForceCollide() {

      };
      ForceCollide.value = new ForceCollide();
      return ForceCollide;
  })();
  var ForceX = (function () {
      function ForceX() {

      };
      ForceX.value = new ForceX();
      return ForceX;
  })();
  var ForceY = (function () {
      function ForceY() {

      };
      ForceY.value = new ForceY();
      return ForceY;
  })();
  var ForceRadial = (function () {
      function ForceRadial() {

      };
      ForceRadial.value = new ForceRadial();
      return ForceRadial;
  })();

  // TODO we won't export Force constructor here when we close exports
  var RegularForce = (function () {
      function RegularForce(value0) {
          this.value0 = value0;
      };
      RegularForce.create = function (value0) {
          return new RegularForce(value0);
      };
      return RegularForce;
  })();

  // TODO we won't export Force constructor here when we close exports
  var LinkForce = (function () {
      function LinkForce() {

      };
      LinkForce.value = new LinkForce();
      return LinkForce;
  })();
  var ForceActive = (function () {
      function ForceActive() {

      };
      ForceActive.value = new ForceActive();
      return ForceActive;
  })();
  var ForceDisabled = (function () {
      function ForceDisabled() {

      };
      ForceDisabled.value = new ForceDisabled();
      return ForceDisabled;
  })();

  // this filter data type will handle both links and nodes, both considered as opaque type Datum_ and needing coercion
  var ForceFilter = (function () {
      function ForceFilter(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForceFilter.create = function (value0) {
          return function (value1) {
              return new ForceFilter(value0, value1);
          };
      };
      return ForceFilter;
  })();

  // not sure if there needs to be a separate type for force attributes, maybe not, but we'll start assuming so
  var ForceT = function (x) {
      return x;
  };
  var showRegularForceType = new Data_Show.Show(function (v) {
      if (v instanceof ForceManyBody) {
          return "ForceManyBody";
      };
      if (v instanceof ForceCenter) {
          return "ForceCenter";
      };
      if (v instanceof ForceCollide) {
          return "ForceCollide";
      };
      if (v instanceof ForceX) {
          return "ForceX";
      };
      if (v instanceof ForceY) {
          return "ForceY";
      };
      if (v instanceof ForceRadial) {
          return "ForceRadial";
      };
      throw new Error("Failed pattern match at D3.Simulation.Types (line 221, column 1 - line 227, column 46): " + [ v.constructor.name ]);
  });
  var toggleForceStatus = function (v) {
      if (v instanceof ForceActive) {
          return ForceDisabled.value;
      };
      if (v instanceof ForceDisabled) {
          return ForceActive.value;
      };
      throw new Error("Failed pattern match at D3.Simulation.Types (line 185, column 1 - line 185, column 48): " + [ v.constructor.name ]);
  }; 
  var showForceStatus = new Data_Show.Show(function (v) {
      if (v instanceof ForceActive) {
          return "active";
      };
      if (v instanceof ForceDisabled) {
          return "inactive";
      };
      throw new Error("Failed pattern match at D3.Simulation.Types (line 181, column 1 - line 183, column 34): " + [ v.constructor.name ]);
  });
  var showMaybeForceStatus = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return "";
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Show.show(showForceStatus)(v.value0);
      };
      throw new Error("Failed pattern match at D3.Simulation.Types (line 178, column 1 - line 178, column 52): " + [ v.constructor.name ]);
  }; 
  var showForceFilter = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return " (no filter)";
      };
      throw new Error("Failed pattern match at D3.Simulation.Types (line 203, column 1 - line 203, column 47): " + [ v.constructor.name ]);
  };

  // | given a list of forces to enable, ensure that those forces are enabled and all others disabled, no forces removed
  // | (if you give a label that is not in the library it will have no effect when actualizing the force library from the status map)
  var onlyTheseForcesActive = function (dictFoldable) {
      return function (dictFunctor) {
          return function (labels) {
              var updatedMap = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(dictFoldable)(Data_Functor.map(dictFunctor)(function (l) {
                  return new Data_Tuple.Tuple(l, ForceActive.value);
              })(labels));
              return function (statusMap) {
                  return Data_Map_Internal.union(Data_Ord.ordString)(updatedMap)(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Function["const"](ForceDisabled.value))(statusMap));
              };
          };
      };
  };
  var eqForceStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ForceActive && y instanceof ForceActive) {
              return true;
          };
          if (x instanceof ForceDisabled && y instanceof ForceDisabled) {
              return true;
          };
          return false;
      };
  });
  var defaultConfigSimulation = {
      alpha: 1.0,
      alphaTarget: 0.0,
      alphaMin: 1.0e-3,
      alphaDecay: 2.28e-2,
      velocityDecay: 0.4
  };

  // unused parameter is to ensure a NEW simulation is created so that, 
  // for example, two Halogen components won't _accidentally_ share one
  // should be dropped later when we can be sure that isn't a problem
  // needs POC with two sims in one page, sim continuing despite page change etc etc
  var initialSimulationState = function (forces) {
      var v = Debug.trace()({
          simulation: "initialized",
          forceLibrary: forces
      })(function (v1) {
          return Data_Unit.unit;
      });
      return {
          handle_: D3_FFI.initSimulation_(defaultConfigSimulation)(D3_FFI.keyIsID_),
          data: {
              nodes: [  ],
              links: [  ]
          },
          key: D3_FFI.keyIsID_,
          forceLibrary: forces,
          ticks: Data_Map_Internal.empty,
          alpha: defaultConfigSimulation.alpha,
          alphaTarget: defaultConfigSimulation.alphaTarget,
          alphaMin: defaultConfigSimulation.alphaMin,
          alphaDecay: defaultConfigSimulation.alphaDecay,
          velocityDecay: defaultConfigSimulation.velocityDecay
      };
  };
  var allNodes = Data_Maybe.Nothing.value;
  var _velocityDecay = function (dictStrong) {
      var $86 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $87 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "velocityDecay";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($88) {
          return $86($87($88));
      };
  };
  var _status = function (dictStrong) {
      var $99 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $100 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "status";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($101) {
          return $99($100($101));
      };
  };
  var _name = function (dictStrong) {
      var $102 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $103 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "name";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($104) {
          return $102($103($104));
      };
  };
  var getStatusMap = function (forceMap) {
      return Debug.spy()("getStatusMap: ")(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Map_Internal.foldableMap)(Data_Functor.map(Data_Map_Internal.functorMap)(function (f) {
          return new Data_Tuple.Tuple(Data_Lens_Getter.view(_name(Data_Lens_Internal_Forget.strongForget))(f), Data_Lens_Getter.view(_status(Data_Lens_Internal_Forget.strongForget))(f));
      })(forceMap)));
  };

  // | anything that wants to use a simulation will need a row that matches this in its State
  var _d3Simulation = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "simulation";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _forceLibrary = function (dictStrong) {
      var $128 = _d3Simulation(dictStrong);
      var $129 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $130 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "forceLibrary";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($131) {
          return $128($129($130($131)));
      };
  };
  var _handle = function (dictStrong) {
      var $135 = _d3Simulation(dictStrong);
      var $136 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $137 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "handle_";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($138) {
          return $135($136($137($138)));
      };
  };
  var _alphaTarget = function (dictStrong) {
      var $142 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $143 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "alphaTarget";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($144) {
          return $142($143($144));
      };
  };
  var _alphaMin = function (dictStrong) {
      var $145 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $146 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "alphaMin";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($147) {
          return $145($146($147));
      };
  };
  var _alphaDecay = function (dictStrong) {
      var $148 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $149 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "alphaDecay";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($150) {
          return $148($149($150));
      };
  };
  var _alpha = function (dictStrong) {
      var $151 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $152 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "alpha";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($153) {
          return $151($152($153));
      };
  };
  exports["_d3Simulation"] = _d3Simulation;
  exports["_handle"] = _handle;
  exports["_forceLibrary"] = _forceLibrary;
  exports["onlyTheseForcesActive"] = onlyTheseForcesActive;
  exports["_alpha"] = _alpha;
  exports["_alphaTarget"] = _alphaTarget;
  exports["_alphaMin"] = _alphaMin;
  exports["_alphaDecay"] = _alphaDecay;
  exports["_velocityDecay"] = _velocityDecay;
  exports["Alpha"] = Alpha;
  exports["AlphaTarget"] = AlphaTarget;
  exports["AlphaMin"] = AlphaMin;
  exports["AlphaDecay"] = AlphaDecay;
  exports["VelocityDecay"] = VelocityDecay;
  exports["Step"] = Step;
  exports["StepTransformFFI"] = StepTransformFFI;
  exports["RegularForce"] = RegularForce;
  exports["LinkForce"] = LinkForce;
  exports["_name"] = _name;
  exports["_status"] = _status;
  exports["getStatusMap"] = getStatusMap;
  exports["ForceT"] = ForceT;
  exports["ForceActive"] = ForceActive;
  exports["ForceDisabled"] = ForceDisabled;
  exports["showMaybeForceStatus"] = showMaybeForceStatus;
  exports["toggleForceStatus"] = toggleForceStatus;
  exports["allNodes"] = allNodes;
  exports["ForceFilter"] = ForceFilter;
  exports["showForceFilter"] = showForceFilter;
  exports["ForceManyBody"] = ForceManyBody;
  exports["ForceCenter"] = ForceCenter;
  exports["ForceCollide"] = ForceCollide;
  exports["ForceX"] = ForceX;
  exports["ForceY"] = ForceY;
  exports["ForceRadial"] = ForceRadial;
  exports["initialSimulationState"] = initialSimulationState;
  exports["eqForceStatus"] = eqForceStatus;
  exports["showRegularForceType"] = showRegularForceType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Zoom"] = $PS["D3.Zoom"] || {};
  var exports = $PS["D3.Zoom"];
  var DefaultZoomExtent = (function () {
      function DefaultZoomExtent() {

      };
      DefaultZoomExtent.value = new DefaultZoomExtent();
      return DefaultZoomExtent;
  })();
  var ZoomExtent = (function () {
      function ZoomExtent(value0) {
          this.value0 = value0;
      };
      ZoomExtent.create = function (value0) {
          return new ZoomExtent(value0);
      };
      return ZoomExtent;
  })();
  var ScaleExtent = (function () {
      function ScaleExtent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ScaleExtent.create = function (value0) {
          return function (value1) {
              return new ScaleExtent(value0, value1);
          };
      };
      return ScaleExtent;
  })();
  exports["ScaleExtent"] = ScaleExtent;
  exports["DefaultZoomExtent"] = DefaultZoomExtent;
  exports["ZoomExtent"] = ZoomExtent;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["infinity"] = $foreign.infinity;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  } 

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };                         

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["ceil"] = $foreign.ceil;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["remainder"] = $foreign.remainder;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["fromString"] = fromString;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];                              
  var toArray = function (v) {
      return v;
  };
  var adaptMaybe = function (f) {
      var $75 = Data_Maybe.fromJust();
      return function ($76) {
          return $75(f(toArray($76)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  exports["toArray"] = toArray;
  exports["head"] = head;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Functor = $PS["Data.Functor"];                                         
  var functorNonEmptyArray = Data_Functor.functorArray;
  exports["functorNonEmptyArray"] = functorNonEmptyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["document"] = $foreign.document;
  exports["innerWidth"] = $foreign.innerWidth;
  exports["innerHeight"] = $foreign.innerHeight;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Utility"] = $PS["Utility"] || {};
  var exports = $PS["Utility"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var getWindowWidthHeight = function __do() {
      var win = Web_HTML.window();
      var w = Web_HTML_Window.innerWidth(win)();
      var h = Web_HTML_Window.innerHeight(win)();
      return new Data_Tuple.Tuple(Data_Int.toNumber(w), Data_Int.toNumber(h));
  };
  var equalSnd = function (dictEq) {
      return function (a) {
          return function (b) {
              return Data_Eq.eq(dictEq)(Data_Tuple.snd(a))(Data_Tuple.snd(b));
          };
      };
  };
  var compareSnd = function (dictOrd) {
      return function (a) {
          return function (b) {
              return Data_Ord.compare(dictOrd)(Data_Tuple.snd(a))(Data_Tuple.snd(b));
          };
      };
  };
  var chunk = function (tuples) {
      var $$package = Data_Tuple.snd(Data_Array_NonEmpty.head(tuples));
      var contains = Data_Array_NonEmpty.toArray(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(Data_Tuple.fst)(tuples));
      return new Data_Tuple.Tuple($$package, contains);
  };
  exports["getWindowWidthHeight"] = getWindowWidthHeight;
  exports["compareSnd"] = compareSnd;
  exports["equalSnd"] = equalSnd;
  exports["chunk"] = chunk;
})(PS);
(function($PS) {
  "use strict";
  $PS["D3.Examples.LesMiserables"] = $PS["D3.Examples.LesMiserables"] || {};
  var exports = $PS["D3.Examples.LesMiserables"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Examples_LesMis_Unsafe = $PS["D3.Examples.LesMis.Unsafe"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Scales = $PS["D3.Scales"];
  var D3_Selection = $PS["D3.Selection"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var D3_Zoom = $PS["D3.Zoom"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var $$Math = $PS["Math"];
  var Utility = $PS["Utility"];                

  // type-safe(ish) accessors for the data that is given to D3
  // we lose the type information in callbacks from the FFI, such as for attributes
  // but since we know what we gave we can coerce it back to the initial type.
  // Snippet_Start
  // Name: LesMisAccessors
  var link_ = {
      source: function ($23) {
          return (function (v) {
              return v.source;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimLink($23));
      },
      target: function ($24) {
          return (function (v) {
              return v.target;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimLink($24));
      },
      value: function ($25) {
          return (function (v) {
              return v.value;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimLink($25));
      },
      color: function ($26) {
          return D3_Scales.d3SchemeCategory10N_(Data_Int.toNumber((function (v) {
              return v.target.group;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimLink($26))));
      }
  };
  var datum_ = {
      id: function ($27) {
          return (function (v) {
              return v.id;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimNode($27));
      },
      x: function ($28) {
          return (function (v) {
              return v.x;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimNode($28));
      },
      y: function ($29) {
          return (function (v) {
              return v.y;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimNode($29));
      },
      group: function ($30) {
          return (function (v) {
              return v.group;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimNode($30));
      },
      colorByGroup: function ($31) {
          return D3_Scales.d3SchemeCategory10N_(Data_Int.toNumber((function (v) {
              return v.group;
          })(D3_Examples_LesMis_Unsafe.unboxD3SimNode($31))));
      }
  };

  // Snippet_End
  // Snippet_Start
  // Name: LesMisScript
  // | recipe for this force layout graph
  var draw = function (dictBind) {
      return function (dictMonadEffect) {
          return function (dictMonadState) {
              return function (dictSimulationM) {
                  return function (model) {
                      return function (selector) {
                          return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadEffect)(Utility.getWindowWidthHeight))(function (v) {
                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.attach(dictSimulationM.SelectionM1())(selector))(function (v1) {
                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSimulationM.SelectionM1())(v1)(D3_Data_Types.Svg.value)([ D3_Attributes_Sugar.viewBox(-v.value0 / 2.0)(-v.value1 / 2.0)(v.value0)(v.value1), D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("lesmis") ]))(function (svg) {
                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSimulationM.SelectionM1())(svg)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("link"), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrString)("#999"), D3_Attributes_Sugar.strokeOpacity(D3_Attributes_Instances.toAttrNumber)(0.6) ]))(function (linksGroup) {
                                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSimulationM.SelectionM1())(svg)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("node"), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrString)("#fff"), D3_Attributes_Sugar.strokeOpacity(D3_Attributes_Instances.toAttrNumber)(1.5) ]))(function (nodesGroup) {
                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.setNodes(dictSimulationM)(model.nodes))(function (nodesInSim) {
                                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.setLinks(dictSimulationM)(Data_Eq.eqString)(model.links)(model.nodes)(D3_FFI.keyIsID_))(function (linksInSim) {
                                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.simpleJoin(dictSimulationM.SelectionM1())(nodesGroup)(D3_Data_Types.Circle.value)(nodesInSim)(D3_FFI.keyIsID_))(function (nodesSelection) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSimulationM.SelectionM1())(nodesSelection)([ D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumber)(5.0), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrStringFn)(datum_.colorByGroup) ]))(function () {
                                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.simpleJoin(dictSimulationM.SelectionM1())(linksGroup)(D3_Data_Types.Line.value)(linksInSim)(D3_FFI.keyIsID_))(function (linksSelection) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSimulationM.SelectionM1())(linksSelection)([ D3_Attributes_Sugar.strokeWidth(D3_Attributes_Instances.toAttrNumberFn)(function ($32) {
                                                                      return $$Math.sqrt(link_.value($32));
                                                                  }), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrStringFn)(link_.color) ]))(function () {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.addTickFunction(dictSimulationM)("nodes")(new D3_Simulation_Types.Step(nodesSelection, [ D3_Attributes_Sugar.cx(D3_Attributes_Instances.toAttrNumberFn)(datum_.x), D3_Attributes_Sugar.cy(D3_Attributes_Instances.toAttrNumberFn)(datum_.y) ])))(function () {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.addTickFunction(dictSimulationM)("links")(new D3_Simulation_Types.Step(linksSelection, [ D3_Attributes_Sugar.x1(D3_Attributes_Instances.toAttrNumberFn)(function ($33) {
                                                                              return (function (v2) {
                                                                                  return v2.x;
                                                                              })(link_.source($33));
                                                                          }), D3_Attributes_Sugar.y1(D3_Attributes_Instances.toAttrNumberFn)(function ($34) {
                                                                              return (function (v2) {
                                                                                  return v2.y;
                                                                              })(link_.source($34));
                                                                          }), D3_Attributes_Sugar.x2(D3_Attributes_Instances.toAttrNumberFn)(function ($35) {
                                                                              return (function (v2) {
                                                                                  return v2.x;
                                                                              })(link_.target($35));
                                                                          }), D3_Attributes_Sugar.y2(D3_Attributes_Instances.toAttrNumberFn)(function ($36) {
                                                                              return (function (v2) {
                                                                                  return v2.y;
                                                                              })(link_.target($36));
                                                                          }) ])))(function () {
                                                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.on(dictSimulationM.SelectionM1())(nodesSelection)(new D3_Selection.Drag(new D3_Selection.CustomDrag("lesmis", D3_FFI.simdrag))))(function () {
                                                                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.on(dictSimulationM.SelectionM1())(svg)(new D3_Selection.Zoom({
                                                                                      extent: new D3_Zoom.ZoomExtent({
                                                                                          top: 0.0,
                                                                                          left: 0.0,
                                                                                          bottom: v.value1,
                                                                                          right: v.value0
                                                                                      }),
                                                                                      scale: new D3_Zoom.ScaleExtent(1.0, 4.0),
                                                                                      name: "LesMis",
                                                                                      target: svg
                                                                                  })))(function () {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setConfigVariable(dictSimulationM)(new D3_Simulation_Types.Alpha(1.0)))(function () {
                                                                                          return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  exports["draw"] = draw;
})(PS);
(function(exports) {
  "use strict"

  exports.readJSONJS_ = filecontents => decodeFile(filecontents)

  const decodeFile = function (filecontents) {
    const json = JSON.parse(filecontents)
    const links = json.links.map(d => Object.create(d))
    // const nodes = json.nodes.map(d => Object.create({data: d}))
    // return { links: links, nodes: nodes }
    return { links: links, nodes: json.nodes }
  }
})(PS["D3.Examples.LesMiserables.File"] = PS["D3.Examples.LesMiserables.File"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.LesMiserables.File"] = $PS["D3.Examples.LesMiserables.File"] || {};
  var exports = $PS["D3.Examples.LesMiserables.File"];
  var $foreign = $PS["D3.Examples.LesMiserables.File"];
  var Data_Either = $PS["Data.Either"];                
  var readGraphFromFileContents = function (v) {
      if (v instanceof Data_Either.Right) {
          return $foreign.readJSONJS_(v.value0.body);
      };
      if (v instanceof Data_Either.Left) {
          return {
              links: [  ],
              nodes: [  ]
          };
      };
      throw new Error("Failed pattern match at D3.Examples.LesMiserables.File (line 10, column 1 - line 10, column 92): " + [ v.constructor.name ]);
  };
  exports["readGraphFromFileContents"] = readGraphFromFileContents;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.MetaTree.Unsafe"] = $PS["D3.Examples.MetaTree.Unsafe"] || {};
  var exports = $PS["D3.Examples.MetaTree.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unboxD3TreeNode = function (v) {
      return v;
  };
  var coerceToTreeNode = Unsafe_Coerce.unsafeCoerce;
  exports["unboxD3TreeNode"] = unboxD3TreeNode;
  exports["coerceToTreeNode"] = coerceToTreeNode;
})(PS);
(function(exports) {
  // foreign import readJSONJS               :: String -> TreeJson -- TODO no error handling at all here RN
  exports.readJSON_ = filecontents => JSON.parse(filecontents)
})(PS["D3.Layouts.Hierarchical"] = PS["D3.Layouts.Hierarchical"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Layouts.Hierarchical"] = $PS["D3.Layouts.Hierarchical"] || {};
  var exports = $PS["D3.Layouts.Hierarchical"];
  var $foreign = $PS["D3.Layouts.Hierarchical"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Selection = $PS["D3.Selection"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var verticalLink = D3_Selection.AttrT.create(D3_Attributes_Instances.AttributeSetter.create("d")(D3_Attributes_Instances.toAttr(D3_Attributes_Instances.toAttrStringFn)(D3_FFI.linkVertical_)));
  var verticalClusterLink = function (xOffset) {
      return D3_Selection.AttrT.create(D3_Attributes_Instances.AttributeSetter.create("d")(D3_Attributes_Instances.toAttr(D3_Attributes_Instances.toAttrStringFn)(D3_FFI.linkClusterVertical_(xOffset))));
  };
  var radialSeparation = function (a, b) {
      var $3 = D3_FFI.sharesParent_(a)(b);
      if ($3) {
          return 1.0;
      };
      return 2.0 / D3_FFI.hNodeDepth_(a);
  };
  var radialLink = function (angleFn) {
      return function (radius_Fn) {
          var radialFn = D3_FFI.linkRadial_(angleFn)(radius_Fn);
          return D3_Selection.AttrT.create(D3_Attributes_Instances.AttributeSetter.create("d")(D3_Attributes_Instances.toAttr(D3_Attributes_Instances.toAttrStringFn)(radialFn)));
      };
  };
  var makeModel = function (dictBind) {
      return function (dictMonadEffect) {
          return function (treeType) {
              return function (treeLayout) {
                  return function (json) {
                      var treeLayoutFn = D3_FFI.getLayout(treeType);
                      var svgConfig = {
                          width: 650.0,
                          height: 650.0
                      };
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                          json: json,
                          treeType: treeType,
                          treeLayout: treeLayout,
                          treeLayoutFn: treeLayoutFn,
                          svgConfig: svgConfig
                      });
                  };
              };
          };
      };
  };                                                                                                                                                                                                         
  var horizontalLink = D3_Selection.AttrT.create(D3_Attributes_Instances.AttributeSetter.create("d")(D3_Attributes_Instances.toAttr(D3_Attributes_Instances.toAttrStringFn)(D3_FFI.linkHorizontal_)));
  var horizontalClusterLink = function (yOffset) {
      return D3_Selection.AttrT.create(D3_Attributes_Instances.AttributeSetter.create("d")(D3_Attributes_Instances.toAttr(D3_Attributes_Instances.toAttrStringFn)(D3_FFI.linkClusterHorizontal_(yOffset))));
  };
  var getTreeViaAJAX = function (url) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.get(Affjax_ResponseFormat.string)(url))(function (result) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Bifunctor.rmap(Data_Bifunctor.bifunctorEither)(function (v) {
              return $foreign.readJSON_(v.body);
          })(result));
      });
  };
  exports["getTreeViaAJAX"] = getTreeViaAJAX;
  exports["makeModel"] = makeModel;
  exports["radialSeparation"] = radialSeparation;
  exports["horizontalLink"] = horizontalLink;
  exports["verticalLink"] = verticalLink;
  exports["horizontalClusterLink"] = horizontalClusterLink;
  exports["verticalClusterLink"] = verticalClusterLink;
  exports["radialLink"] = radialLink;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Selection.Functions"] = $PS["D3.Selection.Functions"] || {};
  var exports = $PS["D3.Selection.Functions"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Selection = $PS["D3.Selection"];
  var D3_Zoom = $PS["D3.Zoom"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Debug = $PS["Debug"];                
  var selectionUpdateJoin = function (dictSelectionM) {
      return function (openSelection) {
          return function (e) {
              return function (theData) {
                  return function (keyFn) {
                      var updateSelection = D3_FFI.d3DataWithKeyFunction_(theData)(keyFn)(openSelection);
                      var exitSelection = D3_FFI.d3GetExitSelection_(updateSelection);
                      var enterSelection = D3_FFI.d3GetEnterSelection_(updateSelection);
                      return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())({
                          enter: enterSelection,
                          exit: exitSelection,
                          update: updateSelection
                      });
                  };
              };
          };
      };
  };
  var selectionSelectUnder = function (dictSelectionM) {
      return function (selection) {
          return function (selector) {
              return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(D3_FFI.d3SelectionSelectAll_(selector)(selection));
          };
      };
  };
  var selectionOpenSelection = function (dictSelectionM) {
      return function (selection) {
          return function (selector) {
              var v = Debug.spy()("open selection: ")(selector);
              return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(D3_FFI.d3SelectionSelectAll_(selector)(selection));
          };
      };
  };
  var selectionOn = function (dictSelectionM) {
      return function (selection) {
          return function (v) {
              if (v instanceof D3_Selection.Drag) {
                  return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(Data_Unit.unit);
              };
              if (v instanceof D3_Selection.Zoom) {
                  var v1 = (function () {
                      if (v.value0.extent instanceof D3_Zoom.DefaultZoomExtent) {
                          return D3_FFI.d3AttachZoomDefaultExtent_(selection)({
                              scaleExtent: [ v.value0.scale.value0, v.value0.scale.value1 ],
                              name: v.value0.name,
                              target: selection
                          });
                      };
                      if (v.value0.extent instanceof D3_Zoom.ZoomExtent) {
                          return D3_FFI.d3AttachZoom_(selection)({
                              extent: [ [ v.value0.extent.value0.left, v.value0.extent.value0.top ], [ v.value0.extent.value0.right, v.value0.extent.value0.bottom ] ],
                              scaleExtent: [ v.value0.scale.value0, v.value0.scale.value1 ],
                              name: v.value0.name,
                              target: selection
                          });
                      };
                      throw new Error("Failed pattern match at D3.Selection.Functions (line 82, column 9 - line 96, column 14): " + [ v.value0.extent.constructor.name ]);
                  })();
                  return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at D3.Selection.Functions (line 65, column 1 - line 65, column 104): " + [ selection.constructor.name, v.constructor.name ]);
          };
      };
  };
  var selectionModifySelection = function (dictSelectionM) {
      return function (selection_) {
          return function (attributes) {
              var v = Data_Foldable.foldl(Data_Foldable.foldableArray)(D3_Selection.applySelectionAttributeD3)(selection_)(attributes);
              return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(Data_Unit.unit);
          };
      };
  };
  var selectionMergeSelections = function (dictSelectionM) {
      return function (selectionA) {
          return function (selectionB) {
              return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(D3_FFI.d3MergeSelectionWith_(selectionA)(selectionB));
          };
      };
  };
  var selectionJoin = function (dictSelectionM) {
      return function (selection) {
          return function (e) {
              return function (theData) {
                  return function (keyFn) {
                      var element = Debug.spy()("Join: ")(Data_Show.show(D3_Data_Types.showElement)(e));
                      var selectS = D3_FFI.d3SelectionSelectAll_(element)(selection);
                      var dataSelection = D3_FFI.d3DataWithKeyFunction_(theData)(keyFn)(selectS);
                      var enterSelection = D3_FFI.d3EnterAndAppend_(element)(dataSelection);
                      return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(enterSelection);
                  };
              };
          };
      };
  };
  var selectionFilterSelection = function (dictSelectionM) {
      return function (selection_) {
          return function (selector) {
              return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(D3_FFI.d3FilterSelection_(selection_)(selector));
          };
      };
  };
  var selectionAttach = function (dictSelectionM) {
      return function (selector) {
          return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(D3_FFI.d3SelectAllInDOM_(selector));
      };
  };
  var selectionAppendElement = function (dictSelectionM) {
      return function (selection_) {
          return function (element) {
              return function (attributes) {
                  var appended_ = D3_FFI.d3Append_(Data_Show.show(D3_Data_Types.showElement)(element))(selection_);
                  return Control_Bind.discard(Control_Bind.discardUnit)((dictSelectionM.Monad0()).Bind1())(selectionModifySelection(dictSelectionM)(appended_)(attributes))(function () {
                      return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(appended_);
                  });
              };
          };
      };
  };
  exports["selectionAttach"] = selectionAttach;
  exports["selectionSelectUnder"] = selectionSelectUnder;
  exports["selectionAppendElement"] = selectionAppendElement;
  exports["selectionFilterSelection"] = selectionFilterSelection;
  exports["selectionModifySelection"] = selectionModifySelection;
  exports["selectionJoin"] = selectionJoin;
  exports["selectionUpdateJoin"] = selectionUpdateJoin;
  exports["selectionOpenSelection"] = selectionOpenSelection;
  exports["selectionMergeSelections"] = selectionMergeSelections;
  exports["selectionOn"] = selectionOn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Instance.Selection"] = $PS["D3Tagless.Instance.Selection"] || {};
  var exports = $PS["D3Tagless.Instance.Selection"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var D3_Selection_Functions = $PS["D3.Selection.Functions"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var runD3M = function (v) {
      return Control_Monad_State_Trans.runStateT(v)(Data_Unit.unit);
  };                                                                                           
  var monadD3M = Control_Monad_State_Trans.monadStateT(Effect.monadEffect);
  var eval_D3M = function (v) {
      return Control_Applicative.liftA1(Effect.applicativeEffect)(Data_Tuple.fst)(Control_Monad_State_Trans.runStateT(v)(Data_Unit.unit));
  };
  var d3TaglessD3M = new D3Tagless_Capabilities.SelectionM(function () {
      return monadD3M;
  }, function (s_) {
      return D3_Selection_Functions.selectionAppendElement(d3TaglessD3M)(s_);
  }, function (selector) {
      return D3_Selection_Functions.selectionAttach(d3TaglessD3M)(selector);
  }, function (s_) {
      return D3_Selection_Functions.selectionFilterSelection(d3TaglessD3M)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionMergeSelections(d3TaglessD3M)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionOn(d3TaglessD3M)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionOpenSelection(d3TaglessD3M)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionSelectUnder(d3TaglessD3M)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionModifySelection(d3TaglessD3M)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionJoin(d3TaglessD3M)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionUpdateJoin(d3TaglessD3M)(s_);
  });
  var bindD3M = Control_Monad_State_Trans.bindStateT(Effect.monadEffect);
  exports["runD3M"] = runD3M;
  exports["eval_D3M"] = eval_D3M;
  exports["bindD3M"] = bindD3M;
  exports["d3TaglessD3M"] = d3TaglessD3M;
})(PS);
(function($PS) {
  "use strict";
  $PS["D3.Examples.MetaTree"] = $PS["D3.Examples.MetaTree"] || {};
  var exports = $PS["D3.Examples.MetaTree"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Examples_MetaTree_Unsafe = $PS["D3.Examples.MetaTree.Unsafe"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Layouts_Hierarchical = $PS["D3.Layouts.Hierarchical"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var D3Tagless_Instance_Selection = $PS["D3Tagless.Instance.Selection"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var $$Math = $PS["Math"];
  var Utility = $PS["Utility"];                
  var datum_ = {
      x: function ($18) {
          return (function (v) {
              return v.x;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($18)));
      },
      y: function ($19) {
          return (function (v) {
              return v.y;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($19)));
      },
      symbol: function ($20) {
          return (function (v) {
              return v.data.symbol;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($20)));
      },
      param1: function ($21) {
          return (function (v) {
              return v.data.param1;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($21)));
      },
      positionXY: function (d) {
          return "translate(" + (Data_Show.show(Data_Show.showNumber)(datum_.x(d)) + ("," + (Data_Show.show(Data_Show.showNumber)(datum_.y(d)) + ")")));
      }
  };

  // Snippet_Start
  // Name: MetaTreeDraw
  // | "script" to produce the documentation-ready rendering of another script's structure
  // | (could also be the basis for graphical editor of scripts / trees)
  var draw = function (dictBind) {
      return function (dictSelectionM) {
          return function (v) {
              return function (tree) {
                
                  // configure dimensions
  var numberOfLevels = D3_FFI.hNodeHeight_(tree) + 1.0;
                  var spacing = {
                      interChild: v.value0 / 5.0,
                      interLevel: v.value1 / numberOfLevels
                  };
                  var layoutFn = D3_FFI.treeSetNodeSize_(D3_FFI.getLayout(D3_Data_Tree.TidyTree.value))([ spacing.interChild, spacing.interLevel ]);
                  var laidOutRoot_ = D3_FFI.runLayoutFn_(layoutFn)(tree);
                  var v1 = D3_FFI.treeMinMax_(laidOutRoot_);
                  var yExtent = $$Math.abs(v1.yMax - v1.yMin);
                  var xExtent = $$Math.abs(v1.xMax - v1.xMin);
                  var vtreeYOffset = $$Math.abs(v.value1 - yExtent) / 2.0;
                  var pad = function (n) {
                      return n * 1.2;
                  };
                  var vtreeXOffset = pad(v1.xMin);
                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.attach(dictSelectionM)(".svg-container"))(function (root) {
                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(root)(D3_Data_Types.Svg.value)([ D3_Attributes_Sugar.viewBox(vtreeXOffset)(-vtreeYOffset)(pad(xExtent))(pad(yExtent)), D3_Attributes_Sugar.preserveAspectRatio(new D3_Attributes_Sugar.AspectRatio(D3_Attributes_Sugar.XMin.value, D3_Attributes_Sugar.YMid.value, D3_Attributes_Sugar.Meet.value)), D3_Attributes_Sugar.width(D3_Attributes_Instances.toAttrNumber)(v.value0), D3_Attributes_Sugar.height(D3_Attributes_Instances.toAttrNumber)(v.value1), D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("metatree") ]))(function (svg) {
                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(svg)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.fontFamily(D3_Attributes_Instances.toAttrString)("sans-serif"), D3_Attributes_Sugar.fontSize(D3_Attributes_Instances.toAttrNumber)(18.0) ]))(function (container) {
                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(container)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("links") ]))(function (links) {
                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(container)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("nodes") ]))(function (nodes) {
                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.simpleJoin(dictSelectionM)(links)(D3_Data_Types.Path.value)(D3_FFI.links_(tree))(D3_FFI.keyIsID_))(function (theLinks_) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(theLinks_)([ D3_Attributes_Sugar.strokeWidth(D3_Attributes_Instances.toAttrNumber)(1.5), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrString)("black"), D3_Attributes_Sugar.strokeOpacity(D3_Attributes_Instances.toAttrNumber)(0.4), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("none"), D3_Layouts_Hierarchical.verticalLink ]))(function () {
                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.simpleJoin(dictSelectionM)(nodes)(D3_Data_Types.Group.value)(D3_FFI.descendants_(tree))(D3_FFI.keyIsID_))(function (nodeJoin_) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(nodeJoin_)([ D3_Attributes_Sugar.transform([ datum_.positionXY ]) ]))(function () {
                                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(nodeJoin_)(D3_Data_Types.Circle.value)([ D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("blue"), D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumber)(20.0), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrString)("white"), D3_Attributes_Sugar.strokeWidth(D3_Attributes_Instances.toAttrNumber)(3.0) ]))(function (theNodes) {
                                                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(nodeJoin_)(D3_Data_Types.Text.value)([ D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumber)(3.0), D3_Attributes_Sugar.textAnchor(D3_Attributes_Instances.toAttrString)("middle"), D3_Attributes_Sugar.text(D3_Attributes_Instances.toAttrStringFn)(datum_.symbol), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("white") ]))(function (labelsWhite) {
                                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(nodeJoin_)(D3_Data_Types.Text.value)([ D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumber)(22.0), D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumber)(3.0), D3_Attributes_Sugar.textAnchor(D3_Attributes_Instances.toAttrString)("start"), D3_Attributes_Sugar.text(D3_Attributes_Instances.toAttrStringFn)(datum_.param1), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("gray") ]))(function (labelsGray) {
                                                                  return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(svg);
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          };
      };
  };

  // | Evaluate the tree drawing script in the "d3" monad which will render it in SVG
  // | TODO specialize runD3M so that this function isn't necessary
  var drawTree = function (treeModel) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
          var widthHeight = Utility.getWindowWidthHeight();
          var tree = D3_FFI.hierarchyFromJSON_(treeModel.json);
          var v = D3Tagless_Instance_Selection.runD3M(draw(D3Tagless_Instance_Selection.bindD3M)(D3Tagless_Instance_Selection.d3TaglessD3M)(widthHeight)(tree))();
          return Data_Unit.unit;
      });
  };
  exports["drawTree"] = drawTree;
})(PS);
(function(exports) {
  exports.readSpago_Raw_JSON_ = modulesBody => packagesBody => lsdepsBody => locBody => {
    const modules  = decodeModulesFile(modulesBody);
    const packages = decodePackagesFile(packagesBody);
    const lsDeps   = decodeLsDepsFile(lsdepsBody);
    const loc      = decodeLOCFile(locBody);

    return { modules, packages, lsDeps, loc }
  }

  // module has key, path & depends
  const decodeModulesFile = function (filecontents) {
    const json = JSON.parse(filecontents)
    const modules = Object.keys(json).map(key => { return { key: key, depends: json[key].depends, path: json[key].path }; })

    return modules;
  }

  // package has key and depends
  const decodePackagesFile = function (filecontents) {
    const json = JSON.parse(filecontents)
    const packages = Object.keys(json).map(key => { return { key: key, depends: json[key].depends }; })

    return packages;
  }

  // package has key and depends
  const decodeLOCFile = function (filecontents) {
    const json = JSON.parse(filecontents)
    return json.loc;
  }

  // lsdep has key === packageName, version, repo { tag, contents }
  const decodeLsDepsFile = function (filecontents) {
    const jsonlines = splitIntoLines(filecontents)
    jsonlines.length = jsonlines.length - 1
    var objectArray = jsonlines.map(d => JSON.parse(d))
    return objectArray;
  }

  function splitIntoLines (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }
})(PS["D3.Examples.Spago.Files"] = PS["D3.Examples.Spago.Files"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.Spago.Files"] = $PS["D3.Examples.Spago.Files"] || {};
  var exports = $PS["D3.Examples.Spago.Files"];
  var $foreign = $PS["D3.Examples.Spago.Files"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Utility = $PS["Utility"];                
  var PackageInfo = (function () {
      function PackageInfo(value0) {
          this.value0 = value0;
      };
      PackageInfo.create = function (value0) {
          return new PackageInfo(value0);
      };
      return PackageInfo;
  })();
  var IsModule = (function () {
      function IsModule(value0) {
          this.value0 = value0;
      };
      IsModule.create = function (value0) {
          return new IsModule(value0);
      };
      return IsModule;
  })();
  var IsPackage = (function () {
      function IsPackage(value0) {
          this.value0 = value0;
      };
      IsPackage.create = function (value0) {
          return new IsPackage(value0);
      };
      return IsPackage;
  })();
  var M2M_Tree = (function () {
      function M2M_Tree() {

      };
      M2M_Tree.value = new M2M_Tree();
      return M2M_Tree;
  })();
  var M2M_Graph = (function () {
      function M2M_Graph() {

      };
      M2M_Graph.value = new M2M_Graph();
      return M2M_Graph;
  })();
  var P2P = (function () {
      function P2P() {

      };
      P2P.value = new P2P();
      return P2P;
  })();
  var M2P = (function () {
      function M2P() {

      };
      M2P.value = new M2P();
      return M2P;
  })();
  var eqLinkType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof M2M_Tree && y instanceof M2M_Tree) {
              return true;
          };
          if (x instanceof M2M_Graph && y instanceof M2M_Graph) {
              return true;
          };
          if (x instanceof P2P && y instanceof P2P) {
              return true;
          };
          if (x instanceof M2P && y instanceof M2P) {
              return true;
          };
          return false;
      };
  });
  var showNodeType = new Data_Show.Show(function (v) {
      if (v instanceof IsModule) {
          return "module";
      };
      if (v instanceof IsPackage) {
          return "package";
      };
      throw new Error("Failed pattern match at D3.Examples.Spago.Files (line 293, column 1 - line 295, column 47): " + [ v.constructor.name ]);
  });
  var showLinkType = new Data_Show.Show(function (v) {
      if (v instanceof M2M_Tree) {
          return "M2M-Tree";
      };
      if (v instanceof M2M_Graph) {
          return "M2M-Graph";
      };
      if (v instanceof P2P) {
          return "P2P";
      };
      if (v instanceof M2P) {
          return "module to package dependency";
      };
      throw new Error("Failed pattern match at D3.Examples.Spago.Files (line 296, column 1 - line 300, column 44): " + [ v.constructor.name ]);
  });
  var isP2P_Link = function (v) {
      return Data_Eq.eq(eqLinkType)(v.linktype)(P2P.value);
  };
  var isM2P_Link = function (v) {
      return Data_Eq.eq(eqLinkType)(v.linktype)(M2P.value);
  };
  var isM2M_Tree_Link = function (v) {
      return Data_Eq.eq(eqLinkType)(v.linktype)(M2M_Tree.value);
  };
  var isM2M_Graph_Link = function (v) {
      return Data_Eq.eq(eqLinkType)(v.linktype)(M2M_Graph.value);
  };
  var getGraphJSONData = function (v) {
      var path2LOC = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.loc)(function (o) {
          return new Data_Tuple.Tuple(o.path, o.loc);
      }));
      var names = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return v1.key;
      })(v.modules))(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return v1.key;
      })(v.packages));
      var makeModuleToPackageLink = function (m) {
          return {
              source: m.id,
              target: m.containerID,
              linktype: M2P.value,
              inSim: true
          };
      };
      var makeLink = function (linktype) {
          return function (v1) {
              return {
                  source: v1.value0,
                  target: v1.value1,
                  linktype: linktype,
                  inSim: true
              };
          };
      };
      var ids = Data_Array.range(0)(Data_Array.length(names) - 1 | 0);
      var name2ID = Data_Map_Internal.fromFoldableWith(Data_Ord.ordString)(Data_Foldable.foldableArray)(function (v1) {
          return function (v2) {
              return v1;
          };
      })(Data_Array.zip(names)(ids));
      var getId = function (s) {
          return Data_Maybe.fromMaybe(0)(Data_Map_Internal.lookup(Data_Ord.ordString)(s)(name2ID));
      };
      var makeNodeFromModuleJSONPL = function (m) {
          var id = getId(m.key);
          return {
              id: id,
              name: m.key,
              containerID: getId(m["package"]),
              containerName: m["package"],
              loc: m.loc,
              nodetype: new IsModule(m.path),
              inSim: true,
              links: {
                  targets: Data_Functor.map(Data_Functor.functorArray)(getId)(m.depends),
                  sources: [  ],
                  treeChildren: [  ],
                  inPackage: [  ],
                  outPackage: [  ],
                  contains: [  ]
              },
              connected: false,
              showChildren: false,
              containsMany: false,
              treeXY: Data_Nullable["null"],
              treeDepth: Data_Nullable["null"],
              gridXY: Data_Nullable["null"]
          };
      };
      var foldDepends = function (b) {
          return function (a) {
              var id = getId(a.key);
              var makeTuple = function (s) {
                  return new Data_Tuple.Tuple(id, getId(s));
              };
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(makeTuple)(a.depends))(b);
          };
      };
      var moduleLinks = Data_Functor.map(Data_Functor.functorArray)(makeLink(M2M_Graph.value))(Data_Array.foldl(foldDepends)([  ])(v.modules));
      var packageLinks = Data_Functor.map(Data_Functor.functorArray)(makeLink(P2P.value))(Data_Array.foldl(foldDepends)([  ])(v.packages));
      var depsMap = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.lsDeps)(function (d) {
          return new Data_Tuple.Tuple(d.packageName, {
              version: d.version,
              repo: d.repo.contents
          });
      }));
      var makeNodeFromPackageJSONCL = function (p) {
          var repo = Data_Maybe.fromMaybe({
              version: "not found",
              repo: "not found"
          })(Data_Map_Internal.lookup(Data_Ord.ordString)(p.key)(depsMap));
          var id = getId(p.key);
          return {
              id: id,
              name: p.key,
              inSim: true,
              nodetype: new IsPackage(new PackageInfo(repo)),
              containerID: id,
              containerName: p.key,
              loc: p.loc,
              links: {
                  targets: Data_Functor.map(Data_Functor.functorArray)(getId)(p.depends),
                  sources: [  ],
                  treeChildren: [  ],
                  inPackage: [  ],
                  outPackage: [  ],
                  contains: Data_Functor.map(Data_Functor.functorArray)(getId)(p.contains)
              },
              connected: true,
              showChildren: true,
              containsMany: Data_Array.length(p.contains) > 1,
              treeXY: Data_Nullable["null"],
              treeDepth: Data_Nullable["null"],
              gridXY: Data_Nullable["null"]
          };
      };
      var addPackageInfo = function (v1) {
          var packageName = (function () {
              var pieces = Data_String_Common.split("/")(v1.path);
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(pieces)(0))(function (root) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(pieces)(1))(function (packageString) {
                      if (root === ".spago") {
                          return new Data_Maybe.Just(packageString);
                      };
                      if (root === "src") {
                          return new Data_Maybe.Just("my-project");
                      };
                      return Data_Maybe.Nothing.value;
                  });
              });
          })();
          var $$package = Data_Maybe.fromMaybe("")(packageName);
          return {
              key: v1.key,
              depends: v1.depends,
              path: v1.path,
              "package": $$package
          };
      };
      var addLOCInfo = function (v1) {
          var linecount = Data_Maybe.fromMaybe(10.0)(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.path)(path2LOC));
          return {
              key: v1.key,
              depends: v1.depends,
              path: v1.path,
              "package": v1["package"],
              loc: linecount
          };
      };
      var modulesPL = Data_Functor.map(Data_Functor.functorArray)(function ($69) {
          return addLOCInfo(addPackageInfo($69));
      })(v.modules);
      var mapNamesToModules = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (m) {
          return new Data_Tuple.Tuple(m.key, m);
      })(modulesPL));
      var maybeModules = function (ms) {
          return Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(function (k) {
              return Data_Map_Internal.lookup(Data_Ord.ordString)(k)(mapNamesToModules);
          })(ms));
      };
      var rollUpLOC = function (ms) {
          return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringNumber)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
              return v1.loc;
          })(maybeModules(ms)));
      };
      var moduleNodes = Data_Functor.map(Data_Functor.functorArray)(makeNodeFromModuleJSONPL)(modulesPL);
      var modulePackageLinks = Data_Functor.map(Data_Functor.functorArray)(makeModuleToPackageLink)(moduleNodes);
      var links = Data_Semigroup.append(Data_Semigroup.semigroupArray)(moduleLinks)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(packageLinks)(modulePackageLinks));
      var getSourceLinks = function (v1) {
          var sources = Data_Array.foldl(function (acc) {
              return function (v2) {
                  var $53 = v1.id === v2.target;
                  if ($53) {
                      return Data_Array.cons(v2.source)(acc);
                  };
                  return acc;
              };
          })([  ])(links);
          return new Data_Tuple.Tuple(v1.id, sources);
      };
      var modulePackageTuples = Data_Functor.map(Data_Functor.functorArray)(function (m) {
          return new Data_Tuple.Tuple(m.key, m["package"]);
      })(modulesPL);
      var packageContains = Data_Functor.map(Data_Functor.functorArray)(Utility.chunk)(Data_Array.groupBy(Utility.equalSnd(Data_Eq.eqString))(Data_Array.sortBy(Utility.compareSnd(Data_Ord.ordString))(modulePackageTuples)));
      var packageContainsMap = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(packageContains);
      var packageLOC = Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return new Data_Tuple.Tuple(v1.value0, rollUpLOC(v1.value1));
      })(packageContains);
      var packageLOCMap = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(packageLOC);
      var addRollUpLOC = function (v1) {
          return {
              key: v1.key,
              depends: v1.depends,
              contains: v1.contains,
              loc: Data_Maybe.fromMaybe(0.0)(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.key)(packageLOCMap))
          };
      };
      var addContains = function (v1) {
          return {
              key: v1.key,
              depends: v1.depends,
              contains: Data_Maybe.fromMaybe([  ])(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.key)(packageContainsMap))
          };
      };
      var packagesCL = Data_Functor.map(Data_Functor.functorArray)(function ($70) {
          return addRollUpLOC(addContains($70));
      })(v.packages);
      var packageNodes = Data_Functor.map(Data_Functor.functorArray)(makeNodeFromPackageJSONCL)(packagesCL);
      var nodes = Data_Semigroup.append(Data_Semigroup.semigroupArray)(moduleNodes)(packageNodes);
      var id2Node = Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(nodes)(function (node) {
          return new Data_Tuple.Tuple(node.id, node);
      }));
      var sourceLinksMap = Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(getSourceLinks)(nodes));
      return {
          links: links,
          nodes: nodes,
          moduleNodes: moduleNodes,
          packageNodes: packageNodes,
          moduleLinks: moduleLinks,
          packageLinks: packageLinks,
          modulePackageLinks: modulePackageLinks,
          sourceLinksMap: sourceLinksMap,
          name2ID: name2ID,
          id2Node: id2Node,
          id2Name: Data_Map_Internal.empty,
          id2Package: Data_Map_Internal.empty,
          id2LOC: Data_Map_Internal.empty
      };
  };
  exports["M2M_Tree"] = M2M_Tree;
  exports["M2M_Graph"] = M2M_Graph;
  exports["P2P"] = P2P;
  exports["M2P"] = M2P;
  exports["IsModule"] = IsModule;
  exports["IsPackage"] = IsPackage;
  exports["getGraphJSONData"] = getGraphJSONData;
  exports["isP2P_Link"] = isP2P_Link;
  exports["isM2M_Graph_Link"] = isM2M_Graph_Link;
  exports["isM2P_Link"] = isM2P_Link;
  exports["isM2M_Tree_Link"] = isM2M_Tree_Link;
  exports["eqLinkType"] = eqLinkType;
  exports["showNodeType"] = showNodeType;
  exports["showLinkType"] = showLinkType;
  exports["readSpago_Raw_JSON_"] = $foreign.readSpago_Raw_JSON_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.Spago.Unsafe"] = $PS["D3.Examples.Spago.Unsafe"] || {};
  var exports = $PS["D3.Examples.Spago.Unsafe"];
  var unboxD3SimNode = function (datum) {
      return datum;
  };
  var unboxD3SimLink = function (datum) {
      return datum;
  };
  exports["unboxD3SimNode"] = unboxD3SimNode;
  exports["unboxD3SimLink"] = unboxD3SimLink;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Node"] = $PS["D3.Node"] || {};
  var exports = $PS["D3.Node"];
  var D3SimNode = function (x) {
      return x;
  };
  exports["D3SimNode"] = D3SimNode;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $163 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $164 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($165) {
              return $163($164($165));
          };
      };
  }, function (f) {
      return function (z) {
          var $166 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $167 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function ($168) {
              return $166($167($168));
          };
      };
  });
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };                  
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          var $68 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
          return function ($69) {
              return $68(toList($69));
          };
      };
  }, function (f) {
      return function (x) {
          var $70 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
          return function ($71) {
              return $70(toList($71));
          };
      };
  }, function (f) {
      return function (x) {
          var $72 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
          return function ($73) {
              return $72(toList($73));
          };
      };
  });
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["foldableSet"] = foldableSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.Spago.Model"] = $PS["D3.Examples.Spago.Model"] || {};
  var exports = $PS["D3.Examples.Spago.Model"];
  var D3_Examples_Spago_Files = $PS["D3.Examples.Spago.Files"];
  var D3_Examples_Spago_Unsafe = $PS["D3.Examples.Spago.Unsafe"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Node = $PS["D3.Node"];
  var D3_Scales = $PS["D3.Scales"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Graph = $PS["Data.Graph"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Debug = $PS["Debug"];
  var $$Math = $PS["Math"];                
  var upgradeSpagoNodeData = function (sourcesMap) {
      return function (node) {
          return {
              links: {
                  sources: Data_Maybe.fromMaybe([  ])(Data_Map_Internal.lookup(Data_Ord.ordInt)(node.id)(sourcesMap)),
                  contains: node.links.contains,
                  inPackage: node.links.inPackage,
                  outPackage: node.links.outPackage,
                  targets: node.links.targets,
                  treeChildren: node.links.treeChildren
              },
              id: node.id,
              cluster: node.containerID,
              connected: node.connected,
              showChildren: (function () {
                  if (node.nodetype instanceof D3_Examples_Spago_Files.IsPackage) {
                      return true;
                  };
                  if (node.nodetype instanceof D3_Examples_Spago_Files.IsModule) {
                      return false;
                  };
                  throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 205, column 20 - line 207, column 45): " + [ node.nodetype.constructor.name ]);
              })(),
              containerID: node.containerID,
              containerName: node.containerName,
              containsMany: node.containsMany,
              focusX: 0.0,
              focusY: 0.0,
              fx: Data_Nullable["null"],
              fy: Data_Nullable["null"],
              inSim: true,
              loc: node.loc,
              name: node.name,
              nodetype: node.nodetype,
              r: $$Math.sqrt(node.loc),
              treeXY: Data_Nullable["null"],
              treeDepth: Data_Nullable["null"],
              gridXY: Data_Nullable["null"],
              vx: 0.0,
              vy: 0.0,
              x: 0.0,
              y: 0.0
          };
      };
  };
  var unpinAllNodes = function (nodes) {
      var unpin = function (v) {
          return {
              id: v.id,
              links: v.links,
              connected: v.connected,
              showChildren: v.showChildren,
              containerID: v.containerID,
              containerName: v.containerName,
              containsMany: v.containsMany,
              inSim: v.inSim,
              loc: v.loc,
              name: v.name,
              nodetype: v.nodetype,
              treeXY: v.treeXY,
              treeDepth: v.treeDepth,
              gridXY: v.gridXY,
              x: v.x,
              y: v.y,
              vx: v.vx,
              vy: v.vy,
              fx: Data_Nullable["null"],
              fy: Data_Nullable["null"],
              cluster: v.cluster,
              focusX: v.focusX,
              focusY: v.focusY,
              r: v.r
          };
      };
      return Data_Functor.map(Data_Functor.functorArray)(unpin)(nodes);
  };
  var setTreeXYIncludingLeaves = function (v) {
      return function (v1) {
          return {
              id: v.id,
              links: {
                  treeChildren: v1.childIDs,
                  contains: v.links.contains,
                  inPackage: v.links.inPackage,
                  outPackage: v.links.outPackage,
                  sources: v.links.sources,
                  targets: v.links.targets
              },
              connected: true,
              showChildren: v.showChildren,
              containerID: v.containerID,
              containerName: v.containerName,
              containsMany: v.containsMany,
              inSim: v.inSim,
              loc: v.loc,
              name: v.name,
              nodetype: v.nodetype,
              treeXY: Data_Nullable.notNull({
                  x: v1.x,
                  y: v1.y
              }),
              treeDepth: Data_Nullable.notNull(v1.depth),
              gridXY: v.gridXY,
              x: v.x,
              y: v.y,
              vx: v.vx,
              vy: v.vy,
              fx: v.fx,
              fy: v.fy,
              cluster: v.cluster,
              focusX: v.focusX,
              focusY: v.focusY,
              r: v.r
          };
      };
  };
  var scalePoint = function (xFactor) {
      return function (yFactor) {
          return function (xy) {
              return {
                  x: xy.x * xFactor,
                  y: xy.y * yFactor
              };
          };
      };
  };
  var offsetXY = function (offset) {
      return function (xy) {
          return {
              x: xy.x + offset.x,
              y: xy.y + offset.y
          };
      };
  };
  var numberToGridPoint = function (columns) {
      return function (i) {
          var d = Data_Int.toNumber(i);
          var c = Data_Int.toNumber(columns);
          var x = $$Math.remainder(d)(c);
          var y = $$Math.floor(d / c);
          return {
              x: x,
              y: y
          };
      };
  };                                                                                
  var makeGraph = function (nodes) {
      var addNode = function (acc) {
          return function (node) {
              var depends = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordInt)(node.links.targets);
              return Data_Map_Internal.insert(Data_Ord.ordInt)(node.id)(new Data_Tuple.Tuple(node, depends))(acc);
          };
      };
      var graphMap = Data_Array.foldl(addNode)(Data_Map_Internal.empty)(nodes);
      return Data_Graph.fromMap(graphMap);
  };
  var makeSpagoGraphModel = function (json) {
      var v = D3_Examples_Spago_Files.getGraphJSONData(json);
      return {
          links: v.links,
          nodes: Data_Functor.mapFlipped(Data_Functor.functorArray)(v.nodes)(upgradeSpagoNodeData(v.sourceLinksMap)),
          graph: makeGraph(v.nodes),
          tree: Data_Maybe.Nothing.value,
          maps: {
              name2ID: v.name2ID,
              id2Name: v.id2Name,
              id2Node: v.id2Node,
              id2Package: v.id2Package,
              id2LOC: v.id2LOC,
              id2TreeData: Data_Map_Internal.empty
          }
      };
  };
  var link_ = {
      source: function ($172) {
          return (function (v) {
              return v.source;
          })(D3_Examples_Spago_Unsafe.unboxD3SimLink($172));
      },
      target: function ($173) {
          return (function (v) {
              return v.target;
          })(D3_Examples_Spago_Unsafe.unboxD3SimLink($173));
      },
      linkType: function ($174) {
          return (function (v) {
              return v.linktype;
          })(D3_Examples_Spago_Unsafe.unboxD3SimLink($174));
      },
      linkClass: (function () {
          var $175 = Data_Show.show(D3_Examples_Spago_Files.showLinkType);
          return function ($176) {
              return $175((function (v) {
                  return v.linktype;
              })(D3_Examples_Spago_Unsafe.unboxD3SimLink($176)));
          };
      })(),
      linkClass2: (function () {
          var $177 = Data_Semigroup.append(Data_Semigroup.semigroupString)("updated ");
          var $178 = Data_Show.show(D3_Examples_Spago_Files.showLinkType);
          return function ($179) {
              return $177($178((function (v) {
                  return v.linktype;
              })(D3_Examples_Spago_Unsafe.unboxD3SimLink($179))));
          };
      })(),
      color: function ($180) {
          return D3_Scales.d3SchemeCategory10N_(Data_Int.toNumber((function (v) {
              return v.target.containerID;
          })(D3_Examples_Spago_Unsafe.unboxD3SimLink($180))));
      }
  };
  var sourcePackageIs = function (name) {
      return function (link) {
          return (link_.source(link)).name === name;
      };
  };
  var isUsedModule = function (v) {
      if (v.nodetype instanceof D3_Examples_Spago_Files.IsPackage) {
          return false;
      };
      if (v.nodetype instanceof D3_Examples_Spago_Files.IsModule) {
          if (v.connected) {
              return true;
          };
          return false;
      };
      throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 191, column 3 - line 195, column 31): " + [ v.nodetype.constructor.name ]);
  };
  var treeNodesToTreeXY_R = function (nodes) {
      var setXYtoTreeXY = function (v) {
          var treeXY = Data_Maybe.fromMaybe({
              x: v.x,
              y: v.y
          })(Data_Nullable.toMaybe(v.treeXY));
          var radialTranslate = function (p) {
              var x = p.x * $$Math.cos(p.y);
              var y = p.x * $$Math.sin(p.y);
              return {
                  x: x,
                  y: y
              };
          };
          var radialXY = radialTranslate(treeXY);
          return D3_Node.D3SimNode({
              id: v.id,
              links: v.links,
              connected: v.connected,
              showChildren: v.showChildren,
              containerID: v.containerID,
              containerName: v.containerName,
              containsMany: v.containsMany,
              inSim: v.inSim,
              loc: v.loc,
              name: v.name,
              nodetype: v.nodetype,
              treeXY: v.treeXY,
              treeDepth: v.treeDepth,
              gridXY: v.gridXY,
              x: v.x,
              y: v.y,
              vx: v.vx,
              vy: v.vy,
              fx: Data_Nullable.notNull(radialXY.x),
              fy: Data_Nullable.notNull(radialXY.y),
              cluster: v.cluster,
              focusX: v.focusX,
              focusY: v.focusY,
              r: v.r
          });
      };
      var partitioned = Data_Array.partition(isUsedModule)(nodes);
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(partitioned.no)(Data_Functor.map(Data_Functor.functorArray)(setXYtoTreeXY)(partitioned.yes));
  };
  var isPackageOrVisibleModule = function (id) {
      return function (v) {
          if (v.nodetype instanceof D3_Examples_Spago_Files.IsModule) {
              return v.containerID === id;
          };
          if (v.nodetype instanceof D3_Examples_Spago_Files.IsPackage) {
              return true;
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 181, column 3 - line 183, column 26): " + [ v.nodetype.constructor.name ]);
      };
  };
  var isPackage = function (v) {
      if (v.nodetype instanceof D3_Examples_Spago_Files.IsModule) {
          return false;
      };
      if (v.nodetype instanceof D3_Examples_Spago_Files.IsPackage) {
          return true;
      };
      throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 176, column 3 - line 178, column 26): " + [ v.nodetype.constructor.name ]);
  };
  var moduleNodesToContainerXY = function (nodes) {
      var partitioned = Data_Array.partition(isPackage)(nodes);
      var packagesIndexMap = Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Array.foldl(function (b) {
          return function (v) {
              return Data_Array.cons(new Data_Tuple.Tuple(v.id, v.gridXY))(b);
          };
      })([  ])(partitioned.yes));
      var setModuleGridXY = function (v) {
          var v1 = Data_Map_Internal.lookup(Data_Ord.ordInt)(v.containerID)(packagesIndexMap);
          if (v1 instanceof Data_Maybe.Nothing) {
              return Debug.spy()("container gridXY not found")(v);
          };
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = Data_Nullable.toMaybe(v1.value0);
              if (v2 instanceof Data_Maybe.Nothing) {
                  return {
                      containerID: v.containerID,
                      x: 0.0,
                      y: 0.0,
                      gridXY: v1.value0,
                      cluster: v.cluster,
                      connected: v.connected,
                      containerName: v.containerName,
                      containsMany: v.containsMany,
                      focusX: v.focusX,
                      focusY: v.focusY,
                      fx: v.fx,
                      fy: v.fy,
                      id: v.id,
                      inSim: v.inSim,
                      links: v.links,
                      loc: v.loc,
                      name: v.name,
                      nodetype: v.nodetype,
                      r: v.r,
                      showChildren: v.showChildren,
                      treeDepth: v.treeDepth,
                      treeXY: v.treeXY,
                      vx: v.vx,
                      vy: v.vy
                  };
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return {
                      containerID: v.containerID,
                      x: v2.value0.x,
                      y: v2.value0.y,
                      gridXY: v1.value0,
                      cluster: v.cluster,
                      connected: v.connected,
                      containerName: v.containerName,
                      containsMany: v.containsMany,
                      focusX: v.focusX,
                      focusY: v.focusY,
                      fx: v.fx,
                      fy: v.fy,
                      id: v.id,
                      inSim: v.inSim,
                      links: v.links,
                      loc: v.loc,
                      name: v.name,
                      nodetype: v.nodetype,
                      r: v.r,
                      showChildren: v.showChildren,
                      treeDepth: v.treeDepth,
                      treeXY: v.treeXY,
                      vx: v.vx,
                      vy: v.vy
                  };
              };
              throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 287, column 11 - line 289, column 76): " + [ v2.constructor.name ]);
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 284, column 7 - line 289, column 76): " + [ v1.constructor.name ]);
      };
      var modulesWithGrid = Data_Functor.map(Data_Functor.functorArray)(setModuleGridXY)(partitioned.no);
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(modulesWithGrid)(partitioned.yes);
  };
  var packageNodesToGridXY = function (nodes) {
      var partitioned = Data_Array.partition(isPackage)(nodes);
      var packageCount = Data_Array.length(partitioned.yes);
      var columns = Data_Int.floor($$Math.ceil($$Math.sqrt(Data_Int.toNumber(packageCount))));
      var offset = -(Data_Int.toNumber(columns) / 2.0);
      var packagesWithGrid = (function () {
          var setGridXY = function (v) {
              return function (i) {
                  var gridXY = scalePoint(200.0)(200.0)(offsetXY({
                      x: offset,
                      y: offset
                  })(numberToGridPoint(columns)(i)));
                  return {
                      gridXY: Data_Nullable.notNull(gridXY),
                      cluster: v.cluster,
                      connected: v.connected,
                      containerID: v.containerID,
                      containerName: v.containerName,
                      containsMany: v.containsMany,
                      focusX: v.focusX,
                      focusY: v.focusY,
                      fx: v.fx,
                      fy: v.fy,
                      id: v.id,
                      inSim: v.inSim,
                      links: v.links,
                      loc: v.loc,
                      name: v.name,
                      nodetype: v.nodetype,
                      r: v.r,
                      showChildren: v.showChildren,
                      treeDepth: v.treeDepth,
                      treeXY: v.treeXY,
                      vx: v.vx,
                      vy: v.vy,
                      x: v.x,
                      y: v.y
                  };
              };
          };
          return Data_FoldableWithIndex.foldlWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(function (i) {
              return function (b) {
                  return function (a) {
                      return Data_Array.cons(setGridXY(a)(i))(b);
                  };
              };
          })([  ])(partitioned.yes);
      })();
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(partitioned.no)(packagesWithGrid);
  };
  var isP2P_Link_ = function (l) {
      return Data_Eq.eq(D3_Examples_Spago_Files.eqLinkType)(link_.linkType(l))(D3_Examples_Spago_Files.P2P.value);
  };
  var isM2P_Link_ = function (l) {
      return Data_Eq.eq(D3_Examples_Spago_Files.eqLinkType)(link_.linkType(l))(D3_Examples_Spago_Files.M2P.value);
  };
  var isM2M_Tree_Link_ = function (l) {
      return Data_Eq.eq(D3_Examples_Spago_Files.eqLinkType)(link_.linkType(l))(D3_Examples_Spago_Files.M2M_Tree.value);
  };
  var isM2M_Graph_Link_ = function (l) {
      return Data_Eq.eq(D3_Examples_Spago_Files.eqLinkType)(link_.linkType(l))(D3_Examples_Spago_Files.M2M_Graph.value);
  };
  var initialRadius = 10.0;
  var initialAngle = $$Math.pi * (3.0 - $$Math.sqrt(5.0));
  var setForPhyllotaxis = function (index) {
      return function (v) {
          var i = Data_Int.toNumber(index);
          var radius = initialRadius * $$Math.sqrt(0.5 + i);
          var angle = i * initialAngle;
          return D3_Node.D3SimNode({
              id: v.id,
              links: v.links,
              connected: v.connected,
              showChildren: v.showChildren,
              containerID: v.containerID,
              containerName: v.containerName,
              containsMany: v.containsMany,
              inSim: v.inSim,
              loc: v.loc,
              name: v.name,
              nodetype: v.nodetype,
              treeXY: v.treeXY,
              treeDepth: v.treeDepth,
              gridXY: v.gridXY,
              x: radius * $$Math.cos(angle),
              y: radius * $$Math.sin(angle),
              vx: v.vx,
              vy: v.vy,
              fx: v.fx,
              fy: v.fy,
              cluster: v.cluster,
              focusX: v.focusX,
              focusY: v.focusY,
              r: v.r
          });
      };
  };
  var nodesToPhyllotaxis = function (predicate) {
      return function (nodes) {
          var partitioned = Data_Array.partition(predicate)(nodes);
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(partitioned.no)(Data_Array.mapWithIndex(setForPhyllotaxis)(partitioned.yes));
      };
  };                                                           
  var packagesNodesToPhyllotaxis = nodesToPhyllotaxis(isPackage);
  var fixNamedNodeTo = function (label) {
      return function (point) {
          return function (nodes) {
              var fixNamedNode$prime = function (v) {
                  var $143 = v.name === label;
                  if ($143) {
                      return Debug.spy()("fixing a node to: ")({
                          name: v.name,
                          fx: Data_Nullable.notNull(point.x),
                          fy: Data_Nullable.notNull(point.y),
                          cluster: v.cluster,
                          connected: v.connected,
                          containerID: v.containerID,
                          containerName: v.containerName,
                          containsMany: v.containsMany,
                          focusX: v.focusX,
                          focusY: v.focusY,
                          gridXY: v.gridXY,
                          id: v.id,
                          inSim: v.inSim,
                          links: v.links,
                          loc: v.loc,
                          nodetype: v.nodetype,
                          r: v.r,
                          showChildren: v.showChildren,
                          treeDepth: v.treeDepth,
                          treeXY: v.treeXY,
                          vx: v.vx,
                          vy: v.vy,
                          x: v.x,
                          y: v.y
                      });
                  };
                  return v;
              };
              return Data_Functor.map(Data_Functor.functorArray)(fixNamedNode$prime)(nodes);
          };
      };
  };
  var datum_ = {
      radius: function ($181) {
          return (function (v) {
              return v.r;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($181));
      },
      id: function ($182) {
          return (function (v) {
              return v.id;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($182));
      },
      loc: function ($183) {
          return (function (v) {
              return v.loc;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($183));
      },
      containerID: function ($184) {
          return (function (v) {
              return v.containerID;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($184));
      },
      containerName: function ($185) {
          return (function (v) {
              return v.containerName;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($185));
      },
      name: function ($186) {
          return (function (v) {
              return v.name;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($186));
      },
      x: function ($187) {
          return (function (v) {
              return v.x;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($187));
      },
      y: function ($188) {
          return (function (v) {
              return v.y;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($188));
      },
      fx: function ($189) {
          return (function (v) {
              return v.fx;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($189));
      },
      fy: function ($190) {
          return (function (v) {
              return v.fy;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($190));
      },
      treeXY: function ($191) {
          return (function (v) {
              return v.treeXY;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($191));
      },
      treeDepth: function ($192) {
          return (function (v) {
              return v.treeDepth;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($192));
      },
      gridXY: function ($193) {
          return (function (v) {
              return v.gridXY;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($193));
      },
      nodetype: function ($194) {
          return (function (v) {
              return v.nodetype;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($194));
      },
      cluster: function ($195) {
          return (function (v) {
              return v.cluster;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($195));
      },
      links: function ($196) {
          return (function (v) {
              return v.links;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($196));
      },
      connected: function ($197) {
          return (function (v) {
              return v.connected;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($197));
      },
      nameAndID: function (d) {
          return (D3_Examples_Spago_Unsafe.unboxD3SimNode(d)).name + (" " + Data_Show.show(Data_Show.showInt)((D3_Examples_Spago_Unsafe.unboxD3SimNode(d)).id));
      },
      indexAndID: function (d) {
          return (D3_Examples_Spago_Unsafe.unboxD3SimNode(d)).name + (" " + (Data_Show.show(Data_Show.showInt)(D3_FFI.getIndexFromDatum_(d)) + (" " + Data_Show.show(Data_Show.showInt)((D3_Examples_Spago_Unsafe.unboxD3SimNode(d)).id))));
      },
      namePos: function (d) {
          return "(" + (Data_Show.show(Data_Show.showNumber)($$Math.floor(datum_.x(d))) + ("," + (Data_Show.show(Data_Show.showNumber)($$Math.floor(datum_.y(d))) + ")")));
      },
      gridPoint: function (d) {
          return Data_Maybe.fromMaybe({
              x: datum_.x(d),
              y: datum_.y(d)
          })(Data_Nullable.toMaybe(datum_.gridXY(d)));
      },
      gridPointX: function (d) {
          return (function (v) {
              return v.x;
          })(datum_.gridPoint(d));
      },
      gridPointY: function (d) {
          return (function (v) {
              return v.y;
          })(datum_.gridPoint(d));
      },
      treePoint: function (d) {
          return Data_Maybe.fromMaybe({
              x: datum_.x(d),
              y: datum_.y(d)
          })(Data_Nullable.toMaybe(datum_.treeXY(d)));
      },
      treePointX: function (d) {
          return (function (v) {
              return v.x;
          })(datum_.treePoint(d));
      },
      treePointY: function (d) {
          return (function (v) {
              return v.y;
          })(datum_.treePoint(d));
      },
      indexFunction: function ($198) {
          return (function (v) {
              return v.id;
          })(D3_Examples_Spago_Unsafe.unboxD3SimNode($198));
      },
      positionLabel: function (d) {
          var v = datum_.nodetype(d);
          if (v instanceof D3_Examples_Spago_Files.IsModule) {
              return -datum_.radius(d);
          };
          if (v instanceof D3_Examples_Spago_Files.IsPackage) {
              return 0.0;
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 107, column 11 - line 109, column 33): " + [ v.constructor.name ]);
      },
      collideRadius: function (d) {
          var $149 = datum_.id(d) === datum_.containerID(d);
          if ($149) {
              return 10.0;
          };
          return datum_.radius(d);
      },
      collideRadiusBig: function (d) {
          return datum_.radius(d) + 10.0;
      },
      nodeClass: function (d) {
          return Data_Show.show(D3_Examples_Spago_Files.showNodeType)(datum_.nodetype(d)) + (" " + (datum_.containerName(d) + (" " + (datum_.name(d) + (function () {
              var $150 = datum_.connected(d);
              if ($150) {
                  return " connected";
              };
              return "";
          })()))));
      },
      "nodeClass'": function (d) {
          return "updated" + (Data_Show.show(D3_Examples_Spago_Files.showNodeType)(datum_.nodetype(d)) + (" " + (datum_.containerName(d) + (" " + (datum_.name(d) + (function () {
              var $151 = datum_.connected(d);
              if ($151) {
                  return " connected";
              };
              return "";
          })())))));
      },
      colorByGroup: function (d) {
          return D3_Scales.d3SchemeCategory10N_(Data_Int.toNumber(datum_.cluster(d)));
      },
      colorByDepth: function (d) {
          var v = Data_Nullable.toMaybe(datum_.treeDepth(d));
          if (v instanceof Data_Maybe.Nothing) {
              return "none";
          };
          if (v instanceof Data_Maybe.Just) {
              return D3_Scales.d3SchemeSequential10N_(Data_Int.toNumber(v.value0));
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 127, column 13 - line 129, column 68): " + [ v.constructor.name ]);
      },
      fillByUsage: function (d) {
          var $154 = datum_.connected(d);
          if ($154) {
              return datum_.colorByGroup(d);
          };
          return "none";
      },
      strokeByUsage: function (d) {
          var $155 = datum_.connected(d);
          if ($155) {
              return "none";
          };
          return datum_.colorByGroup(d);
      },
      colorByUsage: function (d) {
          var $156 = datum_.connected(d);
          if ($156) {
              return "red";
          };
          return "blue";
      },
      opacityByType: function (d) {
          var $157 = datum_.isPackage(d);
          if ($157) {
              return 0.4;
          };
          return 0.7;
      },
      translateNode: function (d) {
          return "translate(" + (Data_Show.show(Data_Show.showNumber)(datum_.x(d)) + ("," + (Data_Show.show(Data_Show.showNumber)(datum_.y(d)) + ")")));
      },
      isNamed: function (name) {
          return function (d) {
              return function (d1) {
                  return datum_.name(d1) === name;
              };
          };
      },
      isPackage: function (d) {
          var v = datum_.nodetype(d);
          if (v instanceof D3_Examples_Spago_Files.IsModule) {
              return false;
          };
          if (v instanceof D3_Examples_Spago_Files.IsPackage) {
              return true;
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 144, column 13 - line 146, column 36): " + [ v.constructor.name ]);
      },
      isModule: function (d) {
          var v = datum_.nodetype(d);
          if (v instanceof D3_Examples_Spago_Files.IsModule) {
              return true;
          };
          if (v instanceof D3_Examples_Spago_Files.IsPackage) {
              return false;
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 148, column 13 - line 150, column 37): " + [ v.constructor.name ]);
      },
      isUnusedModule: function (d) {
          var v = datum_.nodetype(d);
          if (v instanceof D3_Examples_Spago_Files.IsPackage) {
              return false;
          };
          if (v instanceof D3_Examples_Spago_Files.IsModule) {
              var $166 = datum_.connected(d);
              if ($166) {
                  return false;
              };
              return true;
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 152, column 13 - line 156, column 41): " + [ v.constructor.name ]);
      },
      isUsedModule: function (d) {
          var v = datum_.nodetype(d);
          if (v instanceof D3_Examples_Spago_Files.IsPackage) {
              return false;
          };
          if (v instanceof D3_Examples_Spago_Files.IsModule) {
              var $170 = datum_.connected(d);
              if ($170) {
                  return true;
              };
              return false;
          };
          throw new Error("Failed pattern match at D3.Examples.Spago.Model (line 159, column 13 - line 163, column 42): " + [ v.constructor.name ]);
      },
      treeChildren: function (d) {
          return (datum_.links(d)).treeChildren;
      },
      isTreeParent: function (d) {
          return !Data_Array["null"](datum_.treeChildren(d));
      }
  };
  var convertFilesToGraphModel = function (moduleJSON) {
      return function (packageJSON) {
          return function (lsdepJSON) {
              return function (locJSON) {
                  return makeSpagoGraphModel(D3_Examples_Spago_Files.readSpago_Raw_JSON_(moduleJSON.body)(packageJSON.body)(lsdepJSON.body)(locJSON.body));
              };
          };
      };
  };
  var allNodes = Data_Function["const"](true);
  exports["link_"] = link_;
  exports["isP2P_Link_"] = isP2P_Link_;
  exports["isM2P_Link_"] = isM2P_Link_;
  exports["isM2M_Graph_Link_"] = isM2M_Graph_Link_;
  exports["isM2M_Tree_Link_"] = isM2M_Tree_Link_;
  exports["datum_"] = datum_;
  exports["allNodes"] = allNodes;
  exports["isPackage"] = isPackage;
  exports["isPackageOrVisibleModule"] = isPackageOrVisibleModule;
  exports["isUsedModule"] = isUsedModule;
  exports["sourcePackageIs"] = sourcePackageIs;
  exports["unpinAllNodes"] = unpinAllNodes;
  exports["packageNodesToGridXY"] = packageNodesToGridXY;
  exports["moduleNodesToContainerXY"] = moduleNodesToContainerXY;
  exports["packagesNodesToPhyllotaxis"] = packagesNodesToPhyllotaxis;
  exports["treeNodesToTreeXY_R"] = treeNodesToTreeXY_R;
  exports["fixNamedNodeTo"] = fixNamedNodeTo;
  exports["setTreeXYIncludingLeaves"] = setTreeXYIncludingLeaves;
  exports["convertFilesToGraphModel"] = convertFilesToGraphModel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.Spago.Draw.Attributes"] = $PS["D3.Examples.Spago.Draw.Attributes"] || {};
  var exports = $PS["D3.Examples.Spago.Draw.Attributes"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Examples_Spago_Model = $PS["D3.Examples.Spago.Model"];                
  var updateAttrs = [ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.nodeClass), D3_Attributes_Sugar["transform'"](D3_Examples_Spago_Model.datum_.translateNode) ];
  var treeSceneAttributes = {
      circles: [ D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.radius), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.colorByDepth), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.colorByGroup), D3_Attributes_Sugar.strokeWidth(D3_Attributes_Instances.toAttrNumber)(3.0) ],
      labels: [ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("label"), D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumber)(4.0), D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumber)(2.0), D3_Attributes_Sugar.text(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.name) ]
  };
  var svgAttrs = function (w) {
      return function (h) {
          return [ D3_Attributes_Sugar.viewBox(-w / 2.1)(-h / 2.05)(w)(h), D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("overlay"), D3_Attributes_Sugar.width(D3_Attributes_Instances.toAttrNumber)(w), D3_Attributes_Sugar.height(D3_Attributes_Instances.toAttrNumber)(h), D3_Attributes_Sugar.cursor(D3_Attributes_Instances.toAttrString)("grab") ];
      };
  };
  var graphSceneAttributes = {
      circles: [ D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.radius), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.colorByGroup), D3_Attributes_Sugar.opacity(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.opacityByType) ],
      labels: [ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("label"), D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumber)(0.2), D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.positionLabel), D3_Attributes_Sugar.textAnchor(D3_Attributes_Instances.toAttrString)("middle"), D3_Attributes_Sugar.text(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.name) ]
  };                    
  var enterAttrs = [ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.nodeClass), D3_Attributes_Sugar["transform'"](D3_Examples_Spago_Model.datum_.translateNode) ];
  var clusterSceneAttributes = {
      circles: [ D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.radius), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.fillByUsage), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.strokeByUsage), D3_Attributes_Sugar.strokeWidth(D3_Attributes_Instances.toAttrNumber)(3.0), D3_Attributes_Sugar.opacity(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.opacityByType) ],
      labels: [ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("label"), D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumber)(0.2), D3_Attributes_Sugar.y(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.positionLabel), D3_Attributes_Sugar.textAnchor(D3_Attributes_Instances.toAttrString)("middle"), D3_Attributes_Sugar.text(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.datum_.name) ]
  };
  exports["enterAttrs"] = enterAttrs;
  exports["updateAttrs"] = updateAttrs;
  exports["clusterSceneAttributes"] = clusterSceneAttributes;
  exports["graphSceneAttributes"] = graphSceneAttributes;
  exports["treeSceneAttributes"] = treeSceneAttributes;
  exports["svgAttrs"] = svgAttrs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.Spago.Actions"] = $PS["Stories.Spago.Actions"] || {};
  var exports = $PS["Stories.Spago.Actions"];
  var NodeClick = (function () {
      function NodeClick(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NodeClick.create = function (value0) {
          return function (value1) {
              return new NodeClick(value0, value1);
          };
      };
      return NodeClick;
  })();
  var TopLevelCSS = (function () {
      function TopLevelCSS(value0) {
          this.value0 = value0;
      };
      TopLevelCSS.create = function (value0) {
          return new TopLevelCSS(value0);
      };
      return TopLevelCSS;
  })();
  var GraphStyle = (function () {
      function GraphStyle(value0) {
          this.value0 = value0;
      };
      GraphStyle.create = function (value0) {
          return new GraphStyle(value0);
      };
      return GraphStyle;
  })();
  var PackageGrid = (function () {
      function PackageGrid() {

      };
      PackageGrid.value = new PackageGrid();
      return PackageGrid;
  })();
  var PackageGraph = (function () {
      function PackageGraph() {

      };
      PackageGraph.value = new PackageGraph();
      return PackageGraph;
  })();
  var ModuleTree = (function () {
      function ModuleTree(value0) {
          this.value0 = value0;
      };
      ModuleTree.create = function (value0) {
          return new ModuleTree(value0);
      };
      return ModuleTree;
  })();
  var LayerSwarm = (function () {
      function LayerSwarm() {

      };
      LayerSwarm.value = new LayerSwarm();
      return LayerSwarm;
  })();
  var LinkShowFilter = (function () {
      function LinkShowFilter(value0) {
          this.value0 = value0;
      };
      LinkShowFilter.create = function (value0) {
          return new LinkShowFilter(value0);
      };
      return LinkShowFilter;
  })();
  var LinkForceFilter = (function () {
      function LinkForceFilter(value0) {
          this.value0 = value0;
      };
      LinkForceFilter.create = function (value0) {
          return new LinkForceFilter(value0);
      };
      return LinkForceFilter;
  })();
  var NodeFilter = (function () {
      function NodeFilter(value0) {
          this.value0 = value0;
      };
      NodeFilter.create = function (value0) {
          return new NodeFilter(value0);
      };
      return NodeFilter;
  })();
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var Finalize = (function () {
      function Finalize() {

      };
      Finalize.value = new Finalize();
      return Finalize;
  })();
  var Scene = (function () {
      function Scene(value0) {
          this.value0 = value0;
      };
      Scene.create = function (value0) {
          return new Scene(value0);
      };
      return Scene;
  })();
  var ToggleForce = (function () {
      function ToggleForce(value0) {
          this.value0 = value0;
      };
      ToggleForce.create = function (value0) {
          return new ToggleForce(value0);
      };
      return ToggleForce;
  })();
  var Filter = (function () {
      function Filter(value0) {
          this.value0 = value0;
      };
      Filter.create = function (value0) {
          return new Filter(value0);
      };
      return Filter;
  })();
  var ChangeStyling = (function () {
      function ChangeStyling(value0) {
          this.value0 = value0;
      };
      ChangeStyling.create = function (value0) {
          return new ChangeStyling(value0);
      };
      return ChangeStyling;
  })();
  var ChangeSimConfig = (function () {
      function ChangeSimConfig(value0) {
          this.value0 = value0;
      };
      ChangeSimConfig.create = function (value0) {
          return new ChangeSimConfig(value0);
      };
      return ChangeSimConfig;
  })();
  var StopSim = (function () {
      function StopSim() {

      };
      StopSim.value = new StopSim();
      return StopSim;
  })();
  var StartSim = (function () {
      function StartSim() {

      };
      StartSim.value = new StartSim();
      return StartSim;
  })();
  var EventFromVizualization = (function () {
      function EventFromVizualization(value0) {
          this.value0 = value0;
      };
      EventFromVizualization.create = function (value0) {
          return new EventFromVizualization(value0);
      };
      return EventFromVizualization;
  })();
  var ToggleChildrenOfNode = (function () {
      function ToggleChildrenOfNode(value0) {
          this.value0 = value0;
      };
      ToggleChildrenOfNode.create = function (value0) {
          return new ToggleChildrenOfNode(value0);
      };
      return ToggleChildrenOfNode;
  })();
  var SpotlightNode = (function () {
      function SpotlightNode(value0) {
          this.value0 = value0;
      };
      SpotlightNode.create = function (value0) {
          return new SpotlightNode(value0);
      };
      return SpotlightNode;
  })();
  var UnToggleChildrenOfNode = (function () {
      function UnToggleChildrenOfNode(value0) {
          this.value0 = value0;
      };
      UnToggleChildrenOfNode.create = function (value0) {
          return new UnToggleChildrenOfNode(value0);
      };
      return UnToggleChildrenOfNode;
  })();
  exports["PackageGrid"] = PackageGrid;
  exports["PackageGraph"] = PackageGraph;
  exports["ModuleTree"] = ModuleTree;
  exports["LayerSwarm"] = LayerSwarm;
  exports["TopLevelCSS"] = TopLevelCSS;
  exports["GraphStyle"] = GraphStyle;
  exports["LinkShowFilter"] = LinkShowFilter;
  exports["LinkForceFilter"] = LinkForceFilter;
  exports["NodeFilter"] = NodeFilter;
  exports["Initialize"] = Initialize;
  exports["Finalize"] = Finalize;
  exports["Scene"] = Scene;
  exports["ToggleForce"] = ToggleForce;
  exports["Filter"] = Filter;
  exports["ChangeStyling"] = ChangeStyling;
  exports["ChangeSimConfig"] = ChangeSimConfig;
  exports["StopSim"] = StopSim;
  exports["StartSim"] = StartSim;
  exports["EventFromVizualization"] = EventFromVizualization;
  exports["ToggleChildrenOfNode"] = ToggleChildrenOfNode;
  exports["SpotlightNode"] = SpotlightNode;
  exports["UnToggleChildrenOfNode"] = UnToggleChildrenOfNode;
  exports["NodeClick"] = NodeClick;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.Spago.Draw"] = $PS["D3.Examples.Spago.Draw"] || {};
  var exports = $PS["D3.Examples.Spago.Draw"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Examples_Spago_Draw_Attributes = $PS["D3.Examples.Spago.Draw.Attributes"];
  var D3_Examples_Spago_Model = $PS["D3.Examples.Spago.Model"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Selection = $PS["D3.Selection"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var D3_Zoom = $PS["D3.Zoom"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Stories_Spago_Actions = $PS["Stories.Spago.Actions"];
  var Utility = $PS["Utility"];                
  var updateSimulation = function (dictEq) {
      return function (dictBind) {
          return function (dictMonadEffect) {
              return function (dictSelectionM) {
                  return function (dictSimulationM) {
                      return function (v) {
                          return function (v1) {
                              if (v.selections.nodes instanceof Data_Maybe.Just && v.selections.links instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.openSelection(dictSelectionM)(v.selections.nodes.value0)(Data_Show.show(D3_Data_Types.showElement)(D3_Data_Types.Group.value)))(function (node) {
                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.openSelection(dictSelectionM)(v.selections.links.value0)(Data_Show.show(D3_Data_Types.showElement)(D3_Data_Types.Line.value)))(function (link) {
                                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.mergeNewDataWithSim(dictSimulationM)(dictEq)(node)(D3_FFI.keyIsID_)(link)(D3_FFI.keyIsID_)(v.rawdata))(function (merged) {
                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.updateJoin(dictSelectionM)(node)(D3_Data_Types.Group.value)(merged.nodes)(D3_FFI.keyIsID_))(function (node$prime) {
                                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(node$prime.enter)(D3_Data_Types.Group.value)(D3_Examples_Spago_Draw_Attributes.enterAttrs))(function (nodeEnter) {
                                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(nodeEnter)(D3_Data_Types.Circle.value)(v1.circles))(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Functor["void"]((dictBind.Apply0()).Functor0())(D3Tagless_Capabilities.appendTo(dictSelectionM)(nodeEnter)(D3_Data_Types.Text.value)(v1.labels)))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(node$prime.exit)([ D3_Attributes_Sugar.remove ]))(function () {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(node$prime.update)(D3_Examples_Spago_Draw_Attributes.updateAttrs))(function () {
                                                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.selectUnder(dictSelectionM)(node$prime.update)(Data_Show.show(D3_Data_Types.showElement)(D3_Data_Types.Circle.value)))(function (updateCirclesSelection) {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(updateCirclesSelection)(v1.circles))(function () {
                                                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.selectUnder(dictSelectionM)(node$prime.update)(Data_Show.show(D3_Data_Types.showElement)(D3_Data_Types.Text.value)))(function (updateLabelsSelection) {
                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(updateLabelsSelection)(v1.labels))(function () {
                                                                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.mergeSelections(dictSelectionM)(nodeEnter)(node$prime.update))(function (mergedNodeSelection) {
                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Functor["void"]((dictBind.Apply0()).Functor0())(D3Tagless_Capabilities.on(dictSelectionM)(mergedNodeSelection)(new D3_Selection.Drag(new D3_Selection.CustomDrag("spago", D3_FFI.simdrag)))))(function () {
                                                                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.updateJoin(dictSelectionM)(link)(D3_Data_Types.Line.value)(merged.links)(D3_FFI.keyIsID_))(function (link$prime) {
                                                                                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(link$prime.enter)(D3_Data_Types.Line.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.link_.linkClass), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrStringFn)(D3_Examples_Spago_Model.link_.color) ]))(function (linkEnter) {
                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(linkEnter)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("enter") ]))(function () {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(link$prime.exit)([ D3_Attributes_Sugar.remove ]))(function () {
                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(link$prime.update)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("update") ]))(function () {
                                                                                                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.mergeSelections(dictSelectionM)(linkEnter)(link$prime.update))(function (mergedlinksShown) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setNodesFromSelection(dictSimulationM)(mergedNodeSelection))(function () {
                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setLinksFromSelection(dictSimulationM)(mergedlinksShown)(v.linksWithForce))(function () {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.addTickFunction(dictSimulationM)("nodes")(new D3_Simulation_Types.Step(mergedNodeSelection, [ D3_Attributes_Sugar["transform'"](D3_Examples_Spago_Model.datum_.translateNode) ])))(function () {
                                                                                                                                  return D3Tagless_Capabilities.addTickFunction(dictSimulationM)("links")(new D3_Simulation_Types.Step(mergedlinksShown, [ D3_Attributes_Sugar.x1(D3_Attributes_Instances.toAttrNumberFn)(function ($26) {
                                                                                                                                      return (function (v2) {
                                                                                                                                          return v2.x;
                                                                                                                                      })(D3_Examples_Spago_Model.link_.source($26));
                                                                                                                                  }), D3_Attributes_Sugar.y1(D3_Attributes_Instances.toAttrNumberFn)(function ($27) {
                                                                                                                                      return (function (v2) {
                                                                                                                                          return v2.y;
                                                                                                                                      })(D3_Examples_Spago_Model.link_.source($27));
                                                                                                                                  }), D3_Attributes_Sugar.x2(D3_Attributes_Instances.toAttrNumberFn)(function ($28) {
                                                                                                                                      return (function (v2) {
                                                                                                                                          return v2.x;
                                                                                                                                      })(D3_Examples_Spago_Model.link_.target($28));
                                                                                                                                  }), D3_Attributes_Sugar.y2(D3_Attributes_Instances.toAttrNumberFn)(function ($29) {
                                                                                                                                      return (function (v2) {
                                                                                                                                          return v2.y;
                                                                                                                                      })(D3_Examples_Spago_Model.link_.target($29));
                                                                                                                                  }) ]));
                                                                                                                              });
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              };
                              return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                          };
                      };
                  };
              };
          };
      };
  };
  var initialize = function (dictBind) {
      return function (dictMonadEffect) {
          return function (dictSimulationM) {
              return function (dictSelectionM) {
                  return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadEffect)(Utility.getWindowWidthHeight))(function (v) {
                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.attach(dictSelectionM)("div.svg-container"))(function (root) {
                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(root)(D3_Data_Types.Svg.value)(D3_Examples_Spago_Draw_Attributes.svgAttrs(v.value0)(v.value1)))(function (svg) {
                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(svg)(D3_Data_Types.Group.value)([  ]))(function (inner) {
                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.on(dictSelectionM)(inner)(new D3_Selection.Drag(D3_Selection.DefaultDrag.value)))(function () {
                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.on(dictSelectionM)(svg)(new D3_Selection.Zoom({
                                          extent: new D3_Zoom.ZoomExtent({
                                              top: 0.0,
                                              left: 0.0,
                                              bottom: v.value1,
                                              right: v.value0
                                          }),
                                          scale: new D3_Zoom.ScaleExtent(0.1, 4.0),
                                          name: "spago",
                                          target: inner
                                      })))(function () {
                                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(inner)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("links") ]))(function (linksGroup) {
                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(inner)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("nodes") ]))(function (nodesGroup) {
                                                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())({
                                                      nodes: new Data_Maybe.Just(nodesGroup),
                                                      links: new Data_Maybe.Just(linksGroup)
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          };
      };
  };
  var getVizEventFromClick = function (e) {
      return function (d) {
          return function (t) {
              return new Stories_Spago_Actions.NodeClick(D3_Examples_Spago_Model.datum_.nodetype(d), D3_Examples_Spago_Model.datum_.id(d));
          };
      };
  };
  exports["getVizEventFromClick"] = getVizEventFromClick;
  exports["initialize"] = initialize;
  exports["updateSimulation"] = updateSimulation;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Tree"] = $PS["Data.Tree"] || {};
  var exports = $PS["Data.Tree"];                                
  var Node = (function () {
      function Node(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Node.create = function (value0) {
          return function (value1) {
              return new Node(value0, value1);
          };
      };
      return Node;
  })();
  exports["Node"] = Node;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.Spago.Tree"] = $PS["D3.Examples.Spago.Tree"] || {};
  var exports = $PS["D3.Examples.Spago.Tree"];
  var D3_Data_Graph = $PS["D3.Data.Graph"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Examples_Spago_Files = $PS["D3.Examples.Spago.Files"];
  var D3_Examples_Spago_Model = $PS["D3.Examples.Spago.Model"];
  var D3_FFI = $PS["D3.FFI"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tree = $PS["Data.Tree"];
  var Data_Tuple = $PS["Data.Tuple"];      
  var tupleToLink = function (linktype) {
      return function (v) {
          return {
              source: v.value0,
              target: v.value1,
              linktype: linktype,
              inSim: true
          };
      };
  };
  var setNodeXY_ForHorizontalTree = function (nodes) {
      return function (treeDerivedDataMap) {
          var updateXY = function (v) {
              var v1 = Data_Map_Internal.lookup(Data_Ord.ordInt)(v.id)(treeDerivedDataMap);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  var $22 = {
                      x: v1.value0.y - 1200.0,
                      y: v1.value0.x
                  };
                  return D3_Examples_Spago_Model.setTreeXYIncludingLeaves(v)({
                      x: $22.x,
                      y: $22.y,
                      depth: v1.value0.depth,
                      isTreeLeaf: v1.value0.isTreeLeaf,
                      childIDs: v1.value0.childIDs
                  });
              };
              throw new Error("Failed pattern match at D3.Examples.Spago.Tree (line 108, column 7 - line 115, column 134): " + [ v1.constructor.name ]);
          };
          return Data_Functor.map(Data_Functor.functorArray)(updateXY)(nodes);
      };
  };
  var pathsAsLists = function (paths) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)((function () {
          var $52 = Data_List.fromFoldable(Data_Foldable.foldableArray);
          return function ($53) {
              return $52(Data_Array.reverse($53));
          };
      })())(paths));
  };
  var path2Tuples = function ($copy_acc) {
      return function ($copy_v) {
          var $tco_var_acc = $copy_acc;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(acc, v) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return acc;
              };
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return acc;
              };
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
                  $tco_var_acc = new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0, v.value1.value0), acc);
                  $copy_v = new Data_List_Types.Cons(v.value1.value0, v.value1.value1);
                  return;
              };
              throw new Error("Failed pattern match at D3.Examples.Spago.Tree (line 147, column 1 - line 147, column 93): " + [ acc.constructor.name, v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
          };
          return $tco_result;
      };
  };
  var makeTreeLinkTuples = function (closedPaths) {
      var linkTuples = Data_Foldable.foldl(Data_List_Types.foldableList)(path2Tuples)(Data_List_Types.Nil.value)(closedPaths);
      return Data_Array.fromFoldable(Data_Set.foldableSet)(Data_Set.fromFoldable(Data_List_Types.foldableList)(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(linkTuples));
  };
  var getTreeDerivedData = function (root) {
      return Data_Array.foldl(function (acc) {
          return function (v) {
              return Data_Map_Internal.insert(Data_Ord.ordInt)(v.data.id)({
                  x: v.x,
                  y: v.y,
                  depth: v.depth,
                  isTreeLeaf: D3_FFI.hasChildren_(v),
                  childIDs: Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                      return v1.id;
                  })(D3_FFI.getHierarchyChildren_(v))
              })(acc);
          };
      })(Data_Map_Internal.empty)(D3_FFI.descendants_(root));
  };
  var changeLinkType = function (linktype) {
      return function (v) {
          var $46 = {};
          for (var $47 in v) {
              if ({}.hasOwnProperty.call(v, $47)) {
                  $46[$47] = v[$47];
              };
          };
          $46.linktype = linktype;
          return $46;
      };
  };
  var buildTree = function (rootID) {
      return function (treelinks) {
          var unwrap = function (v) {
              return v;
          };
          var linksWhoseSourceIs = function (id) {
              return Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  return v.target;
              })(Data_Array.filter(function (l) {
                  return l.source === id;
              })(Data_Functor.map(Data_Functor.functorArray)(unwrap)(treelinks))));
          };
          var go = function (childID) {
              return new Data_Tree.Node(childID, Data_Functor.map(Data_List_Types.functorList)(go)(linksWhoseSourceIs(childID)));
          };
          return new Data_Tree.Node(rootID, Data_Functor.map(Data_List_Types.functorList)(go)(linksWhoseSourceIs(rootID)));
      };
  };
  var treeReduction = function (rootID) {
      return function (model) {
          var reachable = D3_Data_Graph.getReachableNodes(Data_Ord.ordInt)(rootID)(model.graph);
          var treenodes = Data_Array.partition(function (v) {
              return Data_Array.elem(Data_Eq.eqInt)(v.id)(reachable.nodes) || v.id === rootID;
          })(model.nodes);
          var prunedTreeLinks = Data_Functor.map(Data_Functor.functorArray)(tupleToLink(D3_Examples_Spago_Files.M2M_Graph.value))(reachable.redundantLinks);
          var onlyTreelinks = makeTreeLinkTuples(pathsAsLists(reachable.closedDepPaths));
          var partitionedLinks = Data_Array.partition(function (v) {
              return Data_Array.elem(Data_Tuple.eqTuple(Data_Eq.eqInt)(Data_Eq.eqInt))(new Data_Tuple.Tuple(v.source, v.target))(onlyTreelinks);
          })(model.links);
          var treelinks = Data_Functor.map(Data_Functor.functorArray)(changeLinkType(D3_Examples_Spago_Files.M2M_Tree.value))(partitionedLinks.yes);
          var onlyPackageLinks = Data_Array.filter(D3_Examples_Spago_Files.isP2P_Link)(model.links);
          var links = Data_Semigroup.append(Data_Semigroup.semigroupArray)(treelinks)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prunedTreeLinks)(onlyPackageLinks));
          var idTree = buildTree(rootID)(treelinks);
          var jsontree = D3_Data_Tree.makeD3TreeJSONFromTreeID(idTree)(model.maps.id2Node);
          var rootTree = D3_FFI.hierarchyFromJSON_(jsontree);
          var numberOfLevels = D3_FFI.hNodeHeight_(rootTree) + 1.0;
          var layout = D3_FFI.treeSetNodeSize_(D3_FFI.getLayout(D3_Data_Tree.TidyTree.value))([ 8.0, 4000.0 / numberOfLevels ]);
          var sortedTree = D3_FFI.treeSortForTree_Spago(rootTree);
          var laidOutRoot_ = D3_FFI.runLayoutFn_(layout)(sortedTree);
          var tree = new Data_Tuple.Tuple(rootID, laidOutRoot_);
          var treeDerivedDataMap = getTreeDerivedData(laidOutRoot_);
          var positionedNodes = setNodeXY_ForHorizontalTree(treenodes.yes)(treeDerivedDataMap);
          return {
              links: links,
              nodes: Data_Semigroup.append(Data_Semigroup.semigroupArray)(positionedNodes)(treenodes.no),
              graph: model.graph,
              tree: new Data_Maybe.Just(tree),
              maps: {
                  name2ID: model.maps.name2ID,
                  id2Name: model.maps.id2Name,
                  id2Node: model.maps.id2Node,
                  id2Package: model.maps.id2Package,
                  id2LOC: model.maps.id2LOC,
                  id2TreeData: treeDerivedDataMap
              }
          };
      };
  };
  exports["treeReduction"] = treeReduction;
})(PS);
(function($PS) {
  "use strict";
  $PS["D3.Examples.ThreeLittleCircles"] = $PS["D3.Examples.ThreeLittleCircles"] || {};
  var exports = $PS["D3.Examples.ThreeLittleCircles"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Scales = $PS["D3.Scales"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Int = $PS["Data.Int"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                

  // Snippet_Start
  // Name: 3LC-xFromIndex
  // | simple utility function used in all three of these examples
  var xFromIndex = function (v) {
      return function (i) {
          return i * 100.0;
      };
  };

  // Snippet_End
  // Snippet_Start
  // Name: TLCSimple
  // | Pretty much the most basic example imaginable, three ints represented by three circles
  var drawThreeCircles = function (dictSelectionM) {
      return function (selector) {
          var circleAttributes = [ D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("green"), D3_Attributes_Sugar.cx(D3_Attributes_Instances.toAttrNumberFnI)(xFromIndex), D3_Attributes_Sugar.cy(D3_Attributes_Instances.toAttrNumber)(50.0), D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumber)(20.0) ];
          return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.attach(dictSelectionM)(selector))(function (root) {
              return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.appendTo(dictSelectionM)(root)(D3_Data_Types.Svg.value)([ D3_Attributes_Sugar.viewBox(-100.0)(-100.0)(650.0)(650.0), D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("d3svg gup") ]))(function (svg) {
                  return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.appendTo(dictSelectionM)(svg)(D3_Data_Types.Group.value)([  ]))(function (circleGroup) {
                      return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.simpleJoin(dictSelectionM)(circleGroup)(D3_Data_Types.Circle.value)([ 32, 57, 293 ])(D3_FFI.keyIsID_))(function (circles) {
                          return Control_Bind.discard(Control_Bind.discardUnit)((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.setAttributes(dictSelectionM)(circles)(circleAttributes))(function () {
                              return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(circles);
                          });
                      });
                  });
              });
          });
      };
  };
  var datum_ = (function () {
    
      // we bury the unsafe functions inside the datum_ record, unsafeCoerce yes, but very restricted how it can be used
  var getDatum = Unsafe_Coerce.unsafeCoerce;
      return {
          x: function (v) {
              return function (i) {
                  return Data_Int.toNumber(i) * 20.0;
              };
          },
          y: function (d) {
              return 100.0 - Data_Int.toNumber(getDatum(d)) / 5.0;
          },
          color: function (d) {
              return D3_Scales.d3SchemePairedN_(Data_Int.toNumber(getDatum(d)) / 100.0);
          }
      };
  })();

  // Snippet_End
  // Snippet_Start
  // Name: TLCParabola
  var drawWithData = function (dictSelectionM) {
      return function (circleData) {
          return function (selector) {
              var circleAttributes = [ D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrStringFn)(datum_.color), D3_Attributes_Sugar.strokeWidth(D3_Attributes_Instances.toAttrNumber)(3.0), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("none"), D3_Attributes_Sugar.cx(D3_Attributes_Instances.toAttrNumberFnI)(datum_.x), D3_Attributes_Sugar.cy(D3_Attributes_Instances.toAttrNumberFn)(datum_.y), D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumber)(10.0) ];
              return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.attach(dictSelectionM)(selector))(function (root) {
                  return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.appendTo(dictSelectionM)(root)(D3_Data_Types.Svg.value)([ D3_Attributes_Sugar.viewBox(-100.0)(-100.0)(650.0)(650.0), D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("d3svg gup") ]))(function (svg) {
                      return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.appendTo(dictSelectionM)(svg)(D3_Data_Types.Group.value)([  ]))(function (circleGroup) {
                          return Control_Bind.bind((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.simpleJoin(dictSelectionM)(circleGroup)(D3_Data_Types.Circle.value)(circleData)(D3_FFI.keyIsID_))(function (circles) {
                              return Control_Bind.discard(Control_Bind.discardUnit)((dictSelectionM.Monad0()).Bind1())(D3Tagless_Capabilities.setAttributes(dictSelectionM)(circles)(circleAttributes))(function () {
                                  return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(circles);
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  exports["drawThreeCircles"] = drawThreeCircles;
  exports["drawWithData"] = drawWithData;
})(PS);
(function($PS) {
  "use strict";
  $PS["D3.Examples.Tree.Draw"] = $PS["D3.Examples.Tree.Draw"] || {};
  var exports = $PS["D3.Examples.Tree.Draw"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Examples_MetaTree_Unsafe = $PS["D3.Examples.MetaTree.Unsafe"];
  var D3_FFI = $PS["D3.FFI"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var $$Math = $PS["Math"];                
  var treeDatum_ = {
      depth: function ($17) {
          return (function (v) {
              return v.depth;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($17)));
      },
      height: function ($18) {
          return (function (v) {
              return v.height;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($18)));
      },
      x: function ($19) {
          return (function (v) {
              return v.x;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($19)));
      },
      y: function ($20) {
          return (function (v) {
              return v.y;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($20)));
      },
      name: function ($21) {
          return (function (v) {
              return v.data.name;
          })(D3_Examples_MetaTree_Unsafe.unboxD3TreeNode(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($21)));
      },
      value: function ($22) {
          return D3_FFI.getHierarchyValue_(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($22));
      },
      hasChildren: function ($23) {
          return D3_FFI.hasChildren_(D3_Examples_MetaTree_Unsafe.coerceToTreeNode($23));
      },
      textAnchor: function (l) {
          return function (d) {
              if (l instanceof D3_Data_Tree.Radial) {
                  var $9 = treeDatum_.hasChildren(d) === treeDatum_.x(d) < $$Math.pi;
                  if ($9) {
                      return "start";
                  };
                  return "end";
              };
              var $10 = treeDatum_.hasChildren(d);
              if ($10) {
                  return "start";
              };
              return "end";
          };
      },
      textX: function (l) {
          return function (d) {
              if (l instanceof D3_Data_Tree.Radial) {
                  var $12 = treeDatum_.hasChildren(d) === treeDatum_.x(d) < $$Math.pi;
                  if ($12) {
                      return 6.0;
                  };
                  return -6.0;
              };
              var $13 = treeDatum_.hasChildren(d);
              if ($13) {
                  return 6.0;
              };
              return -6.0;
          };
      },
      onRHS: function (l) {
          return function (d) {
              var $14 = Data_Eq.eq(D3_Data_Tree.eqTreeLayout)(l)(D3_Data_Tree.Radial.value) && treeDatum_.x(d) >= $$Math.pi;
              if ($14) {
                  return true;
              };
              return false;
          };
      }
  };

  // | The eDSL script that renders tree layouts
  // | it has been parameterized rather heavily using the ScriptConfig record so that it can draw
  // | all six variations of [Radial, Horizontal, Vertical] * [Dendrogram, TidyTree] 
  // | NB there would be nothing wrong, per se, with individual examples, this just shows 
  // | some more composability, at the price of some direct legibility
  // Snippet_Start
  // Name: TreeDraw
  var draw = function (dictBind) {
      return function (dictSelectionM) {
          return function (config) {
              return function (tree) {
                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.attach(dictSelectionM)(config.selector))(function (root) {
                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(root)(D3_Data_Types.Svg.value)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(config.viewbox)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("tree"), D3_Attributes_Sugar.width(D3_Attributes_Instances.toAttrNumber)(config.svg.width), D3_Attributes_Sugar.height(D3_Attributes_Instances.toAttrNumber)(config.svg.height) ])))(function (svg) {
                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(svg)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.fontFamily(D3_Attributes_Instances.toAttrString)("sans-serif"), D3_Attributes_Sugar.fontSize(D3_Attributes_Instances.toAttrNumber)(10.0) ]))(function (container) {
                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(container)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("links") ]))(function (links) {
                                  return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(container)(D3_Data_Types.Group.value)([ D3_Attributes_Sugar.classed(D3_Attributes_Instances.toAttrString)("nodes") ]))(function (nodes) {
                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.simpleJoin(dictSelectionM)(links)(D3_Data_Types.Path.value)(D3_FFI.links_(tree))(D3_FFI.keyIsID_))(function (theLinks_) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(theLinks_)([ D3_Attributes_Sugar.strokeWidth(D3_Attributes_Instances.toAttrNumber)(1.5), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrString)(config.color), D3_Attributes_Sugar.strokeOpacity(D3_Attributes_Instances.toAttrNumber)(0.4), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)("none"), config.linkPath ]))(function () {
                                              return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.simpleJoin(dictSelectionM)(nodes)(D3_Data_Types.Group.value)(D3_FFI.descendants_(tree))(D3_FFI.keyIsID_))(function (nodeJoin_) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(D3Tagless_Capabilities.setAttributes(dictSelectionM)(nodeJoin_)(config.nodeTransform))(function () {
                                                      return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(nodeJoin_)(D3_Data_Types.Circle.value)([ D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrStringFn)(function (v) {
                                                          var $16 = treeDatum_.hasChildren(v);
                                                          if ($16) {
                                                              return "#999";
                                                          };
                                                          return "#555";
                                                      }), D3_Attributes_Sugar.radius(D3_Attributes_Instances.toAttrNumber)(2.5), D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrString)("white") ]))(function (theNodes) {
                                                          return Control_Bind.bind(dictBind)(D3Tagless_Capabilities.appendTo(dictSelectionM)(nodeJoin_)(D3_Data_Types.Text.value)([ D3_Attributes_Sugar.dy(D3_Attributes_Instances.toAttrNumber)(0.31), D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumberFn)(treeDatum_.textX(config.layout)), D3_Attributes_Sugar.textAnchor(D3_Attributes_Instances.toAttrStringFn)(treeDatum_.textAnchor(config.layout)), D3_Attributes_Sugar.text(D3_Attributes_Instances.toAttrStringFn)(treeDatum_.name), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrString)(config.color) ]))(function (theLabels) {
                                                              return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())(svg);
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          };
      };
  };
  exports["treeDatum_"] = treeDatum_;
  exports["draw"] = draw;
})(PS);
(function(exports) {
  //pruneEmptyChildren :: Tree MetaTreeNode -> TreeJson_
  exports.pruneEmptyChildren = (node) => {
    prune(node);
    return node;
  }

  prune = function(node) {
    if (node.children.length == 0) {
      delete node.children;
    } else {
      node.children.forEach(child => prune(child)
      )
    };
  }
})(PS["D3Tagless.Capabilities.MetaTree"] = PS["D3Tagless.Capabilities.MetaTree"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Capabilities.MetaTree"] = $PS["D3Tagless.Capabilities.MetaTree"] || {};
  var exports = $PS["D3Tagless.Capabilities.MetaTree"];
  var $foreign = $PS["D3Tagless.Capabilities.MetaTree"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Selection = $PS["D3.Selection"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var AttachNode = (function () {
      function AttachNode(value0) {
          this.value0 = value0;
      };
      AttachNode.create = function (value0) {
          return new AttachNode(value0);
      };
      return AttachNode;
  })();
  var SelectUnderNode = (function () {
      function SelectUnderNode(value0) {
          this.value0 = value0;
      };
      SelectUnderNode.create = function (value0) {
          return new SelectUnderNode(value0);
      };
      return SelectUnderNode;
  })();
  var AppendNode = (function () {
      function AppendNode(value0) {
          this.value0 = value0;
      };
      AppendNode.create = function (value0) {
          return new AppendNode(value0);
      };
      return AppendNode;
  })();
  var FilterNode = (function () {
      function FilterNode(value0) {
          this.value0 = value0;
      };
      FilterNode.create = function (value0) {
          return new FilterNode(value0);
      };
      return FilterNode;
  })();
  var ModifyNode = (function () {
      function ModifyNode(value0) {
          this.value0 = value0;
      };
      ModifyNode.create = function (value0) {
          return new ModifyNode(value0);
      };
      return ModifyNode;
  })();
  var JoinSimpleNode = (function () {
      function JoinSimpleNode(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      JoinSimpleNode.create = function (value0) {
          return function (value1) {
              return new JoinSimpleNode(value0, value1);
          };
      };
      return JoinSimpleNode;
  })();
  var UpdateJoinNode = (function () {
      function UpdateJoinNode(value0) {
          this.value0 = value0;
      };
      UpdateJoinNode.create = function (value0) {
          return new UpdateJoinNode(value0);
      };
      return UpdateJoinNode;
  })();
  var OpenJoinNode = (function () {
      function OpenJoinNode(value0) {
          this.value0 = value0;
      };
      OpenJoinNode.create = function (value0) {
          return new OpenJoinNode(value0);
      };
      return OpenJoinNode;
  })();
  var JoinSimpleWithKeyFunctionNode = (function () {
      function JoinSimpleWithKeyFunctionNode(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      JoinSimpleWithKeyFunctionNode.create = function (value0) {
          return function (value1) {
              return new JoinSimpleWithKeyFunctionNode(value0, value1);
          };
      };
      return JoinSimpleWithKeyFunctionNode;
  })();
  var SplitJoinCloseWithKeyFunctionNode = (function () {
      function SplitJoinCloseWithKeyFunctionNode(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SplitJoinCloseWithKeyFunctionNode.create = function (value0) {
          return function (value1) {
              return new SplitJoinCloseWithKeyFunctionNode(value0, value1);
          };
      };
      return SplitJoinCloseWithKeyFunctionNode;
  })();
  var OnNode = (function () {
      function OnNode(value0) {
          this.value0 = value0;
      };
      OnNode.create = function (value0) {
          return new OnNode(value0);
      };
      return OnNode;
  })();
  var AttrNode = (function () {
      function AttrNode(value0) {
          this.value0 = value0;
      };
      AttrNode.create = function (value0) {
          return new AttrNode(value0);
      };
      return AttrNode;
  })();
  var OrderNode = (function () {
      function OrderNode(value0) {
          this.value0 = value0;
      };
      OrderNode.create = function (value0) {
          return new OrderNode(value0);
      };
      return OrderNode;
  })();
  var OnEventNode = (function () {
      function OnEventNode(value0) {
          this.value0 = value0;
      };
      OnEventNode.create = function (value0) {
          return new OnEventNode(value0);
      };
      return OnEventNode;
  })();
  var TransitionNode = (function () {
      function TransitionNode(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TransitionNode.create = function (value0) {
          return function (value1) {
              return new TransitionNode(value0, value1);
          };
      };
      return TransitionNode;
  })();
  var RemoveNode = (function () {
      function RemoveNode() {

      };
      RemoveNode.value = new RemoveNode();
      return RemoveNode;
  })();
  var ScriptTree = (function () {
      function ScriptTree(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ScriptTree.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ScriptTree(value0, value1, value2);
              };
          };
      };
      return ScriptTree;
  })();
  var tag = function (s) {
      return "<" + (s + ">");
  }; 
  var showAsSymbol = function (v) {
      if (v instanceof Empty) {
          return {
              name: "Empty",
              symbol: "",
              param1: "",
              param2: ""
          };
      };
      if (v instanceof RemoveNode) {
          return {
              name: "Remove",
              symbol: "x",
              param1: "",
              param2: ""
          };
      };
      if (v instanceof AttachNode) {
          return {
              name: "Attach",
              symbol: "a",
              param1: "",
              param2: ""
          };
      };
      if (v instanceof SelectUnderNode) {
          return {
              name: "SelectUnder",
              symbol: "s",
              param1: tag(v.value0),
              param2: ""
          };
      };
      if (v instanceof AppendNode) {
          return {
              name: "Append",
              symbol: "+",
              param1: tag(Data_Show.show(D3_Data_Types.showElement)(v.value0)),
              param2: ""
          };
      };
      if (v instanceof FilterNode) {
          return {
              name: "Filter",
              symbol: "/",
              param1: tag(v.value0),
              param2: ""
          };
      };
      if (v instanceof ModifyNode) {
          return {
              name: "Modify",
              symbol: "->",
              param1: "",
              param2: ""
          };
      };
      if (v instanceof JoinSimpleNode) {
          return {
              name: "JoinSimple",
              symbol: "<+>",
              param1: tag(Data_Show.show(D3_Data_Types.showElement)(v.value0)),
              param2: ""
          };
      };
      if (v instanceof UpdateJoinNode) {
          return {
              name: "SplitJoinClose",
              symbol: "<+>",
              param1: tag(Data_Show.show(D3_Data_Types.showElement)(v.value0)),
              param2: ""
          };
      };
      if (v instanceof OpenJoinNode) {
          return {
              name: "SplitJoinClose",
              symbol: "<+>",
              param1: tag(v.value0),
              param2: ""
          };
      };
      if (v instanceof JoinSimpleWithKeyFunctionNode) {
          return {
              name: "JoinSimpleK",
              symbol: "<+>",
              param1: tag(Data_Show.show(D3_Data_Types.showElement)(v.value0)),
              param2: ""
          };
      };
      if (v instanceof SplitJoinCloseWithKeyFunctionNode) {
          return {
              name: "SplitJoinCloseK",
              symbol: "<+>",
              param1: tag(Data_Show.show(D3_Data_Types.showElement)(v.value0)),
              param2: ""
          };
      };
      if (v instanceof OnNode && v.value0 instanceof D3_Selection.Zoom) {
          return {
              name: "Zoom",
              symbol: "z",
              param1: "",
              param2: ""
          };
      };
      if (v instanceof OnNode && v.value0 instanceof D3_Selection.Drag) {
          return {
              name: "Drag",
              symbol: "drag",
              param1: "",
              param2: ""
          };
      };
      if (v instanceof AttrNode) {
          return {
              name: "Attr",
              symbol: "attr",
              param1: Data_Show.show(D3_Selection.showSelectionAttribute)(v.value0),
              param2: ""
          };
      };
      if (v instanceof OrderNode) {
          return {
              name: "Order",
              symbol: "order",
              param1: Data_Show.show(Data_Show.showString)(v.value0),
              param2: ""
          };
      };
      if (v instanceof OnEventNode) {
          return {
              name: "OnEvent",
              symbol: "on",
              param1: "",
              param2: ""
          };
      };
      if (v instanceof TransitionNode) {
          return {
              name: "Transition",
              symbol: "T",
              param1: "",
              param2: ""
          };
      };
      throw new Error("Failed pattern match at D3Tagless.Capabilities.MetaTree (line 69, column 3 - line 87, column 112): " + [ v.constructor.name ]);
  };
  var scriptTreeToJSON = function (v) {
      var go = function (id) {
          var children = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Array.filter(function (v1) {
              return v1.value0 === id;
          })(v.value2));
          var v1 = showAsSymbol(Data_Maybe.fromMaybe(Empty.value)(Data_Map_Internal.lookup(Data_Ord.ordInt)(id)(v.value1)));
          return {
              name: v1.name,
              symbol: v1.symbol,
              param1: v1.param1,
              param2: v1.param2,
              children: Data_Functor.map(Data_Functor.functorArray)(go)(children)
          };
      };
      return $foreign.pruneEmptyChildren(go(0));
  };
  var monadStateD3MetaTreeM = Control_Monad_State_Trans.monadStateStateT(Effect.monadEffect);          
  var monadD3MetaTreeM = Control_Monad_State_Trans.monadStateT(Effect.monadEffect);
  var initialMetaTree = new ScriptTree(0, Data_Map_Internal.empty, [  ]);
  var runMetaTree = function (v) {
      return Control_Monad_State_Trans.runStateT(v)(initialMetaTree);
  };                                                                                     
  var bindD3MetaTreeM = Control_Monad_State_Trans.bindStateT(Effect.monadEffect);  
  var applicativeD3MetaTreeM = Control_Monad_State_Trans.applicativeStateT(Effect.monadEffect);
  var insertInScriptTree = function (parentID) {
      return function (v) {
          if (v instanceof TransitionNode) {
              return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(Control_Monad_State_Class.modify_(monadStateD3MetaTreeM)(function (s) {
                      return new ScriptTree(v1.value0 + 1 | 0, Data_Map_Internal.insert(Data_Ord.ordInt)(v1.value0)(v)(v1.value1), Data_Array.cons(new Data_Tuple.Tuple(parentID, v1.value0 + 1 | 0))(v1.value2));
                  }))(function () {
                      return Control_Applicative.pure(applicativeD3MetaTreeM)(Data_Unit.unit);
                  });
              });
          };
          return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(Control_Monad_State_Class.modify_(monadStateD3MetaTreeM)(function (s) {
                  return new ScriptTree(v1.value0 + 1 | 0, Data_Map_Internal.insert(Data_Ord.ordInt)(v1.value0)(v)(v1.value1), Data_Array.cons(new Data_Tuple.Tuple(parentID, v1.value0 + 1 | 0))(v1.value2));
              }))(function () {
                  return Control_Applicative.pure(applicativeD3MetaTreeM)(Data_Unit.unit);
              });
          });
      };
  };
  var d3Tagless = new D3Tagless_Capabilities.SelectionM(function () {
      return monadD3MetaTreeM;
  }, function (nodeID) {
      return function (element) {
          return function (attributes) {
              return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(nodeID)(new AppendNode(element)))(function () {
                  return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v) {
                      return Control_Applicative.pure(applicativeD3MetaTreeM)(v.value0);
                  });
              });
          };
      };
  }, function (selector) {
      return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(0)(new AttachNode(selector)))(function () {
          return Control_Applicative.pure(applicativeD3MetaTreeM)(1);
      });
  }, function (nodeID) {
      return function (selector) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(nodeID)(new FilterNode(selector)))(function () {
              return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v) {
                  return Control_Applicative.pure(applicativeD3MetaTreeM)(v.value0);
              });
          });
      };
  }, function (a) {
      return function (b) {
          return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v) {
              return Control_Applicative.pure(applicativeD3MetaTreeM)(v.value0);
          });
      };
  }, function (nodeID) {
      return function (behavior) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(nodeID)(new OnNode(behavior)))(function () {
              return Control_Applicative.pure(applicativeD3MetaTreeM)(Data_Unit.unit);
          });
      };
  }, function (selection) {
      return function (selector) {
          return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v) {
              return Control_Applicative.pure(applicativeD3MetaTreeM)(v.value0);
          });
      };
  }, function (nodeID) {
      return function (selector) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(nodeID)(new SelectUnderNode(selector)))(function () {
              return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v) {
                  return Control_Applicative.pure(applicativeD3MetaTreeM)(v.value0);
              });
          });
      };
  }, function (nodeID) {
      return function (attributes) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(nodeID)(new ModifyNode(attributes)))(function () {
              return Control_Applicative.pure(applicativeD3MetaTreeM)(Data_Unit.unit);
          });
      };
  }, function (nodeID) {
      return function (e) {
          return function (ds) {
              return function (k) {
                  return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(nodeID)(new JoinSimpleWithKeyFunctionNode(e, k)))(function () {
                          return Control_Applicative.pure(applicativeD3MetaTreeM)(v.value0);
                      });
                  });
              };
          };
      };
  }, function (nodeID) {
      return function (e) {
          return function (ds) {
              return function (k) {
                  return Control_Bind.bind(bindD3MetaTreeM)(Control_Monad_State_Class.get(monadStateD3MetaTreeM))(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(bindD3MetaTreeM)(insertInScriptTree(nodeID)(new UpdateJoinNode(e)))(function () {
                          return Control_Applicative.pure(applicativeD3MetaTreeM)({
                              enter: v.value0,
                              exit: v.value0,
                              update: v.value0
                          });
                      });
                  });
              };
          };
      };
  });
  exports["scriptTreeToJSON"] = scriptTreeToJSON;
  exports["runMetaTree"] = runMetaTree;
  exports["bindD3MetaTreeM"] = bindD3MetaTreeM;
  exports["d3Tagless"] = d3Tagless;
})(PS);
(function(exports) {
   
  exports.showAddTransition_ = selection => transition => {
    if (transition.name == '') {
      const statement1 = `\td3addTransition: ${selection}.transition(${transition})`
      var statement2 = ''
      var statement3 = ''
      if (transition.duration != 0) {
        statement2 = `transition.duration(${transition.duration})`
      }
      if (transition.delay != 0) {
        statement3 = `\t\ttransition.delay(${transition.delay})`
      }
      return statement1 + statement2 + statement3
    } else {
      return `\td3addNamedTransition: ${selection}.transition(${transition})`
    }
  }
  exports.showRemoveSelection_ = selection => {
    return `\td3Remove: ${selection}.remove()`
  }
  exports.showSetAttr_ = name => value => selection => {
    return `\t${selection}.attr(${name}, ${value})`
  }
  exports.showSetText_ = value => selection => {
    return `\t${selection}.text(${value})`
  }
  exports.showSetHTML_ = value => selection => {
    return `\t${selection}.html(${value})`
  }
  exports.showSetProperty_ = value => selection => {
    return `\t${selection}.property(${value})`
  }
  exports.showSetOrdering_ = ordering => selection => {
    return `\t${selection}.${ordering}()`
  }
})(PS["D3Tagless.Capabilities.String"] = PS["D3Tagless.Capabilities.String"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Capabilities.String"] = $PS["D3Tagless.Capabilities.String"] || {};
  var exports = $PS["D3Tagless.Capabilities.String"];
  var $foreign = $PS["D3Tagless.Capabilities.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Selection = $PS["D3.Selection"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Array = $PS["Data.Array"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var runPrinter = function (v) {
      return function (initialString) {
          return Control_Monad_State_Trans.runStateT(v)(initialString);
      };
  };
  var monadStateD3PrinterM = Control_Monad_State_Trans.monadStateStateT(Effect.monadEffect);          
  var monadD3PrinterM = Control_Monad_State_Trans.monadStateT(Effect.monadEffect);      
  var bindD3PrinterM = Control_Monad_State_Trans.bindStateT(Effect.monadEffect);
  var applySelectionAttributeString = function (selection) {
      return function (v) {
          if (v instanceof D3_Selection.AttrT) {
              return $foreign.showSetAttr_(v.value0.value0)(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection);
          };
          if (v instanceof D3_Selection.TextT) {
              return $foreign.showSetText_(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection);
          };
          if (v instanceof D3_Selection.PropertyT) {
              return $foreign.showSetProperty_(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection);
          };
          if (v instanceof D3_Selection.HTMLT) {
              return $foreign.showSetHTML_(D3_Attributes_Instances.unboxAttr(v.value0.value1))(selection);
          };
          if (v instanceof D3_Selection.RemoveT) {
              return $foreign.showRemoveSelection_(selection);
          };
          if (v instanceof D3_Selection.OrderingT) {
              return $foreign.showSetOrdering_(Data_Show.show(D3_Selection.showOrderingAttribute)(v.value0))(selection);
          };
          if (v instanceof D3_Selection.TransitionT) {
              var tString = $foreign.showAddTransition_(selection)(v.value1);
              return Data_Array.foldl(applySelectionAttributeString)(tString)(v.value0);
          };
          if (v instanceof D3_Selection.OnT) {
              return Data_Show.show(Data_Show.showString)("event handler for ") + (Data_Show.show(D3_Data_Types.showMouseEvent)(v.value0) + " has been set");
          };
          if (v instanceof D3_Selection["OnT'"]) {
              return Data_Show.show(Data_Show.showString)("effectful event handler for ") + (Data_Show.show(D3_Data_Types.showMouseEvent)(v.value0) + " has been set");
          };
          throw new Error("Failed pattern match at D3Tagless.Capabilities.String (line 80, column 3 - line 98, column 75): " + [ v.constructor.name ]);
      };
  };                                                                              
  var applicativeD3PrinterM = Control_Monad_State_Trans.applicativeStateT(Effect.monadEffect);
  var d3Tagless = new D3Tagless_Capabilities.SelectionM(function () {
      return monadD3PrinterM;
  }, function (selection) {
      return function (element) {
          return function (attributes) {
              var attributeString = Data_Array.foldl(applySelectionAttributeString)(selection)(attributes);
              return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
                  return s + ("\x0aappending " + (Data_Show.show(D3_Data_Types.showElement)(element) + (" to " + (selection + ("\x0a" + attributeString)))));
              }))(function () {
                  return Control_Applicative.pure(applicativeD3PrinterM)("append");
              });
          };
      };
  }, function (selector) {
      return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
          return s + ("\x0aattaching to " + (selector + " in DOM\x0a"));
      }))(function () {
          return Control_Applicative.pure(applicativeD3PrinterM)("attach");
      });
  }, function (selection) {
      return function (selector) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
              return s + ("\x0afiltering selection using " + (Data_Show.show(Data_Show.showString)(selector) + "\x0a"));
          }))(function () {
              return Control_Applicative.pure(applicativeD3PrinterM)("filter");
          });
      };
  }, function (a) {
      return function (b) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
              return s + ("merging selections" + "\x0a");
          }))(function () {
              return Control_Applicative.pure(applicativeD3PrinterM)("merge");
          });
      };
  }, function (selection) {
      return function (v) {
          if (v instanceof D3_Selection.Drag) {
              return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
                  return s + ("\x0aadding drag behavior to " + selection);
              }))(function () {
                  return Control_Applicative.pure(applicativeD3PrinterM)(Data_Unit.unit);
              });
          };
          if (v instanceof D3_Selection.Zoom) {
              return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
                  return s + ("\x0aadding drag behavior to " + selection);
              }))(function () {
                  return Control_Applicative.pure(applicativeD3PrinterM)(Data_Unit.unit);
              });
          };
          throw new Error("Failed pattern match at D3Tagless.Capabilities.String (line 30, column 1 - line 74, column 60): " + [ selection.constructor.name, v.constructor.name ]);
      };
  }, function (selection) {
      return function (selector) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
              return s + ("\x0aopening a selection using " + Data_Show.show(Data_Show.showString)(selector));
          }))(function () {
              return Control_Applicative.pure(applicativeD3PrinterM)("openSelection");
          });
      };
  }, function (selection) {
      return function (selector) {
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
              return s + ("\x0asub-selection " + (selector + "\x0a"));
          }))(function () {
              return Control_Applicative.pure(applicativeD3PrinterM)("attach");
          });
      };
  }, function (selection) {
      return function (attributes) {
          var attributeString = Data_Array.foldl(applySelectionAttributeString)(selection)(attributes);
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
              return s + ("\x0amodifying " + (selection + ("\x0a" + attributeString)));
          }))(function () {
              return Control_Applicative.pure(applicativeD3PrinterM)(Data_Unit.unit);
          });
      };
  }, function (selection) {
      return function (e) {
          return function (ds) {
              return function (k) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
                      return s + ("\x0aentering a " + (Data_Show.show(D3_Data_Types.showElement)(e) + " for each datum"));
                  }))(function () {
                      return Control_Applicative.pure(applicativeD3PrinterM)("join");
                  });
              };
          };
      };
  }, function (selection) {
      return function (e) {
          return function (ds) {
              return function (k) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(bindD3PrinterM)(Control_Monad_State_Class.modify_(monadStateD3PrinterM)(function (s) {
                      return s + ("\x0aentering a " + (Data_Show.show(D3_Data_Types.showElement)(e) + " for each datum"));
                  }))(function () {
                      return Control_Applicative.pure(applicativeD3PrinterM)({
                          enter: "enter",
                          exit: "exit",
                          update: "update"
                      });
                  });
              };
          };
      };
  });
  exports["runPrinter"] = runPrinter;
  exports["bindD3PrinterM"] = bindD3PrinterM;
  exports["d3Tagless"] = d3Tagless;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Examples.Tree.Configure"] = $PS["D3.Examples.Tree.Configure"] || {};
  var exports = $PS["D3.Examples.Tree.Configure"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Examples_Tree_Draw = $PS["D3.Examples.Tree.Draw"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Layouts_Hierarchical = $PS["D3.Layouts.Hierarchical"];
  var D3_Scales = $PS["D3.Scales"];
  var D3Tagless_Capabilities_MetaTree = $PS["D3Tagless.Capabilities.MetaTree"];
  var D3Tagless_Capabilities_String = $PS["D3Tagless.Capabilities.String"];
  var D3Tagless_Instance_Selection = $PS["D3Tagless.Instance.Selection"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var $$Math = $PS["Math"];
  var Utility = $PS["Utility"];                
  var rotateRadialLabels = function (d) {
      return "rotate(" + ((function () {
          var $7 = D3_Examples_Tree_Draw.treeDatum_.onRHS(D3_Data_Tree.Radial.value)(d);
          if ($7) {
              return "180";
          };
          return "0";
      })() + ")");
  };
  var radialTranslate = function (d) {
      return "translate(" + (Data_Show.show(Data_Show.showNumber)(D3_Examples_Tree_Draw.treeDatum_.y(d)) + ",0)");
  };
  var radialRotate = function (x) {
      return Data_Show.show(Data_Show.showNumber)((x * 180.0) / $$Math.pi - 90.0);
  };
  var radialRotateCommon = function (d) {
      return "rotate(" + (radialRotate(D3_Examples_Tree_Draw.treeDatum_.x(d)) + ")");
  };
  var positionXYreflected = function (d) {
      return "translate(" + (Data_Show.show(Data_Show.showNumber)(D3_Examples_Tree_Draw.treeDatum_.y(d)) + ("," + (Data_Show.show(Data_Show.showNumber)(D3_Examples_Tree_Draw.treeDatum_.x(d)) + ")")));
  };
  var positionXY = function (d) {
      return "translate(" + (Data_Show.show(Data_Show.showNumber)(D3_Examples_Tree_Draw.treeDatum_.x(d)) + ("," + (Data_Show.show(Data_Show.showNumber)(D3_Examples_Tree_Draw.treeDatum_.y(d)) + ")")));
  };
  var configureAndRunScript = function (dictBind) {
      return function (dictSelectionM) {
          return function (v) {
              return function (model) {
                  return function (selector) {
                      var svg = {
                          width: v.value0,
                          height: v.value1
                      };
                      var root = D3_FFI.hierarchyFromJSON_(model.json);
                      var numberOfLevels = D3_FFI.hNodeHeight_(root) + 1.0;
                      var spacing = (function () {
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return {
                                  interChild: 10.0,
                                  interLevel: svg.width / numberOfLevels
                              };
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return {
                                  interChild: 10.0,
                                  interLevel: svg.height / numberOfLevels
                              };
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return {
                                  interChild: 0.0,
                                  interLevel: 0.0
                              };
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return {
                                  interChild: 10.0,
                                  interLevel: svg.width / numberOfLevels
                              };
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return {
                                  interChild: 10.0,
                                  interLevel: svg.height / numberOfLevels
                              };
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return {
                                  interChild: 0.0,
                                  interLevel: 0.0
                              };
                          };
                          throw new Error("Failed pattern match at D3.Examples.Tree.Configure (line 67, column 7 - line 74, column 71): " + [ model.treeType.constructor.name, model.treeLayout.constructor.name ]);
                      })();
                      var layout = (function () {
                          var $13 = Data_Eq.eq(D3_Data_Tree.eqTreeLayout)(model.treeLayout)(D3_Data_Tree.Radial.value);
                          if ($13) {
                              return D3_FFI.treeSetSeparation_(D3_FFI.treeSetSize_(D3_FFI.getLayout(model.treeType))([ 2.0 * $$Math.pi, svg.width / 2.0 - 100.0 ]))(D3_Layouts_Hierarchical.radialSeparation);
                          };
                          return D3_FFI.treeSetNodeSize_(D3_FFI.getLayout(model.treeType))([ spacing.interChild, spacing.interLevel ]);
                      })();
                      var laidOutRoot_ = D3_FFI.runLayoutFn_(layout)(root);
                      var v1 = D3_FFI.treeMinMax_(laidOutRoot_);
                      var yExtent = $$Math.abs(v1.yMax - v1.yMin);
                      var xExtent = $$Math.abs(v1.xMax - v1.xMin);
                      var vtreeYOffset = $$Math.abs(v.value1 - yExtent) / 2.0;
                      var radialExtent = 2.0 * v1.yMax;
                      var pad = function (n) {
                          return n * 1.2;
                      };
                      var nodeTransform = (function () {
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return [ D3_Attributes_Sugar.transform([ positionXYreflected ]) ];
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return [ D3_Attributes_Sugar.transform([ positionXY ]) ];
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return [ D3_Attributes_Sugar.transform([ radialRotateCommon, radialTranslate, rotateRadialLabels ]) ];
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return [ D3_Attributes_Sugar.transform([ positionXYreflected ]) ];
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return [ D3_Attributes_Sugar.transform([ positionXY ]) ];
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return [ D3_Attributes_Sugar.transform([ radialRotateCommon, radialTranslate, rotateRadialLabels ]) ];
                          };
                          throw new Error("Failed pattern match at D3.Examples.Tree.Configure (line 116, column 7 - line 123, column 108): " + [ model.treeType.constructor.name, model.treeLayout.constructor.name ]);
                      })();
                      var linkPath = (function () {
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return D3_Layouts_Hierarchical.horizontalClusterLink(spacing.interLevel);
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return D3_Layouts_Hierarchical.verticalClusterLink(spacing.interLevel);
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return D3_Layouts_Hierarchical.radialLink(D3_Examples_Tree_Draw.treeDatum_.x)(D3_Examples_Tree_Draw.treeDatum_.y);
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return D3_Layouts_Hierarchical.horizontalLink;
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return D3_Layouts_Hierarchical.verticalLink;
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return D3_Layouts_Hierarchical.radialLink(D3_Examples_Tree_Draw.treeDatum_.x)(D3_Examples_Tree_Draw.treeDatum_.y);
                          };
                          throw new Error("Failed pattern match at D3.Examples.Tree.Configure (line 106, column 7 - line 113, column 71): " + [ model.treeType.constructor.name, model.treeLayout.constructor.name ]);
                      })();
                      var viewbox = (function () {
                          if (model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return [ D3_Attributes_Sugar.viewBox(v1.xMin)(-vtreeYOffset)(pad(xExtent))(pad(yExtent)), D3_Attributes_Sugar.preserveAspectRatio(new D3_Attributes_Sugar.AspectRatio(D3_Attributes_Sugar.XMid.value, D3_Attributes_Sugar.YMid.value, D3_Attributes_Sugar.Meet.value)) ];
                          };
                          if (model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return [ D3_Attributes_Sugar.viewBox(-xExtent * 0.1)(pad(v1.xMin))(pad(yExtent))(pad(xExtent)), D3_Attributes_Sugar.preserveAspectRatio(new D3_Attributes_Sugar.AspectRatio(D3_Attributes_Sugar.XMin.value, D3_Attributes_Sugar.YMid.value, D3_Attributes_Sugar.Meet.value)) ];
                          };
                          if (model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return [ D3_Attributes_Sugar.viewBox(-v1.yMax * 1.2)(-v1.yMax * 1.2)(radialExtent * 1.2)(radialExtent * 1.2), D3_Attributes_Sugar.preserveAspectRatio(new D3_Attributes_Sugar.AspectRatio(D3_Attributes_Sugar.XMin.value, D3_Attributes_Sugar.YMin.value, D3_Attributes_Sugar.Meet.value)) ];
                          };
                          throw new Error("Failed pattern match at D3.Examples.Tree.Configure (line 97, column 7 - line 103, column 78): " + [ model.treeType.constructor.name, model.treeLayout.constructor.name ]);
                      })();
                      var color = D3_Scales.d3SchemeCategory10N_((function () {
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return 1.0;
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return 2.0;
                          };
                          if (model.treeType instanceof D3_Data_Tree.Dendrogram && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return 3.0;
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Horizontal) {
                              return 4.0;
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Vertical) {
                              return 5.0;
                          };
                          if (model.treeType instanceof D3_Data_Tree.TidyTree && model.treeLayout instanceof D3_Data_Tree.Radial) {
                              return 6.0;
                          };
                          throw new Error("Failed pattern match at D3.Examples.Tree.Configure (line 126, column 7 - line 133, column 38): " + [ model.treeType.constructor.name, model.treeLayout.constructor.name ]);
                      })());
                      return D3_Examples_Tree_Draw.draw(dictBind)(dictSelectionM)({
                          spacing: spacing,
                          viewbox: viewbox,
                          selector: selector,
                          linkPath: linkPath,
                          nodeTransform: nodeTransform,
                          color: color,
                          layout: model.treeLayout,
                          svg: svg
                      })(laidOutRoot_);
                  };
              };
          };
      };
  };
  var drawTree = function (treeModel) {
      return function (selector) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
              var widthHeight = Utility.getWindowWidthHeight();
              var v = D3Tagless_Instance_Selection.runD3M(configureAndRunScript(D3Tagless_Instance_Selection.bindD3M)(D3Tagless_Instance_Selection.d3TaglessD3M)(widthHeight)(treeModel)(selector))();
              return Data_Unit.unit;
          });
      };
  };
  var getMetaTreeJSON = function (treeModel) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
          var widthHeight = Utility.getWindowWidthHeight();
          var metaScript = D3Tagless_Capabilities_MetaTree.runMetaTree(configureAndRunScript(D3Tagless_Capabilities_MetaTree.bindD3MetaTreeM)(D3Tagless_Capabilities_MetaTree.d3Tagless)(widthHeight)(treeModel)("MetaTree root> "))();
          var v = Data_Tuple.snd(metaScript);
          var v1 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value1);
          var treeified = Data_Tuple.snd(metaScript);
          return D3Tagless_Capabilities_MetaTree.scriptTreeToJSON(treeified);
      });
  };
  var getPrintTree = function (treeModel) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
          var widthHeight = Utility.getWindowWidthHeight();
          var printedScript = D3Tagless_Capabilities_String.runPrinter(configureAndRunScript(D3Tagless_Capabilities_String.bindD3PrinterM)(D3Tagless_Capabilities_String.d3Tagless)(widthHeight)(treeModel)("Printer Interpreter Root> "))("Tree Script")();
          return Data_Tuple.snd(printedScript);
      });
  };
  exports["getPrintTree"] = getPrintTree;
  exports["getMetaTreeJSON"] = getMetaTreeJSON;
  exports["drawTree"] = drawTree;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Simulation.Config"] = $PS["D3.Simulation.Config"] || {};
  var exports = $PS["D3.Simulation.Config"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var y = function (dictToAttr) {
      var $12 = D3_Attributes_Instances.AttributeSetter.create("y");
      var $13 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($14) {
          return D3_Simulation_Types.ForceT($12($13($14)));
      };
  };
  var x = function (dictToAttr) {
      var $15 = D3_Attributes_Instances.AttributeSetter.create("x");
      var $16 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($17) {
          return D3_Simulation_Types.ForceT($15($16($17)));
      };
  };
  var theta = function (dictToAttr) {
      var $18 = D3_Attributes_Instances.AttributeSetter.create("theta");
      var $19 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($20) {
          return D3_Simulation_Types.ForceT($18($19($20)));
      };
  };   
  var strength = function (dictToAttr) {
      var $23 = D3_Attributes_Instances.AttributeSetter.create("strength");
      var $24 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($25) {
          return D3_Simulation_Types.ForceT($23($24($25)));
      };
  };
  var radius = function (dictToAttr) {
      var $26 = D3_Attributes_Instances.AttributeSetter.create("radius");
      var $27 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($28) {
          return D3_Simulation_Types.ForceT($26($27($28)));
      };
  };
  var numKey = (function () {
      var $29 = D3_Attributes_Instances.AttributeSetter.create("keyFn");
      return function ($30) {
          return D3_Simulation_Types.ForceT($29(D3_Attributes_Instances.NumberAttr.create(D3_Attributes_Instances.Fn.create($30))));
      };
  })();
  var distanceMin = function (dictToAttr) {
      var $43 = D3_Attributes_Instances.AttributeSetter.create("distanceMin");
      var $44 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($45) {
          return D3_Simulation_Types.ForceT($43($44($45)));
      };
  };
  var distanceMax = function (dictToAttr) {
      var $46 = D3_Attributes_Instances.AttributeSetter.create("distanceMax");
      var $47 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($48) {
          return D3_Simulation_Types.ForceT($46($47($48)));
      };
  };
  var distance = function (dictToAttr) {
      var $49 = D3_Attributes_Instances.AttributeSetter.create("distance");
      var $50 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($51) {
          return D3_Simulation_Types.ForceT($49($50($51)));
      };
  };
  exports["radius"] = radius;
  exports["strength"] = strength;
  exports["theta"] = theta;
  exports["distanceMin"] = distanceMin;
  exports["distanceMax"] = distanceMax;
  exports["x"] = x;
  exports["y"] = y;
  exports["distance"] = distance;
  exports["numKey"] = numKey;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.AffineTraversal"] = $PS["Data.Lens.AffineTraversal"] || {};
  var exports = $PS["Data.Lens.AffineTraversal"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var affineTraversal$prime = function (to) {
      return function (dictStrong) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(to)(function (v) {
                      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(v.value0)(v.value1);
                  })(Data_Profunctor_Strong.second(dictStrong)(Data_Profunctor_Choice.right(dictChoice)(pab)));
              };
          };
      };
  };
  var affineTraversal = function (set) {
      return function (pre) {
          return function (dictStrong) {
              return function (dictChoice) {
                  return affineTraversal$prime(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(set)(pre))(dictStrong)(dictChoice);
              };
          };
      };
  };
  exports["affineTraversal"] = affineTraversal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_AffineTraversal = $PS["Data.Lens.AffineTraversal"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var Index = function (ix) {
      this.ix = ix;
  }; 
  var indexMap = function (dictOrd) {
      return new Index(function (k) {
          return function (dictStrong) {
              return function (dictChoice) {
                  var set = function (s) {
                      return function (b) {
                          return Data_Map_Internal.update(dictOrd)(function (v) {
                              return new Data_Maybe.Just(b);
                          })(k)(s);
                      };
                  };
                  var pre = function (s) {
                      return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Data_Map_Internal.lookup(dictOrd)(k)(s));
                  };
                  return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
              };
          };
      });
  };
  exports["indexMap"] = indexMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.At"] = $PS["Data.Lens.At"] || {};
  var exports = $PS["Data.Lens.At"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var At = function (Index0, at) {
      this.Index0 = Index0;
      this.at = at;
  }; 
  var atMap = function (dictOrd) {
      return new At(function () {
          return Data_Lens_Index.indexMap(dictOrd);
      }, function (k) {
          return function (dictStrong) {
              return Data_Lens_Lens.lens(Data_Map_Internal.lookup(dictOrd)(k))(function (m) {
                  return Data_Maybe["maybe'"](function (v) {
                      return Data_Map_Internal["delete"](dictOrd)(k)(m);
                  })(function (v) {
                      return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                  });
              })(dictStrong);
          };
      });
  }; 
  var at = function (dict) {
      return dict.at;
  };
  exports["at"] = at;
  exports["atMap"] = atMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  var modifying = function (dictMonadState) {
      return function (p) {
          return function (f) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(over(p)(f)));
          };
      };
  };
  var assign = function (dictMonadState) {
      return function (p) {
          return function (b) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(set(p)(b)));
          };
      };
  };
  exports["set"] = set;
  exports["assign"] = assign;
  exports["modifying"] = modifying;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Simulation.Forces"] = $PS["D3.Simulation.Forces"] || {};
  var exports = $PS["D3.Simulation.Forces"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                                                                                                               
  var showType = function (v) {
      if (v instanceof D3_Simulation_Types.LinkForce) {
          return "linkForce";
      };
      if (v instanceof D3_Simulation_Types.RegularForce) {
          return Data_Show.show(D3_Simulation_Types.showRegularForceType)(v.value0);
      };
      throw new Error("Failed pattern match at D3.Simulation.Forces (line 33, column 3 - line 35, column 29): " + [ v.constructor.name ]);
  };
  var removeForceFromSimulation = function (v) {
      return function (simulation_) {
          if (v.type instanceof D3_Simulation_Types.RegularForce) {
              return D3_FFI.setAsNullForceInSimulation_(simulation_)(v.name);
          };
          if (v.type instanceof D3_Simulation_Types.LinkForce) {
              return D3_FFI.unsetLinks_(simulation_);
          };
          throw new Error("Failed pattern match at D3.Simulation.Forces (line 112, column 3 - line 115, column 46): " + [ v.type.constructor.name ]);
      };
  };
  var putStatusMap = function (forceStatusMap) {
      return function (forceMap) {
          var update = function (force) {
              var v = Data_Lens_Getter.view(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(Data_Lens_Getter.view(D3_Simulation_Types["_name"](Data_Lens_Internal_Forget.strongForget))(force))(Data_Lens_Internal_Forget.strongForget))(forceStatusMap);
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Lens_Setter.set(D3_Simulation_Types["_status"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Types.ForceDisabled.value)(force);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Lens_Setter.set(D3_Simulation_Types["_status"](Data_Profunctor_Strong.strongFn))(v.value0)(force);
              };
              throw new Error("Failed pattern match at D3.Simulation.Forces (line 27, column 7 - line 29, column 50): " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Map_Internal.functorMap)(update)(forceMap);
      };
  };
  var putForceInSimulation = function (v) {
      return function (simulation_) {
          if (v.type instanceof D3_Simulation_Types.RegularForce) {
              return D3_FFI.putForceInSimulation_(simulation_)(v.name)(v.force_);
          };
          if (v.type instanceof D3_Simulation_Types.LinkForce) {
              return D3_FFI.putForceInSimulation_(simulation_)(v.name)(v.force_);
          };
          throw new Error("Failed pattern match at D3.Simulation.Forces (line 103, column 3 - line 107, column 80): " + [ v.type.constructor.name ]);
      };
  };
  var initialize = function (dictFoldable) {
      return function (dictFunctor) {
          return function (forces) {
              return Data_Map_Internal.fromFoldable(Data_Ord.ordString)(dictFoldable)(Data_Functor.map(dictFunctor)(function (f) {
                  return new Data_Tuple.Tuple(Data_Lens_Getter.view(D3_Simulation_Types["_name"](Data_Lens_Internal_Forget.strongForget))(f), f);
              })(forces));
          };
      };
  };
  var createRegularForce_ = function (v) {
      if (v instanceof D3_Simulation_Types.ForceManyBody) {
          return D3_FFI.forceMany_(Data_Unit.unit);
      };
      if (v instanceof D3_Simulation_Types.ForceCenter) {
          return D3_FFI.forceCenter_(Data_Unit.unit);
      };
      if (v instanceof D3_Simulation_Types.ForceCollide) {
          return D3_FFI.forceCollideFn_(Data_Unit.unit);
      };
      if (v instanceof D3_Simulation_Types.ForceX) {
          return D3_FFI.forceX_(Data_Unit.unit);
      };
      if (v instanceof D3_Simulation_Types.ForceY) {
          return D3_FFI.forceY_(Data_Unit.unit);
      };
      if (v instanceof D3_Simulation_Types.ForceRadial) {
          return D3_FFI.forceRadial_(Data_Unit.unit);
      };
      throw new Error("Failed pattern match at D3.Simulation.Forces (line 167, column 23 - line 173, column 52): " + [ v.constructor.name ]);
  };
  var createForce_ = function (v) {
      if (v instanceof D3_Simulation_Types.RegularForce) {
          return createRegularForce_(v.value0);
      };
      if (v instanceof D3_Simulation_Types.LinkForce) {
          return D3_FFI.forceLink_(Data_Unit.unit);
      };
      throw new Error("Failed pattern match at D3.Simulation.Forces (line 161, column 3 - line 163, column 38): " + [ v.constructor.name ]);
  };
  var createLinkForce = function (f) {
      return function (cs) {
          return {
              type: D3_Simulation_Types.LinkForce.value,
              name: D3_FFI.linksForceName,
              status: D3_Simulation_Types.ForceDisabled.value,
              filter: f,
              attributes: cs,
              force_: createForce_(D3_Simulation_Types.LinkForce.value)
          };
      };
  };
  var createForce = function (l) {
      return function (t) {
          return function (f) {
              return function (cs) {
                  return {
                      type: t,
                      name: l,
                      status: D3_Simulation_Types.ForceDisabled.value,
                      filter: f,
                      attributes: cs,
                      force_: createForce_(t)
                  };
              };
          };
      };
  };
  var attrFilter = function (filter$prime) {
      return function (default$prime) {
          var addFilterToStatic = function (filter) {
              return function (value) {
                  return function ($$default) {
                      return function (d) {
                          var $37 = filter(d);
                          if ($37) {
                              return value;
                          };
                          return $$default;
                      };
                  };
              };
          };
          var addFilterToFn = function (filter) {
              return function (fn) {
                  return function ($$default) {
                      return function (d) {
                          var $38 = filter(d);
                          if ($38) {
                              return fn(d);
                          };
                          return $$default;
                      };
                  };
              };
          };
          return function (v) {
              if (v instanceof D3_Attributes_Instances.StringAttr && v.value0 instanceof D3_Attributes_Instances.Static) {
                  return new D3_Attributes_Instances.StringAttr(new D3_Attributes_Instances.Static(v.value0.value0));
              };
              if (v instanceof D3_Attributes_Instances.StringAttr && v.value0 instanceof D3_Attributes_Instances.Fn) {
                  return new D3_Attributes_Instances.StringAttr(new D3_Attributes_Instances.Fn(v.value0.value0));
              };
              if (v instanceof D3_Attributes_Instances.StringAttr && v.value0 instanceof D3_Attributes_Instances.FnI) {
                  return new D3_Attributes_Instances.StringAttr(new D3_Attributes_Instances.FnI(v.value0.value0));
              };
              if (v instanceof D3_Attributes_Instances.NumberAttr && v.value0 instanceof D3_Attributes_Instances.Static) {
                  return new D3_Attributes_Instances.NumberAttr(new D3_Attributes_Instances.Fn(addFilterToStatic(filter$prime)(v.value0.value0)(default$prime)));
              };
              if (v instanceof D3_Attributes_Instances.NumberAttr && v.value0 instanceof D3_Attributes_Instances.Fn) {
                  return new D3_Attributes_Instances.NumberAttr(new D3_Attributes_Instances.Fn(addFilterToFn(filter$prime)(v.value0.value0)(default$prime)));
              };
              if (v instanceof D3_Attributes_Instances.NumberAttr && v.value0 instanceof D3_Attributes_Instances.FnI) {
                  return new D3_Attributes_Instances.NumberAttr(new D3_Attributes_Instances.FnI(v.value0.value0));
              };
              if (v instanceof D3_Attributes_Instances.ArrayAttr && v.value0 instanceof D3_Attributes_Instances.Static) {
                  return new D3_Attributes_Instances.ArrayAttr(new D3_Attributes_Instances.Static(v.value0.value0));
              };
              if (v instanceof D3_Attributes_Instances.ArrayAttr && v.value0 instanceof D3_Attributes_Instances.Fn) {
                  return new D3_Attributes_Instances.ArrayAttr(new D3_Attributes_Instances.Fn(v.value0.value0));
              };
              if (v instanceof D3_Attributes_Instances.ArrayAttr && v.value0 instanceof D3_Attributes_Instances.FnI) {
                  return new D3_Attributes_Instances.ArrayAttr(new D3_Attributes_Instances.FnI(v.value0.value0));
              };
              throw new Error("Failed pattern match at D3.Simulation.Forces (line 212, column 3 - line 223, column 49): " + [ v.constructor.name ]);
          };
      };
  };
  var setForceAttr = function (force_) {
      return function (maybeFilter) {
          return function (v) {
              if (v.value0 === "strength") {
                  if (maybeFilter instanceof Data_Maybe.Nothing) {
                      return D3_FFI.setForceStrength_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
                  };
                  if (maybeFilter instanceof Data_Maybe.Just) {
                      return D3_FFI.setForceStrength_(force_)(D3_Attributes_Instances.unboxAttr(attrFilter(maybeFilter.value0.value1)(0.0)(v.value1)));
                  };
                  throw new Error("Failed pattern match at D3.Simulation.Forces (line 182, column 7 - line 186, column 82): " + [ maybeFilter.constructor.name ]);
              };
              if (v.value0 === "radius") {
                  return D3_FFI.setForceRadius_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              if (v.value0 === "theta") {
                  return D3_FFI.setForceTheta_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              if (v.value0 === "distanceMin") {
                  return D3_FFI.setForceDistanceMin_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              if (v.value0 === "distanceMax") {
                  return D3_FFI.setForceDistanceMax_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              if (v.value0 === "iterations") {
                  return D3_FFI.setForceIterations_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              if (v.value0 === "x") {
                  return D3_FFI.setForceX_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              if (v.value0 === "y") {
                  return D3_FFI.setForceY_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              if (v.value0 === "distance") {
                  return D3_FFI.setForceDistance_(force_)(D3_Attributes_Instances.unboxAttr(v.value1));
              };
              return force_;
          };
      };
  };
  var updateForceInSimulation = function (simulation) {
      return function (force) {
          var f = Data_Newtype.unwrap()(force);
          var v = Data_Functor.map(Data_Functor.functorArray)(function (a) {
              return setForceAttr(f.force_)(f.filter)(Data_Newtype.unwrap()(a));
          })(f.attributes);
          if (f.status instanceof D3_Simulation_Types.ForceActive) {
              return putForceInSimulation(force)(simulation);
          };
          if (f.status instanceof D3_Simulation_Types.ForceDisabled) {
              return removeForceFromSimulation(force)(simulation);
          };
          throw new Error("Failed pattern match at D3.Simulation.Forces (line 96, column 5 - line 98, column 66): " + [ f.status.constructor.name ]);
      };
  };
  exports["initialize"] = initialize;
  exports["putStatusMap"] = putStatusMap;
  exports["showType"] = showType;
  exports["createForce"] = createForce;
  exports["createLinkForce"] = createLinkForce;
  exports["updateForceInSimulation"] = updateForceInSimulation;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3.Simulation.Functions"] = $PS["D3.Simulation.Functions"] || {};
  var exports = $PS["D3.Simulation.Functions"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Selection = $PS["D3.Selection"];
  var D3_Simulation_Forces = $PS["D3.Simulation.Forces"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var D3_Zoom = $PS["D3.Zoom"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Debug = $PS["Debug"];
  var simulationStop = function (dictMonadState) {
      return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
          var v = D3_FFI.stopSimulation_(handle);
          return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(Data_Unit.unit);
      });
  };
  var simulationStart = function (dictMonadState) {
      return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
          return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadState.Monad0()).Bind1())(Data_Lens_Setter.modifying(dictMonadState)((function () {
              var $100 = D3_Simulation_Types["_d3Simulation"](Data_Profunctor_Strong.strongFn);
              var $101 = D3_Simulation_Types["_alpha"](Data_Profunctor_Strong.strongFn);
              return function ($102) {
                  return $100($101($102));
              };
          })())(Data_Function["const"](1.0)))(function () {
              return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(D3_FFI.startSimulation_(handle));
          });
      });
  };
  var simulationSetVariable = function (dictMonadState) {
      return function (v) {
          return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
              if (v instanceof D3_Simulation_Types.Alpha) {
                  var v1 = D3_FFI.setAlpha_(handle)(v.value0);
                  return Data_Lens_Setter.modifying(dictMonadState)((function () {
                      var $103 = D3_Simulation_Types["_d3Simulation"](Data_Profunctor_Strong.strongFn);
                      var $104 = D3_Simulation_Types["_alpha"](Data_Profunctor_Strong.strongFn);
                      return function ($105) {
                          return $103($104($105));
                      };
                  })())(Data_Function["const"](v.value0));
              };
              if (v instanceof D3_Simulation_Types.AlphaTarget) {
                  var v1 = D3_FFI.setAlphaTarget_(handle)(v.value0);
                  return Data_Lens_Setter.modifying(dictMonadState)((function () {
                      var $106 = D3_Simulation_Types["_d3Simulation"](Data_Profunctor_Strong.strongFn);
                      var $107 = D3_Simulation_Types["_alphaTarget"](Data_Profunctor_Strong.strongFn);
                      return function ($108) {
                          return $106($107($108));
                      };
                  })())(Data_Function["const"](v.value0));
              };
              if (v instanceof D3_Simulation_Types.AlphaMin) {
                  var v1 = D3_FFI.setAlphaMin_(handle)(v.value0);
                  return Data_Lens_Setter.modifying(dictMonadState)((function () {
                      var $109 = D3_Simulation_Types["_d3Simulation"](Data_Profunctor_Strong.strongFn);
                      var $110 = D3_Simulation_Types["_alphaMin"](Data_Profunctor_Strong.strongFn);
                      return function ($111) {
                          return $109($110($111));
                      };
                  })())(Data_Function["const"](v.value0));
              };
              if (v instanceof D3_Simulation_Types.AlphaDecay) {
                  var v1 = D3_FFI.setAlphaDecay_(handle)(v.value0);
                  return Data_Lens_Setter.modifying(dictMonadState)((function () {
                      var $112 = D3_Simulation_Types["_d3Simulation"](Data_Profunctor_Strong.strongFn);
                      var $113 = D3_Simulation_Types["_alphaDecay"](Data_Profunctor_Strong.strongFn);
                      return function ($114) {
                          return $112($113($114));
                      };
                  })())(Data_Function["const"](v.value0));
              };
              if (v instanceof D3_Simulation_Types.VelocityDecay) {
                  var v1 = D3_FFI.setVelocityDecay_(handle)(v.value0);
                  return Data_Lens_Setter.modifying(dictMonadState)((function () {
                      var $115 = D3_Simulation_Types["_d3Simulation"](Data_Profunctor_Strong.strongFn);
                      var $116 = D3_Simulation_Types["_velocityDecay"](Data_Profunctor_Strong.strongFn);
                      return function ($117) {
                          return $115($116($117));
                      };
                  })())(Data_Function["const"](v.value0));
              };
              throw new Error("Failed pattern match at D3.Simulation.Functions (line 92, column 3 - line 107, column 52): " + [ v.constructor.name ]);
          });
      };
  };
  var simulationSetNodesFromSelection = function (dictBind) {
      return function (dictMonadState) {
          return function (nodeSelection) {
              return Control_Bind.bind(dictBind)(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
                  var v = D3_FFI.setNodes_(handle)(D3_FFI.d3GetSelectionData_(nodeSelection));
                  return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(Data_Unit.unit);
              });
          };
      };
  };
  var simulationSetNodes = function (dictBind) {
      return function (dictMonadState) {
          return function (nodes) {
              return Control_Bind.bind(dictBind)(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
                  var v = D3_FFI.setNodes_(handle)(nodes);
                  var opaqueNodes = D3_FFI.getNodes_(handle);
                  return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(opaqueNodes);
              });
          };
      };
  };
  var simulationSetLinksFromSelection = function (dictBind) {
      return function (dictMonadState) {
          return function (linkSelection) {
              return function (filterFn) {
                  return Control_Bind.bind(dictBind)(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
                      var v = D3_FFI.setLinks_(handle)(Data_Array.filter(filterFn)(D3_FFI.d3GetSelectionData_(linkSelection)));
                      return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(Data_Unit.unit);
                  });
              };
          };
      };
  };
  var simulationSetLinks = function (dictEq) {
      return function (dictBind) {
          return function (dictMonadState) {
              return function (links) {
                  return function (nodes) {
                      return function (keyFn) {
                          return Control_Bind.bind(dictBind)(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
                              var v = D3_FFI.setLinks_(handle)(D3_FFI.swizzleLinks_(links)(nodes)(keyFn));
                              var swizzledLinks = D3_FFI.getLinksFromSimulation_(handle);
                              return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(swizzledLinks);
                          });
                      };
                  };
              };
          };
      };
  };
  var simulationOn = function (dictMonadState) {
      return function (selection) {
          return function (v) {
              if (v instanceof D3_Selection.Drag) {
                  return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
                      var v1 = (function () {
                          if (v.value0 instanceof D3_Selection.DefaultDrag) {
                              return D3_FFI.simulationDrag_("default")(selection)(handle)(D3_FFI.simdrag);
                          };
                          if (v.value0 instanceof D3_Selection.NoDrag) {
                              return D3_FFI.disableDrag_(selection);
                          };
                          if (v.value0 instanceof D3_Selection.CustomDrag) {
                              return D3_FFI.simulationDrag_(v.value0.value0)(selection)(handle)(v.value0.value1);
                          };
                          throw new Error("Failed pattern match at D3.Simulation.Functions (line 282, column 11 - line 285, column 78): " + [ v.value0.constructor.name ]);
                      })();
                      return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(Data_Unit.unit);
                  });
              };
              if (v instanceof D3_Selection.Zoom) {
                  var v1 = (function () {
                      if (v.value0.extent instanceof D3_Zoom.DefaultZoomExtent) {
                          return D3_FFI.d3AttachZoomDefaultExtent_(selection)({
                              scaleExtent: [ v.value0.scale.value0, v.value0.scale.value1 ],
                              name: v.value0.name,
                              target: v.value0.target
                          });
                      };
                      if (v.value0.extent instanceof D3_Zoom.ZoomExtent) {
                          return D3_FFI.d3AttachZoom_(selection)({
                              extent: [ [ v.value0.extent.value0.left, v.value0.extent.value0.top ], [ v.value0.extent.value0.right, v.value0.extent.value0.bottom ] ],
                              scaleExtent: [ v.value0.scale.value0, v.value0.scale.value1 ],
                              name: v.value0.name,
                              target: v.value0.target
                          });
                      };
                      throw new Error("Failed pattern match at D3.Simulation.Functions (line 293, column 9 - line 307, column 14): " + [ v.value0.extent.constructor.name ]);
                  })();
                  return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at D3.Simulation.Functions (line 277, column 1 - line 279, column 51): " + [ selection.constructor.name, v.constructor.name ]);
          };
      };
  };
  var simulationMergeNewData = function (dictEq) {
      return function (dictBind) {
          return function (dictMonadState) {
              return function (nodeSelection) {
                  return function (nodeKeyFn) {
                      return function (linkSelection) {
                          return function (linkKeyFn) {
                              return function (rawdata) {
                                  var updatedNodeData = D3_FFI.d3PreserveSimulationPositions_(nodeSelection)(rawdata.nodes)(nodeKeyFn);
                                  var nodeIDs = D3_FFI.getIDsFromNodes_(rawdata.nodes)(nodeKeyFn);
                                  var validLink = function (l) {
                                      var v = D3_FFI.getLinkIDs_(linkKeyFn)(l);
                                      return Data_Array.elem(dictEq)(v.sourceID)(nodeIDs) && Data_Array.elem(dictEq)(v.targetID)(nodeIDs);
                                  };
                                  var validNewLinks = Data_Array.filter(validLink)(rawdata.links);
                                  var updatedLinkData = D3_FFI.d3PreserveLinkReferences_(linkSelection)(validNewLinks);
                                  var swizzledLinkData = D3_FFI.swizzleLinks_(updatedLinkData)(updatedNodeData)(nodeKeyFn);
                                  return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())({
                                      nodes: updatedNodeData,
                                      links: swizzledLinkData
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };                                                                                                               
  var listActiveForcesInLibrary = function (forceMap) {
      return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(Data_Array.filter(function (v) {
          return Data_Eq.eq(D3_Simulation_Types.eqForceStatus)(Data_Lens_Getter.view(D3_Simulation_Types["_status"](Data_Lens_Internal_Forget.strongForget))(v.value1))(D3_Simulation_Types.ForceActive.value);
      })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(forceMap)));
  };
  var listActiveForces = function (forceMap) {
      return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(Data_Array.filter(function (v) {
          return Data_Eq.eq(D3_Simulation_Types.eqForceStatus)(v.value1)(D3_Simulation_Types.ForceActive.value);
      })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(forceMap)));
  };
  var simulationUpdateForceStatuses = function (dictMonadState) {
      return function (forceStatuses) {
          return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)))(function (handle) {
              var v = Debug.spy()("forceStatuses on update: ")(listActiveForces(forceStatuses));
              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadState.Monad0()).Bind1())(Data_Lens_Setter.modifying(dictMonadState)(D3_Simulation_Types["_forceLibrary"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Forces.putStatusMap(forceStatuses)))(function () {
                  return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(D3_Simulation_Types["_forceLibrary"](Data_Lens_Internal_Forget.strongForget)))(function (forceLibrary) {
                      var v1 = Debug.spy()("forceLibrary after status update: ")(listActiveForcesInLibrary(forceLibrary));
                      var v2 = Data_Functor.map(Data_Map_Internal.functorMap)(D3_Simulation_Forces.updateForceInSimulation(handle))(forceLibrary);
                      return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(Data_Unit.unit);
                  });
              });
          });
      };
  };
  exports["simulationUpdateForceStatuses"] = simulationUpdateForceStatuses;
  exports["simulationSetVariable"] = simulationSetVariable;
  exports["simulationStart"] = simulationStart;
  exports["simulationStop"] = simulationStop;
  exports["simulationMergeNewData"] = simulationMergeNewData;
  exports["simulationSetNodes"] = simulationSetNodes;
  exports["simulationSetLinks"] = simulationSetLinks;
  exports["simulationSetNodesFromSelection"] = simulationSetNodesFromSelection;
  exports["simulationSetLinksFromSelection"] = simulationSetLinksFromSelection;
  exports["simulationOn"] = simulationOn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["DOM.HTML.Indexed.InputType"] = $PS["DOM.HTML.Indexed.InputType"] || {};
  var exports = $PS["DOM.HTML.Indexed.InputType"];
  var InputButton = (function () {
      function InputButton() {

      };
      InputButton.value = new InputButton();
      return InputButton;
  })();
  var InputCheckbox = (function () {
      function InputCheckbox() {

      };
      InputCheckbox.value = new InputCheckbox();
      return InputCheckbox;
  })();
  var InputColor = (function () {
      function InputColor() {

      };
      InputColor.value = new InputColor();
      return InputColor;
  })();
  var InputDate = (function () {
      function InputDate() {

      };
      InputDate.value = new InputDate();
      return InputDate;
  })();
  var InputDatetimeLocal = (function () {
      function InputDatetimeLocal() {

      };
      InputDatetimeLocal.value = new InputDatetimeLocal();
      return InputDatetimeLocal;
  })();
  var InputEmail = (function () {
      function InputEmail() {

      };
      InputEmail.value = new InputEmail();
      return InputEmail;
  })();
  var InputFile = (function () {
      function InputFile() {

      };
      InputFile.value = new InputFile();
      return InputFile;
  })();
  var InputHidden = (function () {
      function InputHidden() {

      };
      InputHidden.value = new InputHidden();
      return InputHidden;
  })();
  var InputImage = (function () {
      function InputImage() {

      };
      InputImage.value = new InputImage();
      return InputImage;
  })();
  var InputMonth = (function () {
      function InputMonth() {

      };
      InputMonth.value = new InputMonth();
      return InputMonth;
  })();
  var InputNumber = (function () {
      function InputNumber() {

      };
      InputNumber.value = new InputNumber();
      return InputNumber;
  })();
  var InputPassword = (function () {
      function InputPassword() {

      };
      InputPassword.value = new InputPassword();
      return InputPassword;
  })();
  var InputRadio = (function () {
      function InputRadio() {

      };
      InputRadio.value = new InputRadio();
      return InputRadio;
  })();
  var InputRange = (function () {
      function InputRange() {

      };
      InputRange.value = new InputRange();
      return InputRange;
  })();
  var InputReset = (function () {
      function InputReset() {

      };
      InputReset.value = new InputReset();
      return InputReset;
  })();
  var InputSearch = (function () {
      function InputSearch() {

      };
      InputSearch.value = new InputSearch();
      return InputSearch;
  })();
  var InputSubmit = (function () {
      function InputSubmit() {

      };
      InputSubmit.value = new InputSubmit();
      return InputSubmit;
  })();
  var InputTel = (function () {
      function InputTel() {

      };
      InputTel.value = new InputTel();
      return InputTel;
  })();
  var InputText = (function () {
      function InputText() {

      };
      InputText.value = new InputText();
      return InputText;
  })();
  var InputTime = (function () {
      function InputTime() {

      };
      InputTime.value = new InputTime();
      return InputTime;
  })();
  var InputUrl = (function () {
      function InputUrl() {

      };
      InputUrl.value = new InputUrl();
      return InputUrl;
  })();
  var InputWeek = (function () {
      function InputWeek() {

      };
      InputWeek.value = new InputWeek();
      return InputWeek;
  })();
  var renderInputType = function (v) {
      if (v instanceof InputButton) {
          return "button";
      };
      if (v instanceof InputCheckbox) {
          return "checkbox";
      };
      if (v instanceof InputColor) {
          return "color";
      };
      if (v instanceof InputDate) {
          return "date";
      };
      if (v instanceof InputDatetimeLocal) {
          return "datetime-local";
      };
      if (v instanceof InputEmail) {
          return "email";
      };
      if (v instanceof InputFile) {
          return "file";
      };
      if (v instanceof InputHidden) {
          return "hidden";
      };
      if (v instanceof InputImage) {
          return "image";
      };
      if (v instanceof InputMonth) {
          return "month";
      };
      if (v instanceof InputNumber) {
          return "number";
      };
      if (v instanceof InputPassword) {
          return "password";
      };
      if (v instanceof InputRadio) {
          return "radio";
      };
      if (v instanceof InputRange) {
          return "range";
      };
      if (v instanceof InputReset) {
          return "reset";
      };
      if (v instanceof InputSearch) {
          return "search";
      };
      if (v instanceof InputSubmit) {
          return "submit";
      };
      if (v instanceof InputTel) {
          return "tel";
      };
      if (v instanceof InputText) {
          return "text";
      };
      if (v instanceof InputTime) {
          return "time";
      };
      if (v instanceof InputUrl) {
          return "url";
      };
      if (v instanceof InputWeek) {
          return "week";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType (line 28, column 19 - line 50, column 22): " + [ v.constructor.name ]);
  };
  exports["InputCheckbox"] = InputCheckbox;
  exports["InputRadio"] = InputRadio;
  exports["InputRange"] = InputRange;
  exports["renderInputType"] = renderInputType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["DOM.HTML.Indexed.StepValue"] = $PS["DOM.HTML.Indexed.StepValue"] || {};
  var exports = $PS["DOM.HTML.Indexed.StepValue"];
  var Data_Show = $PS["Data.Show"];                
  var Any = (function () {
      function Any() {

      };
      Any.value = new Any();
      return Any;
  })();
  var Step = (function () {
      function Step(value0) {
          this.value0 = value0;
      };
      Step.create = function (value0) {
          return new Step(value0);
      };
      return Step;
  })();
  var renderStepValue = function (v) {
      if (v instanceof Any) {
          return "any";
      };
      if (v instanceof Step) {
          return Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.StepValue (line 10, column 19 - line 12, column 19): " + [ v.constructor.name ]);
  };
  exports["Step"] = Step;
  exports["renderStepValue"] = renderStepValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.VDom.Machine"] = $PS["Halogen.VDom.Machine"] || {};
  var exports = $PS["Halogen.VDom.Machine"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Step = (function () {
      function Step(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Step.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Step(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Step;
  })();
  var unStep = Unsafe_Coerce.unsafeCoerce;
  var step = function (v, a) {
      return v.value2(v.value1, a);
  };
  var mkStep = Unsafe_Coerce.unsafeCoerce;
  var halt = function (v) {
      return v.value3(v.value1);
  };
  var extract = unStep(function (v) {
      return v.value0;
  });
  exports["Step"] = Step;
  exports["mkStep"] = mkStep;
  exports["unStep"] = unStep;
  exports["extract"] = extract;
  exports["step"] = step;
  exports["halt"] = halt;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGetAny = function (key, obj) {
    return obj[key];
  };

  exports.unsafeHasAny = function (key, obj) {
    return obj.hasOwnProperty(key);
  };

  exports.unsafeSetAny = function (key, val, obj) {
      obj[key] = val;
  };

  exports.forE = function (a, f) {
    var b = [];
    for (var i = 0; i < a.length; i++) {
      b.push(f(i, a[i]));
    }
    return b;
  };

  exports.forEachE = function (a, f) {
    for (var i = 0; i < a.length; i++) {
      f(a[i]);
    }
  };

  exports.forInE = function (o, f) {
    var ks = Object.keys(o);
    for (var i = 0; i < ks.length; i++) {
      var k = ks[i];
      f(k, o[k]);
    }
  };

  exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
    var a3 = [];
    var l1 = a1.length;
    var l2 = a2.length;
    var i  = 0;
    while (1) {
      if (i < l1) {
        if (i < l2) {
          a3.push(f1(i, a1[i], a2[i]));
        } else {
          f2(i, a1[i]);
        }
      } else if (i < l2) {
        a3.push(f3(i, a2[i]));
      } else {
        break;
      }
      i++;
    }
    return a3;
  };

  exports.strMapWithIxE = function (as, fk, f) {
    var o = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      o[k] = f(k, i, a);
    }
    return o;
  };

  exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
    var o2 = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      if (o1.hasOwnProperty(k)) {
        o2[k] = f1(k, i, o1[k], a);
      } else {
        o2[k] = f3(k, i, a);
      }
    }
    for (var k in o1) {
      if (k in o2) {
        continue;
      }
      f2(k, o1[k]);
    }
    return o2;
  };

  exports.refEq = function (a, b) {
    return a === b;
  };

  exports.createTextNode = function (s, doc) {
    return doc.createTextNode(s);
  };

  exports.setTextContent = function (s, n) {
    n.textContent = s;
  };

  exports.createElement = function (ns, name, doc) {
    if (ns != null) {
      return doc.createElementNS(ns, name);
    } else {
      return doc.createElement(name)
    }
  };

  exports.insertChildIx = function (i, a, b) {
    var n = b.childNodes.item(i) || null;
    if (n !== a) {
      b.insertBefore(a, n);
    }
  };

  exports.removeChild = function (a, b) {
    if (b && a.parentNode === b) {
      b.removeChild(a);
    }
  };

  exports.parentNode = function (a) {
    return a.parentNode;
  };

  exports.setAttribute = function (ns, attr, val, el) {
    if (ns != null) {
      el.setAttributeNS(ns, attr, val);
    } else {
      el.setAttribute(attr, val);
    }
  };

  exports.removeAttribute = function (ns, attr, el) {
    if (ns != null) {
      el.removeAttributeNS(ns, attr);
    } else {
      el.removeAttribute(attr);
    }
  };

  exports.hasAttribute = function (ns, attr, el) {
    if (ns != null) {
      return el.hasAttributeNS(ns, attr);
    } else {
      return el.hasAttribute(attr);
    }
  };

  exports.addEventListener = function (ev, listener, el) {
    el.addEventListener(ev, listener, false);
  };

  exports.removeEventListener = function (ev, listener, el) {
    el.removeEventListener(ev, listener, false);
  };

  exports.jsUndefined = void 0;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.VDom.Util"] = $PS["Halogen.VDom.Util"] || {};
  var exports = $PS["Halogen.VDom.Util"];
  var $foreign = $PS["Halogen.VDom.Util"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unsafeLookup = $foreign.unsafeGetAny;
  var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
  var pokeMutMap = $foreign.unsafeSetAny;
  var newMutMap = Foreign_Object_ST["new"];
  exports["newMutMap"] = newMutMap;
  exports["pokeMutMap"] = pokeMutMap;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeLookup"] = unsafeLookup;
  exports["unsafeGetAny"] = $foreign.unsafeGetAny;
  exports["unsafeHasAny"] = $foreign.unsafeHasAny;
  exports["unsafeSetAny"] = $foreign.unsafeSetAny;
  exports["forE"] = $foreign.forE;
  exports["forEachE"] = $foreign.forEachE;
  exports["forInE"] = $foreign.forInE;
  exports["diffWithIxE"] = $foreign.diffWithIxE;
  exports["diffWithKeyAndIxE"] = $foreign.diffWithKeyAndIxE;
  exports["strMapWithIxE"] = $foreign.strMapWithIxE;
  exports["refEq"] = $foreign.refEq;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["createElement"] = $foreign.createElement;
  exports["insertChildIx"] = $foreign.insertChildIx;
  exports["removeChild"] = $foreign.removeChild;
  exports["parentNode"] = $foreign.parentNode;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["hasAttribute"] = $foreign.hasAttribute;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["jsUndefined"] = $foreign.jsUndefined;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.VDom.DOM.Prop"] = $PS["Halogen.VDom.DOM.Prop"] || {};
  var exports = $PS["Halogen.VDom.DOM.Prop"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];                
  var Created = (function () {
      function Created(value0) {
          this.value0 = value0;
      };
      Created.create = function (value0) {
          return new Created(value0);
      };
      return Created;
  })();
  var Removed = (function () {
      function Removed(value0) {
          this.value0 = value0;
      };
      Removed.create = function (value0) {
          return new Removed(value0);
      };
      return Removed;
  })();
  var Attribute = (function () {
      function Attribute(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attribute.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attribute(value0, value1, value2);
              };
          };
      };
      return Attribute;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
  var setProperty = Halogen_VDom_Util.unsafeSetAny;
  var removeProperty = function (key, el) {
      var v = Halogen_VDom_Util.hasAttribute(Data_Nullable["null"], key, el);
      if (v) {
          return Halogen_VDom_Util.removeAttribute(Data_Nullable["null"], key, el);
      };
      var v1 = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
      if (v1 === "string") {
          return Halogen_VDom_Util.unsafeSetAny(key, "", el);
      };
      if (key === "rowSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      if (key === "colSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
  };
  var propToStrKey = function (v) {
      if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
          return "attr/" + (v.value0.value0 + (":" + v.value1));
      };
      if (v instanceof Attribute) {
          return "attr/:" + v.value1;
      };
      if (v instanceof Property) {
          return "prop/" + v.value0;
      };
      if (v instanceof Handler) {
          return "handler/" + v.value0;
      };
      if (v instanceof Ref) {
          return "ref";
      };
      throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [ v.constructor.name ]);
  };
  var propFromString = Unsafe_Coerce.unsafeCoerce;
  var propFromNumber = Unsafe_Coerce.unsafeCoerce;
  var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
  var buildProp = function (emit) {
      return function (el) {
          var removeProp = function (prevEvents) {
              return function (v, v1) {
                  if (v1 instanceof Attribute) {
                      return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                  };
                  if (v1 instanceof Property) {
                      return removeProperty(v1.value0, el);
                  };
                  if (v1 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                      return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                  };
                  if (v1 instanceof Ref) {
                      return Data_Unit.unit;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [ v1.constructor.name ]);
              };
          };
          var mbEmit = function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return emit(v.value0)();
              };
              return Data_Unit.unit;
          };
          var haltProp = function (state) {
              var v = Foreign_Object.lookup("ref")(state.props);
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                  return mbEmit(v.value0.value0(new Removed(el)));
              };
              return Data_Unit.unit;
          };
          var diffProp = function (prevEvents, events) {
              return function (v, v1, v11, v2) {
                  if (v11 instanceof Attribute && v2 instanceof Attribute) {
                      var $56 = v11.value2 === v2.value2;
                      if ($56) {
                          return v2;
                      };
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v11 instanceof Property && v2 instanceof Property) {
                      var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                      if (v4) {
                          return v2;
                      };
                      if (v2.value0 === "value") {
                          var elVal = unsafeGetProperty("value", el);
                          var $65 = Halogen_VDom_Util.refEq(elVal, v2.value1);
                          if ($65) {
                              return v2;
                          };
                          setProperty(v2.value0, v2.value1, el);
                          return v2;
                      };
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v11 instanceof Handler && v2 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                      Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
                      return v2;
                  };
                  return v2;
              };
          };
          var applyProp = function (events) {
              return function (v, v1, v2) {
                  if (v2 instanceof Attribute) {
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v2 instanceof Property) {
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v2 instanceof Handler) {
                      var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                      if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                          Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
                          return v2;
                      };
                      var ref = Effect_Ref["new"](v2.value1)();
                      var listener = Web_Event_EventTarget.eventListener(function (ev) {
                          return function __do() {
                              var f$prime = Effect_Ref.read(ref)();
                              return mbEmit(f$prime(ev));
                          };
                      })();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, ref), events);
                      Halogen_VDom_Util.addEventListener(v2.value0, listener, el);
                      return v2;
                  };
                  if (v2 instanceof Ref) {
                      mbEmit(v2.value0(new Created(el)));
                      return v2;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [ v2.constructor.name ]);
              };
          };
          var patchProp = function (state, ps2) {
              var events = Halogen_VDom_Util.newMutMap();
              var onThis = removeProp(state.events);
              var onThese = diffProp(state.events, events);
              var onThat = applyProp(events);
              var props = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
              var nextState = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: props
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
          };
          var renderProp = function (ps1) {
              var events = Halogen_VDom_Util.newMutMap();
              var ps1$prime = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(events));
              var state = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: ps1$prime
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
          };
          return renderProp;
      };
  };
  exports["Attribute"] = Attribute;
  exports["Property"] = Property;
  exports["Handler"] = Handler;
  exports["propFromString"] = propFromString;
  exports["propFromBoolean"] = propFromBoolean;
  exports["propFromNumber"] = propFromNumber;
  exports["buildProp"] = buildProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.VDom.Types"] = $PS["Halogen.VDom.Types"] || {};
  var exports = $PS["Halogen.VDom.Types"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Elem = (function () {
      function Elem(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Elem.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Elem(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Elem;
  })();
  var Keyed = (function () {
      function Keyed(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Keyed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Keyed(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Keyed;
  })();
  var Widget = (function () {
      function Widget(value0) {
          this.value0 = value0;
      };
      Widget.create = function (value0) {
          return new Widget(value0);
      };
      return Widget;
  })();
  var Grafted = (function () {
      function Grafted(value0) {
          this.value0 = value0;
      };
      Grafted.create = function (value0) {
          return new Grafted(value0);
      };
      return Grafted;
  })();
  var Graft = (function () {
      function Graft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Graft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Graft(value0, value1, value2);
              };
          };
      };
      return Graft;
  })();
  var unGraft = function (f) {
      return function ($52) {
          return f($52);
      };
  }; 
  var graft = Unsafe_Coerce.unsafeCoerce;
  var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return unGraft(function (v) {
              return graft(new Graft(function ($54) {
                  return f(v.value0($54));
              }, function ($55) {
                  return g(v.value1($55));
              }, v.value2));
          });
      };
  });
  var runGraft = unGraft(function (v) {
      var go = function (v2) {
          if (v2 instanceof Text) {
              return new Text(v2.value0);
          };
          if (v2 instanceof Elem) {
              return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
          };
          if (v2 instanceof Keyed) {
              return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
          };
          if (v2 instanceof Widget) {
              return new Widget(v.value1(v2.value0));
          };
          if (v2 instanceof Grafted) {
              return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [ v2.constructor.name ]);
      };
      return go(v.value2);
  });
  exports["Text"] = Text;
  exports["Elem"] = Elem;
  exports["Keyed"] = Keyed;
  exports["Widget"] = Widget;
  exports["Grafted"] = Grafted;
  exports["runGraft"] = runGraft;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.HTML.Core"] = $PS["Halogen.HTML.Core"] || {};
  var exports = $PS["Halogen.HTML.Core"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var DOM_HTML_Indexed_StepValue = $PS["DOM.HTML.Indexed.StepValue"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];          
  var IsProp = function (toPropValue) {
      this.toPropValue = toPropValue;
  };
  var HTML = function (x) {
      return x;
  };
  var widget = function ($18) {
      return HTML(Halogen_VDom_Types.Widget.create($18));
  };
  var toPropValue = function (dict) {
      return dict.toPropValue;
  };
  var text = function ($19) {
      return HTML(Halogen_VDom_Types.Text.create($19));
  };
  var prop = function (dictIsProp) {
      return function (v) {
          var $21 = Halogen_VDom_DOM_Prop.Property.create(v);
          var $22 = toPropValue(dictIsProp);
          return function ($23) {
              return $21($22($23));
          };
      };
  }; 
  var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
  var isPropStepValue = new IsProp(function ($27) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_StepValue.renderStepValue($27));
  });
  var isPropNumber = new IsProp(Halogen_VDom_DOM_Prop.propFromNumber);
  var isPropInputType = new IsProp(function ($37) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($37));
  });
  var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
  var handler = Halogen_VDom_DOM_Prop.Handler.create;
  var element = function (ns) {
      return function (name) {
          return function (props) {
              return function (children) {
                  return new Halogen_VDom_Types.Elem(ns, name, props, children);
              };
          };
      };
  };                                                                             
  var attr = function (ns) {
      return function (v) {
          return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
      };
  };
  exports["widget"] = widget;
  exports["text"] = text;
  exports["element"] = element;
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["handler"] = handler;
  exports["isPropString"] = isPropString;
  exports["isPropNumber"] = isPropNumber;
  exports["isPropBoolean"] = isPropBoolean;
  exports["isPropInputType"] = isPropInputType;
  exports["isPropStepValue"] = isPropStepValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.HTML.Elements"] = $PS["Halogen.HTML.Elements"] || {};
  var exports = $PS["Halogen.HTML.Elements"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
  var fieldset = element("fieldset");
  var h1 = element("h1");
  var h2 = element("h2");
  var h2_ = h2([  ]);
  var h3 = element("h3");
  var h4 = element("h4");
  var img = function (props) {
      return element("img")(props)([  ]);
  };
  var input = function (props) {
      return element("input")(props)([  ]);
  };                   
  var label = element("label");
  var legend = element("legend");
  var li = element("li");  
  var nav = element("nav");  
  var p = element("p");
  var p_ = p([  ]);
  var pre = element("pre");
  var span = element("span");
  var table = element("table");
  var td = element("td");  
  var th = element("th");  
  var tr = element("tr");
  var tr_ = tr([  ]);
  var ul = element("ul");
  var div = element("div");
  var div_ = div([  ]);
  var code = element("code");
  var code_ = code([  ]);
  var button = element("button");
  var body = element("body");
  var body_ = body([  ]);
  var a = element("a");
  exports["element"] = element;
  exports["a"] = a;
  exports["body_"] = body_;
  exports["button"] = button;
  exports["code_"] = code_;
  exports["div"] = div;
  exports["div_"] = div_;
  exports["fieldset"] = fieldset;
  exports["h1"] = h1;
  exports["h2"] = h2;
  exports["h2_"] = h2_;
  exports["h3"] = h3;
  exports["h4"] = h4;
  exports["img"] = img;
  exports["input"] = input;
  exports["label"] = label;
  exports["legend"] = legend;
  exports["li"] = li;
  exports["nav"] = nav;
  exports["p"] = p;
  exports["p_"] = p_;
  exports["pre"] = pre;
  exports["span"] = span;
  exports["table"] = table;
  exports["td"] = td;
  exports["th"] = th;
  exports["tr_"] = tr_;
  exports["ul"] = ul;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.HTML.Properties"] = $PS["Halogen.HTML.Properties"] || {};
  var exports = $PS["Halogen.HTML.Properties"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var prop = function (dictIsProp) {
      return Halogen_HTML_Core.prop(dictIsProp);
  };                                                                   
  var src = prop(Halogen_HTML_Core.isPropString)("src");
  var step = prop(Halogen_HTML_Core.isPropStepValue)("step");
  var type_ = function (dictIsProp) {
      return prop(dictIsProp)("type");
  };
  var value = prop(Halogen_HTML_Core.isPropString)("value");
  var name = prop(Halogen_HTML_Core.isPropString)("name");         
  var min = prop(Halogen_HTML_Core.isPropNumber)("min");          
  var max = prop(Halogen_HTML_Core.isPropNumber)("max");   
  var id = prop(Halogen_HTML_Core.isPropString)("id");
  var $$for = prop(Halogen_HTML_Core.isPropString)("htmlFor");
  var classes = (function () {
      var $12 = prop(Halogen_HTML_Core.isPropString)("className");
      var $13 = Data_String_Common.joinWith(" ");
      var $14 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
      return function ($15) {
          return $12($13($14($15)));
      };
  })();
  var class_ = (function () {
      var $16 = prop(Halogen_HTML_Core.isPropString)("className");
      var $17 = Data_Newtype.unwrap();
      return function ($18) {
          return $16($17($18));
      };
  })();
  var checked = prop(Halogen_HTML_Core.isPropBoolean)("checked");
  var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
  exports["attr"] = attr;
  exports["class_"] = class_;
  exports["classes"] = classes;
  exports["for"] = $$for;
  exports["id"] = id;
  exports["name"] = name;
  exports["src"] = src;
  exports["type_"] = type_;
  exports["value"] = value;
  exports["min"] = min;
  exports["max"] = max;
  exports["step"] = step;
  exports["checked"] = checked;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.HTML.Common"] = $PS["Web.HTML.Common"] || {};
  var exports = $PS["Web.HTML.Common"];
  var ClassName = function (x) {
      return x;
  };
  exports["ClassName"] = ClassName;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Ocelot.HTML.Properties"] = $PS["Ocelot.HTML.Properties"] || {};
  var exports = $PS["Ocelot.HTML.Properties"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];
  var startsWith = function (str0) {
      return function (str1) {
          return str0 === Data_String_CodeUnits.take(Data_String_CodeUnits.length(str0))(str1);
      };
  };
  var extract = (function () {
      var f = function (acc) {
          return function (v) {
              if (v instanceof Halogen_VDom_DOM_Prop.Property && v.value0 === "className") {
                  return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorTuple)(function (v1) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)(Data_String_Common.split(" ")(v.value1));
                  })(acc);
              };
              return Data_Bifunctor.rmap(Data_Bifunctor.bifunctorTuple)(function (v1) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)([ v ]);
              })(acc);
          };
      };
      return Data_Array.foldl(f)(new Data_Tuple.Tuple([  ], [  ]));
  })();
  var css = function ($25) {
      return Halogen_HTML_Properties.class_(Web_HTML_Common.ClassName($25));
  };
  var classifySide = function (str) {
      if (startsWith("t-")(str)) {
          return "top";
      };
      if (startsWith("r-")(str)) {
          return "right";
      };
      if (startsWith("b-")(str)) {
          return "bottom";
      };
      if (startsWith("l-")(str)) {
          return "left";
      };
      if (startsWith("x-")(str)) {
          return "horizontal";
      };
      if (startsWith("y-")(str)) {
          return "vertical";
      };
      if (startsWith("-")(str)) {
          return "all";
      };
      if (Data_Boolean.otherwise) {
          return "";
      };
      throw new Error("Failed pattern match at Ocelot.HTML.Properties (line 100, column 1 - line 102, column 12): " + [ str.constructor.name ]);
  };
  var append$prime = function (x) {
      return function (v) {
          if (v === "") {
              return x;
          };
          return x + ("-" + v);
      };
  };
  var classifyOverflow = function (str) {
      if (startsWith("x-")(str)) {
          return append$prime("horizontal")(classifyOverflow(Data_String_CodeUnits.drop(2)(str)));
      };
      if (startsWith("y-")(str)) {
          return append$prime("vertical")(classifyOverflow(Data_String_CodeUnits.drop(2)(str)));
      };
      if (Data_Array.elem(Data_Eq.eqString)(str)([ "auto", "hidden", "visible", "scroll" ])) {
          return "";
      };
      if (Data_Boolean.otherwise) {
          return str;
      };
      throw new Error("Failed pattern match at Ocelot.HTML.Properties (line 113, column 1 - line 115, column 12): " + [ str.constructor.name ]);
  };
  var classify = function (str) {
      if (startsWith("p")(str) && Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_String_Common["null"])(classifySide(Data_String_CodeUnits.drop(1)(str)))) {
          return append$prime("padding")(classifySide(Data_String_CodeUnits.drop(1)(str)));
      };
      if (startsWith("m")(str) && Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_String_Common["null"])(classifySide(Data_String_CodeUnits.drop(1)(str)))) {
          return append$prime("margin")(classifySide(Data_String_CodeUnits.drop(1)(str)));
      };
      if (startsWith("-m")(str) && Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_String_Common["null"])(classifySide(Data_String_CodeUnits.drop(2)(str)))) {
          return append$prime("margin")(classifySide(Data_String_CodeUnits.drop(2)(str)));
      };
      if (startsWith("min-")(str)) {
          return append$prime("min")(classify(Data_String_CodeUnits.drop(4)(str)));
      };
      if (startsWith("max-")(str)) {
          return append$prime("max")(classify(Data_String_CodeUnits.drop(4)(str)));
      };
      if (startsWith("w-")(str)) {
          return "width";
      };
      if (startsWith("h-")(str)) {
          return "height";
      };
      if (startsWith("overflow-")(str) && classifyOverflow(Data_String_CodeUnits.drop(9)(str)) !== Data_String_CodeUnits.drop(9)(str)) {
          return append$prime("overflow")(classifyOverflow(Data_String_CodeUnits.drop(9)(str)));
      };
      if (Data_Boolean.otherwise) {
          return str;
      };
      throw new Error("Failed pattern match at Ocelot.HTML.Properties (line 82, column 1 - line 84, column 12): " + [ str.constructor.name ]);
  };
  var appendIProps = function (ip) {
      return function (ip$prime) {
          var v = extract(ip);
          var v1 = extract(ip$prime);
          var classNames = Control_Applicative.pure(Control_Applicative.applicativeArray)(Halogen_HTML_Properties.classes(Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)(Data_Array.nubByEq(function (c) {
              return function (c$prime) {
                  return classify(c) === classify(c$prime);
              };
          })(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value0)(v.value0)))));
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value1)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value1)(classNames));
      };
  };
  exports["appendIProps"] = appendIProps;
  exports["css"] = css;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Block.Button"] = $PS["D3Tagless.Block.Button"] || {};
  var exports = $PS["D3Tagless.Block.Button"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                                                                      
  var centerVerticalClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "w-11/12", "rounded", "m-2" ]);
  var buttonSharedClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "no-outline", "px-4", "py-2", "!active:border-b", "active:border-t", "disabled:opacity-50", "disabled:cursor-default", "!disabled:cursor-pointer" ]);
  var buttonMainClasses = Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonSharedClasses)(Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "rounded" ]));
  var buttonGroupClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "flex", "items-center" ]);
  var buttonGroupBuilder = function (classes) {
      return function (iprops) {
          return Halogen_HTML_Elements.button(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonSharedClasses)(classes)) ])(iprops));
      };
  };                                                 
  var buttonGroup = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(buttonGroupClasses) ])(iprops));
  };                                                                                                                                  
  var buttonClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "bg-grey-50-a20", "border-grey-50-a20", "hover:!disabled:bg-grey-50-a30", "focus:bg-grey-50-a30", "text-black-20" ]);
  var buttonVertical = buttonGroupBuilder(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonClasses)(centerVerticalClasses));
  var buttonBuilder = function (classes) {
      return function (iprops) {
          return Halogen_HTML_Elements.button(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonMainClasses)(classes)) ])(iprops));
      };
  };                                       
  var button = buttonBuilder(buttonClasses);
  exports["buttonGroup"] = buttonGroup;
  exports["buttonVertical"] = buttonVertical;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Block.Card"] = $PS["D3Tagless.Block.Card"] || {};
  var exports = $PS["D3Tagless.Block.Card"];
  var Data_Functor = $PS["Data.Functor"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var innerCardClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "m-6" ]);
  var innerCard = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(innerCardClasses) ])(iprops));
  };
  var innerCard_ = innerCard([  ]);
  var baseCardClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "bg-white", "mb-6", "rounded", "clearfix" ]);
  var baseCard = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(baseCardClasses) ])(iprops));
  };                             
  var card = function (iprops) {
      return function (html) {
          return baseCard(iprops)([ innerCard_(html) ]);
      };
  };
  var card_ = card([  ]);
  exports["card_"] = card_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Block.Expandable"] = $PS["D3Tagless.Block.Expandable"] || {};
  var exports = $PS["D3Tagless.Block.Expandable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var Collapsed = (function () {
      function Collapsed() {

      };
      Collapsed.value = new Collapsed();
      return Collapsed;
  })();
  var Expanded = (function () {
      function Expanded() {

      };
      Expanded.value = new Expanded();
      return Expanded;
  })();
  var toBoolean = function (v) {
      if (v instanceof Collapsed) {
          return false;
      };
      if (v instanceof Expanded) {
          return true;
      };
      throw new Error("Failed pattern match at D3Tagless.Block.Expandable (line 39, column 1 - line 39, column 31): " + [ v.constructor.name ]);
  };                                                                  
  var heytingAlgebraStatus = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
      return function (v1) {
          if (v instanceof Expanded && v1 instanceof Expanded) {
              return Expanded.value;
          };
          return Collapsed.value;
      };
  }, function (v) {
      return function (v1) {
          if (v instanceof Expanded) {
              return Expanded.value;
          };
          if (v1 instanceof Expanded) {
              return Expanded.value;
          };
          return Collapsed.value;
      };
  }, Collapsed.value, function (a) {
      return function (b) {
          return Data_HeytingAlgebra.disj(heytingAlgebraStatus)(Data_HeytingAlgebra.not(heytingAlgebraStatus)(a))(b);
      };
  }, function (v) {
      if (v instanceof Expanded) {
          return Collapsed.value;
      };
      if (v instanceof Collapsed) {
          return Expanded.value;
      };
      throw new Error("Failed pattern match at D3Tagless.Block.Expandable (line 47, column 1 - line 57, column 27): " + [ v.constructor.name ]);
  }, Expanded.value);
  var contentSharedClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([  ]);
  var contentClasses = function (status_) {
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(contentSharedClasses)((function () {
          if (status_ instanceof Collapsed) {
              return Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "max-h-0", "opacity-0", "w-0", "overflow-hidden", "transition-1/2-in" ]);
          };
          if (status_ instanceof Expanded) {
              return Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "max-h-full", "opacity-100", "transition-1/2-out" ]);
          };
          throw new Error("Failed pattern match at D3Tagless.Block.Expandable (line 84, column 5 - line 96, column 8): " + [ status_.constructor.name ]);
      })());
  };
  var content = function (status_) {
      return function (iprops) {
          return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(contentClasses(status_)) ])(iprops));
      };
  };
  var content_ = function (status_) {
      return content(status_)([  ]);
  };
  exports["Collapsed"] = Collapsed;
  exports["Expanded"] = Expanded;
  exports["toBoolean"] = toBoolean;
  exports["content_"] = content_;
  exports["heytingAlgebraStatus"] = heytingAlgebraStatus;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Coyoneda"] = $PS["Data.Coyoneda"] || {};
  var exports = $PS["Data.Coyoneda"];
  var Control_Category = $PS["Control.Category"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];                        
  var CoyonedaF = (function () {
      function CoyonedaF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CoyonedaF.create = function (value0) {
          return function (value1) {
              return new CoyonedaF(value0, value1);
          };
      };
      return CoyonedaF;
  })();
  var Coyoneda = function (x) {
      return x;
  };
  var unCoyoneda = function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return f(v1.value0)(v1.value1);
          })(v);
      };
  };
  var coyoneda = function (k) {
      return function (fi) {
          return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
      };
  };
  var functorCoyoneda = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(function ($84) {
                  return f(v1.value0($84));
              })(v1.value1);
          })(v);
      };
  });
  var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));
  exports["unCoyoneda"] = unCoyoneda;
  exports["liftCoyoneda"] = liftCoyoneda;
  exports["functorCoyoneda"] = functorCoyoneda;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Data.OrdBox"] = $PS["Halogen.Data.OrdBox"] || {};
  var exports = $PS["Halogen.Data.OrdBox"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];                
  var OrdBox = (function () {
      function OrdBox(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OrdBox.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OrdBox(value0, value1, value2);
              };
          };
      };
      return OrdBox;
  })();
  var mkOrdBox = function (dictOrd) {
      return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
  };
  var eqOrdBox = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0(v.value2)(v1.value2);
      };
  });
  var ordOrdBox = new Data_Ord.Ord(function () {
      return eqOrdBox;
  }, function (v) {
      return function (v1) {
          return v.value1(v.value2)(v1.value2);
      };
  });
  exports["mkOrdBox"] = mkOrdBox;
  exports["ordOrdBox"] = ordOrdBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Data.Slot"] = $PS["Halogen.Data.Slot"] || {};
  var exports = $PS["Halogen.Data.Slot"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_Data_OrdBox = $PS["Halogen.Data.OrdBox"];
  var pop = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (v) {
                          return Data_Map_Internal.pop(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                      };
                  };
              };
          };
      };
  };
  var lookup = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (v) {
                          return Data_Map_Internal.lookup(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                      };
                  };
              };
          };
      };
  };
  var insert = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (val) {
                          return function (v) {
                              return Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(val)(v);
                          };
                      };
                  };
              };
          };
      };
  };
  var foreachSlot = function (dictApplicative) {
      return function (v) {
          return function (k) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
                  return k($37);
              })(v);
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  exports["empty"] = empty;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["pop"] = pop;
  exports["foreachSlot"] = foreachSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadAff = function (MonadEffect0, liftAff) {
      this.MonadEffect0 = MonadEffect0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Effect_Aff.monadEffectAff;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Query.HalogenM"] = $PS["Halogen.Query.HalogenM"] || {};
  var exports = $PS["Halogen.Query.HalogenM"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Ord = $PS["Data.Ord"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];                                
  var SubscriptionId = function (x) {
      return x;
  };
  var ForkId = function (x) {
      return x;
  };
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var Subscribe = (function () {
      function Subscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Subscribe.create = function (value0) {
          return function (value1) {
              return new Subscribe(value0, value1);
          };
      };
      return Subscribe;
  })();
  var Unsubscribe = (function () {
      function Unsubscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unsubscribe.create = function (value0) {
          return function (value1) {
              return new Unsubscribe(value0, value1);
          };
      };
      return Unsubscribe;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var ChildQuery = (function () {
      function ChildQuery(value0) {
          this.value0 = value0;
      };
      ChildQuery.create = function (value0) {
          return new ChildQuery(value0);
      };
      return ChildQuery;
  })();
  var Raise = (function () {
      function Raise(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Raise.create = function (value0) {
          return function (value1) {
              return new Raise(value0, value1);
          };
      };
      return Raise;
  })();
  var Par = (function () {
      function Par(value0) {
          this.value0 = value0;
      };
      Par.create = function (value0) {
          return new Par(value0);
      };
      return Par;
  })();
  var Fork = (function () {
      function Fork(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fork.create = function (value0) {
          return function (value1) {
              return new Fork(value0, value1);
          };
      };
      return Fork;
  })();
  var Kill = (function () {
      function Kill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Kill.create = function (value0) {
          return function (value1) {
              return new Kill(value0, value1);
          };
      };
      return Kill;
  })();
  var GetRef = (function () {
      function GetRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GetRef.create = function (value0) {
          return function (value1) {
              return new GetRef(value0, value1);
          };
      };
      return GetRef;
  })();
  var HalogenM = function (x) {
      return x;
  };
  var subscribe = function (es) {
      return HalogenM(Control_Monad_Free.liftF(new Subscribe(function (v) {
          return es;
      }, Control_Category.identity(Control_Category.categoryFn))));
  };
  var ordSubscriptionId = Data_Ord.ordInt;
  var ordForkId = Data_Ord.ordInt;
  var monadHalogenM = Control_Monad_Free.freeMonad;
  var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
      return monadHalogenM;
  }, function ($136) {
      return HalogenM(Control_Monad_Free.liftF(State.create($136)));
  });
  var monadEffectHalogenM = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadHalogenM;
      }, (function () {
          var $141 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($142) {
              return HalogenM(Control_Monad_Free.liftF(Lift.create($141($142))));
          };
      })());
  };
  var monadAffHalogenM = function (dictMonadAff) {
      return new Effect_Aff_Class.MonadAff(function () {
          return monadEffectHalogenM(dictMonadAff.MonadEffect0());
      }, (function () {
          var $143 = Effect_Aff_Class.liftAff(dictMonadAff);
          return function ($144) {
              return HalogenM(Control_Monad_Free.liftF(Lift.create($143($144))));
          };
      })());
  };
  var functorHalogenM = Control_Monad_Free.freeFunctor;
  var bindHalogenM = Control_Monad_Free.freeBind;           
  var applicativeHalogenM = Control_Monad_Free.freeApplicative;
  exports["State"] = State;
  exports["Subscribe"] = Subscribe;
  exports["Unsubscribe"] = Unsubscribe;
  exports["Lift"] = Lift;
  exports["ChildQuery"] = ChildQuery;
  exports["Raise"] = Raise;
  exports["Par"] = Par;
  exports["Fork"] = Fork;
  exports["Kill"] = Kill;
  exports["GetRef"] = GetRef;
  exports["SubscriptionId"] = SubscriptionId;
  exports["subscribe"] = subscribe;
  exports["ForkId"] = ForkId;
  exports["functorHalogenM"] = functorHalogenM;
  exports["applicativeHalogenM"] = applicativeHalogenM;
  exports["bindHalogenM"] = bindHalogenM;
  exports["monadEffectHalogenM"] = monadEffectHalogenM;
  exports["monadAffHalogenM"] = monadAffHalogenM;
  exports["monadStateHalogenM"] = monadStateHalogenM;
  exports["ordSubscriptionId"] = ordSubscriptionId;
  exports["ordForkId"] = ordForkId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Query.HalogenQ"] = $PS["Halogen.Query.HalogenQ"] || {};
  var exports = $PS["Halogen.Query.HalogenQ"];           
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var Finalize = (function () {
      function Finalize(value0) {
          this.value0 = value0;
      };
      Finalize.create = function (value0) {
          return new Finalize(value0);
      };
      return Finalize;
  })();
  var Receive = (function () {
      function Receive(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Receive.create = function (value0) {
          return function (value1) {
              return new Receive(value0, value1);
          };
      };
      return Receive;
  })();
  var Action = (function () {
      function Action(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Action.create = function (value0) {
          return function (value1) {
              return new Action(value0, value1);
          };
      };
      return Action;
  })();
  var Query = (function () {
      function Query(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Query.create = function (value0) {
          return function (value1) {
              return new Query(value0, value1);
          };
      };
      return Query;
  })();
  exports["Initialize"] = Initialize;
  exports["Finalize"] = Finalize;
  exports["Receive"] = Receive;
  exports["Action"] = Action;
  exports["Query"] = Query;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Component"] = $PS["Halogen.Component"] || {};
  var exports = $PS["Halogen.Component"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ComponentSlot = (function () {
      function ComponentSlot(value0) {
          this.value0 = value0;
      };
      ComponentSlot.create = function (value0) {
          return new ComponentSlot(value0);
      };
      return ComponentSlot;
  })();
  var ThunkSlot = (function () {
      function ThunkSlot(value0) {
          this.value0 = value0;
      };
      ThunkSlot.create = function (value0) {
          return new ThunkSlot(value0);
      };
      return ThunkSlot;
  })();
  var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
  var unComponent = Unsafe_Coerce.unsafeCoerce;
  var mkEval = function (args) {
      return function (v) {
          if (v instanceof Halogen_Query_HalogenQ.Initialize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Finalize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Receive) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Action) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Query) {
              return Data_Coyoneda.unCoyoneda(function (g) {
                  var $25 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g));
                  return function ($26) {
                      return $25(args.handleQuery($26));
                  };
              })(v.value0);
          };
          throw new Error("Failed pattern match at Halogen.Component (line 182, column 15 - line 192, column 70): " + [ v.constructor.name ]);
      };
  };
  var mkComponentSlot = Unsafe_Coerce.unsafeCoerce;
  var mkComponent = Unsafe_Coerce.unsafeCoerce;
  var defaultEval = {
      handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
      handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
      receive: Data_Function["const"](Data_Maybe.Nothing.value),
      initialize: Data_Maybe.Nothing.value,
      finalize: Data_Maybe.Nothing.value
  };
  var componentSlot = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (comp) {
                          return function (input) {
                              return function (output) {
                                  return mkComponentSlot({
                                      get: Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p),
                                      pop: Halogen_Data_Slot.pop()(dictIsSymbol)(dictOrd)(label)(p),
                                      set: Halogen_Data_Slot.insert()(dictIsSymbol)(dictOrd)(label)(p),
                                      component: comp,
                                      input: input,
                                      output: output
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["mkComponent"] = mkComponent;
  exports["unComponent"] = unComponent;
  exports["mkEval"] = mkEval;
  exports["defaultEval"] = defaultEval;
  exports["ComponentSlot"] = ComponentSlot;
  exports["ThunkSlot"] = ThunkSlot;
  exports["componentSlot"] = componentSlot;
  exports["unComponentSlot"] = unComponentSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.HTML"] = $PS["Halogen.HTML"] || {};
  var exports = $PS["Halogen.HTML"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var slot_ = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (component) {
                          return function (input) {
                              return Halogen_HTML_Core.widget(new Halogen_Component.ComponentSlot(Halogen_Component.componentSlot()(dictIsSymbol)(dictOrd)(label)(p)(component)(input)(Data_Function["const"](Data_Maybe.Nothing.value))));
                          };
                      };
                  };
              };
          };
      };
  };
  var fromPlainHTML = Unsafe_Coerce.unsafeCoerce;
  exports["fromPlainHTML"] = fromPlainHTML;
  exports["slot_"] = slot_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Ocelot.Block.Format"] = $PS["Ocelot.Block.Format"] || {};
  var exports = $PS["Ocelot.Block.Format"];
  var Data_Functor = $PS["Data.Functor"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var subHeadingClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "text-xl", "font-medium", "leading-loose", "flex", "items-center", "mb-6" ]);
  var subHeading = function (iprops) {
      return function (html) {
          return Halogen_HTML_Elements.h2(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(subHeadingClasses) ])(iprops))(html);
      };
  };
  var subHeading_ = subHeading([  ]);
  var mutedClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "text-grey-50" ]);                                                                                  
  var linkClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "text-blue-75", "hover:text-blue-65", "no-underline", "font-medium", "cursor-pointer" ]);
  var contentHeadingClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "mb-6", "text-lg", "font-normal", "leading-loose", "flex", "items-center" ]);
  var contentHeading = function (iprops) {
      return Halogen_HTML_Elements.h3(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(contentHeadingClasses) ])(iprops));
  };
  var contentHeading_ = contentHeading([  ]);
  var captionClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "block", "font-light", "mb-6", "text-grey-70", "text-sm", "tracking-wide", "uppercase" ]);
  var caption = function (iprops) {
      return Halogen_HTML_Elements.h4(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(captionClasses) ])(iprops));
  };
  var caption_ = caption([  ]);
  exports["linkClasses"] = linkClasses;
  exports["mutedClasses"] = mutedClasses;
  exports["subHeading_"] = subHeading_;
  exports["contentHeading_"] = contentHeading_;
  exports["caption_"] = caption_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Block.FormField"] = $PS["D3Tagless.Block.FormField"] || {};
  var exports = $PS["D3Tagless.Block.FormField"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML = $PS["Halogen.HTML"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_Block_Format = $PS["Ocelot.Block.Format"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var labelClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "block", "font-medium", "leading-loose", "text-black-20" ]);
  var helpTextClasses = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Ocelot_Block_Format.mutedClasses)(Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "block", "font-light", "pt-3" ]));
  var helpText = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(helpTextClasses) ])(iprops));
  };
  var helpText_ = helpText([  ]);
  var fieldClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "w-full" ]);
  var errorTextClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "block", "text-red", "font-medium", "pt-3" ]);
  var error = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(errorTextClasses) ])(iprops));
  };
  var error_ = error([  ]);
  var field$prime = function (config) {
      return function (iprops) {
          return function (html) {
              return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(fieldClasses) ])(iprops))([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.classes(labelClasses), Halogen_HTML_Properties["for"](config.inputId) ])([ Halogen_HTML.fromPlainHTML(config.label) ]), html, error_(config.error), helpText_(config.helpText) ]);
          };
      };
  };
  var field = function (config) {
      return function (iprops) {
          return function (html) {
              return field$prime(config)(iprops)(Halogen_HTML_Elements.div([ Ocelot_HTML_Properties.css("my-1") ])(html));
          };
      };
  };
  var field_ = function (config) {
      return field(config)([  ]);
  };
  exports["field_"] = field_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Block.Toggle"] = $PS["D3Tagless.Block.Toggle"] || {};
  var exports = $PS["D3Tagless.Block.Toggle"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var toggleClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "transition-1/8", "inline-flex", "justify-center", "items-center", "content-box", "h-5", "w-5", "p-1", "rounded-full", "mr-3", "before:bg-white", "before:h-full", "before:w-full", "before:rounded-full", "before:no-content", "before:shadow" ]);
  var labelClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "flex", "flex-row", "items-center", "inline-block", "py-1", "cursor-pointer", "leading-loose", "text-black-20" ]);
  var inputClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "checked:sibling:bg-blue-88", "checked:sibling:pl-5", "!checked:sibling:bg-grey-80", "!checked:sibling:pr-5", "offscreen" ]);
  var toggle = function (iprops) {
      var iprops$prime = Data_Semigroup.append(Data_Semigroup.semigroupArray)(iprops)([ Halogen_HTML_Properties.classes(inputClasses), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputCheckbox.value) ]);
      return Halogen_HTML_Elements.label([ Halogen_HTML_Properties.classes(labelClasses) ])([ Halogen_HTML_Elements.input(iprops$prime), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes(toggleClasses) ])([  ]) ]);
  };
  exports["toggle"] = toggle;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Instance.Simulation"] = $PS["D3Tagless.Instance.Simulation"] || {};
  var exports = $PS["D3Tagless.Instance.Simulation"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Selection = $PS["D3.Selection"];
  var D3_Selection_Functions = $PS["D3.Selection.Functions"];
  var D3_Simulation_Functions = $PS["D3.Simulation.Functions"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var run_D3M_Simulation = function (simulation) {
      return function (v) {
          return Control_Monad_State_Trans.runStateT(v)(simulation);
      };
  };
  var monadStateD3SimM = Control_Monad_State_Trans.monadStateStateT(Effect.monadEffect);
  var monadEffD3SimM = Control_Monad_State_Trans.monadEffectState(Effect_Class.monadEffectEffect);
  var monadD3SimM = Control_Monad_State_Trans.monadStateT(Effect.monadEffect);
  var selectionMD3Selection_D3S = new D3Tagless_Capabilities.SelectionM(function () {
      return monadD3SimM;
  }, function (s_) {
      return D3_Selection_Functions.selectionAppendElement(selectionMD3Selection_D3S)(s_);
  }, function (selector) {
      return D3_Selection_Functions.selectionAttach(selectionMD3Selection_D3S)(selector);
  }, function (s_) {
      return D3_Selection_Functions.selectionFilterSelection(selectionMD3Selection_D3S)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionMergeSelections(selectionMD3Selection_D3S)(s_);
  }, function (s_) {
      return D3_Simulation_Functions.simulationOn(monadStateD3SimM)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionOpenSelection(selectionMD3Selection_D3S)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionSelectUnder(selectionMD3Selection_D3S)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionModifySelection(selectionMD3Selection_D3S)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionJoin(selectionMD3Selection_D3S)(s_);
  }, function (s_) {
      return D3_Selection_Functions.selectionUpdateJoin(selectionMD3Selection_D3S)(s_);
  });                                                                               
  var exec_D3M_Simulation = function (simulation) {
      return function (v) {
          return Control_Applicative.liftA1(Effect.applicativeEffect)(Data_Tuple.snd)(Control_Monad_State_Trans.runStateT(v)(simulation));
      };
  };
  var runWithD3_Simulation = function (dictBind) {
      return function (dictMonadState) {
          return function (dictMonadEffect) {
              return function (state_T) {
                  return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (state) {
                      return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadEffect)(exec_D3M_Simulation(state)(state_T)))(function (state$prime) {
                          return Control_Monad_State_Class.modify_(dictMonadState)(function (v) {
                              return state$prime;
                          });
                      });
                  });
              };
          };
      };
  };
  var evalEffectSimulation = function (dictBind) {
      return function (dictMonadState) {
          return function (dictMonadEffect) {
              return function (state_T) {
                  return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (state) {
                      return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadEffect)(run_D3M_Simulation(state)(state_T)))(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Control_Monad_State_Class.modify_(dictMonadState)(function (v1) {
                              return v.value1;
                          }))(function () {
                              return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(v.value0);
                          });
                      });
                  });
              };
          };
      };
  };
  var bindD3SimM = Control_Monad_State_Trans.bindStateT(Effect.monadEffect);  
  var applicativeD3SimM = Control_Monad_State_Trans.applicativeStateT(Effect.monadEffect);
  var simulationMD3Selection_D3 = new D3Tagless_Capabilities.SimulationM(function () {
      return monadD3SimM;
  }, function () {
      return selectionMD3Selection_D3S;
  }, D3_Simulation_Functions.simulationUpdateForceStatuses(monadStateD3SimM), function (v) {
      return function (v1) {
          if (v1 instanceof D3_Simulation_Types.StepTransformFFI) {
              return Control_Applicative.pure(applicativeD3SimM)(Data_Unit.unit);
          };
          if (v1 instanceof D3_Simulation_Types.Step) {
              return Control_Bind.bind(bindD3SimM)(D3Tagless_Capabilities.simulationHandle(simulationMD3Selection_D3))(function (handle) {
                  var makeTick = function (v2) {
                      var v3 = Data_Functor.mapFlipped(Data_Functor.functorArray)(v1.value1)(D3_Selection.applySelectionAttributeD3(v1.value0));
                      return Data_Unit.unit;
                  };
                  var v2 = D3_FFI.onTick_(handle)(v)(makeTick);
                  return Control_Applicative.pure(applicativeD3SimM)(Data_Unit.unit);
              });
          };
          throw new Error("Failed pattern match at D3Tagless.Instance.Simulation (line 84, column 1 - line 119, column 33): " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, function (dictEq) {
      return function (selection) {
          return D3_Simulation_Functions.simulationMergeNewData(dictEq)(bindD3SimM)(monadStateD3SimM)(selection);
      };
  }, function (label) {
      return Control_Bind.bind(bindD3SimM)(D3Tagless_Capabilities.simulationHandle(simulationMD3Selection_D3))(function (handle) {
          var v = D3_FFI.disableTick_(handle)(label);
          return Control_Applicative.pure(applicativeD3SimM)(Data_Unit.unit);
      });
  }, function (v) {
      return D3_Simulation_Functions.simulationSetVariable(monadStateD3SimM)(v);
  }, function (dictEq) {
      return D3_Simulation_Functions.simulationSetLinks(dictEq)(bindD3SimM)(monadStateD3SimM);
  }, function (selection) {
      return D3_Simulation_Functions.simulationSetLinksFromSelection(bindD3SimM)(monadStateD3SimM)(selection);
  }, D3_Simulation_Functions.simulationSetNodes(bindD3SimM)(monadStateD3SimM), function (selection) {
      return D3_Simulation_Functions.simulationSetNodesFromSelection(bindD3SimM)(monadStateD3SimM)(selection);
  }, Data_Lens_Getter.use(monadStateD3SimM)(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget)), D3_Simulation_Functions.simulationStart(monadStateD3SimM), D3_Simulation_Functions.simulationStop(monadStateD3SimM));
  exports["runWithD3_Simulation"] = runWithD3_Simulation;
  exports["evalEffectSimulation"] = evalEffectSimulation;
  exports["bindD3SimM"] = bindD3SimM;
  exports["monadEffD3SimM"] = monadEffD3SimM;
  exports["monadStateD3SimM"] = monadStateD3SimM;
  exports["selectionMD3Selection_D3S"] = selectionMD3Selection_D3S;
  exports["simulationMD3Selection_D3"] = simulationMD3Selection_D3;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["D3Tagless.Utility"] = $PS["D3Tagless.Utility"] || {};
  var exports = $PS["D3Tagless.Utility"];
  var Control_Applicative = $PS["Control.Applicative"];
  var D3_FFI = $PS["D3.FFI"];
  var Debug = $PS["Debug"];                
  var removeExistingSVG = function (dictSelectionM) {
      return function (rootSelector) {
          var root = D3_FFI.d3SelectFirstInDOM_(rootSelector);
          var previous = D3_FFI.d3SelectionSelect_(rootSelector + " svg")(root);
          return Control_Applicative.pure((dictSelectionM.Monad0()).Applicative0())((function () {
              var v = D3_FFI.d3SelectionIsEmpty_(previous);
              if (v) {
                  return Debug.spy()("no previous SVG to remove")(previous);
              };
              if (!v) {
                  return Debug.spy()("removed previous SVG")(D3_FFI.d3RemoveSelection_(previous));
              };
              throw new Error("Failed pattern match at D3Tagless.Utility (line 18, column 5 - line 20, column 72): " + [ v.constructor.name ]);
          })());
      };
  };
  exports["removeExistingSVG"] = removeExistingSVG;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Fold"] = $PS["Data.Lens.Fold"] || {};
  var exports = $PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Newtype = $PS["Data.Newtype"];
  var foldMapOf = Data_Newtype.under()()(Data_Lens_Internal_Forget.Forget);
  var preview = function (p) {
      var $98 = Data_Newtype.unwrap();
      var $99 = foldMapOf(p)(function ($101) {
          return Data_Maybe_First.First(Data_Maybe.Just.create($101));
      });
      return function ($100) {
          return $98($99($100));
      };
  };
  exports["preview"] = preview;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Prism"] = $PS["Data.Lens.Prism"] || {};
  var exports = $PS["Data.Lens.Prism"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];           
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
              };
          };
      };
  };
  exports["prism"] = prism;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.Lens.Prism.Maybe"] = $PS["Data.Lens.Prism.Maybe"] || {};
  var exports = $PS["Data.Lens.Prism.Maybe"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_Prism = $PS["Data.Lens.Prism"];
  var Data_Maybe = $PS["Data.Maybe"];
  var _Just = function (dictChoice) {
      return Data_Lens_Prism.prism(Data_Maybe.Just.create)(Data_Maybe.maybe(new Data_Either.Left(Data_Maybe.Nothing.value))(Data_Either.Right.create))(dictChoice);
  };
  exports["_Just"] = _Just;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  exports["random"] = $foreign.random;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Foreign = $PS["Foreign"];
  var unsafeReadProp = function (dictMonad) {
      return function (k) {
          return function (value) {
              return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
          };
      };
  };
  var readProp = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  exports["readProp"] = readProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Aff.Driver.State"] = $PS["Halogen.Aff.Driver.State"] || {};
  var exports = $PS["Halogen.Aff.Driver.State"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX_ = function (dictApplicative) {
      return function (f) {
          return unDriverStateX(function (st) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
          });
      };
  };
  var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX = function (dictFunctor) {
      return function (f) {
          return unDriverStateX(function (st) {
              return mkRenderStateX(f(st.rendering));
          });
      };
  };
  var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
  var mapDriverState = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var initDriverState = function (component) {
      return function (input) {
          return function (handler) {
              return function (lchs) {
                  return function __do() {
                      var selfRef = Effect_Ref["new"]({})();
                      var childrenIn = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var childrenOut = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var handlerRef = Effect_Ref["new"](handler)();
                      var pendingQueries = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingOuts = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingHandlers = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var fresh = Effect_Ref["new"](1)();
                      var subscriptions = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
                      var forks = Effect_Ref["new"](Data_Map_Internal.empty)();
                      var ds = {
                          component: component,
                          state: component.initialState(input),
                          refs: Data_Map_Internal.empty,
                          children: Halogen_Data_Slot.empty,
                          childrenIn: childrenIn,
                          childrenOut: childrenOut,
                          selfRef: selfRef,
                          handlerRef: handlerRef,
                          pendingQueries: pendingQueries,
                          pendingOuts: pendingOuts,
                          pendingHandlers: pendingHandlers,
                          rendering: Data_Maybe.Nothing.value,
                          fresh: fresh,
                          subscriptions: subscriptions,
                          forks: forks,
                          lifecycleHandlers: lchs
                      };
                      Effect_Ref.write(ds)(selfRef)();
                      return mkDriverStateXRef(selfRef);
                  };
              };
          };
      };
  };
  exports["mapDriverState"] = mapDriverState;
  exports["unDriverStateX"] = unDriverStateX;
  exports["renderStateX"] = renderStateX;
  exports["renderStateX_"] = renderStateX_;
  exports["unRenderStateX"] = unRenderStateX;
  exports["initDriverState"] = initDriverState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Query.ChildQuery"] = $PS["Halogen.Query.ChildQuery"] || {};
  var exports = $PS["Halogen.Query.ChildQuery"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
  exports["unChildQueryBox"] = unChildQueryBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Query.Input"] = $PS["Halogen.Query.Input"] || {};
  var exports = $PS["Halogen.Query.Input"];
  var RefUpdate = (function () {
      function RefUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RefUpdate.create = function (value0) {
          return function (value1) {
              return new RefUpdate(value0, value1);
          };
      };
      return RefUpdate;
  })();
  var Action = (function () {
      function Action(value0) {
          this.value0 = value0;
      };
      Action.create = function (value0) {
          return new Action(value0);
      };
      return Action;
  })();
  exports["RefUpdate"] = RefUpdate;
  exports["Action"] = Action;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Subscription"] = $PS["Halogen.Subscription"] || {};
  var exports = $PS["Halogen.Subscription"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];
  var unsubscribe = function (v) {
      return v;
  };
  var subscribe = function (v) {
      return function (k) {
          return v((function () {
              var $55 = Data_Functor["void"](Effect.functorEffect);
              return function ($56) {
                  return $55(k($56));
              };
          })());
      };
  };                                                                               
  var notify = function (v) {
      return function (a) {
          return v(a);
      };
  };
  var create = function __do() {
      var subscribers = Effect_Ref["new"]([  ])();
      return {
          emitter: function (k) {
              return function __do() {
                  Effect_Ref.modify_(function (v) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([ k ]);
                  })(subscribers)();
                  return Effect_Ref.modify_(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(subscribers);
              };
          },
          listener: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(subscribers))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  exports["create"] = create;
  exports["notify"] = notify;
  exports["subscribe"] = subscribe;
  exports["unsubscribe"] = unsubscribe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Aff.Driver.Eval"] = $PS["Halogen.Aff.Driver.Eval"] || {};
  var exports = $PS["Halogen.Aff.Driver.Eval"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Applicative_Free = $PS["Control.Applicative.Free"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Query_ChildQuery = $PS["Halogen.Query.ChildQuery"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var unsubscribe = function (sid) {
      return function (ref) {
          return function __do() {
              var v = Effect_Ref.read(ref)();
              var subs = Effect_Ref.read(v.subscriptions)();
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Halogen_Subscription.unsubscribe)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))();
          };
      };
  };
  var queueOrRun = function (ref) {
      return function (au) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return au;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 182, column 33 - line 184, column 57): " + [ v.constructor.name ]);
          });
      };
  };
  var handleLifecycle = function (lchs) {
      return function (f) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
              initializers: Data_List_Types.Nil.value,
              finalizers: Data_List_Types.Nil.value
          })(lchs)))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (result) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v.finalizers))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v.initializers))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result);
                          });
                      });
                  });
              });
          });
      };
  };
  var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var fresh = function (f) {
      return function (ref) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
                  return {
                      state: i + 1 | 0,
                      value: f(i)
                  };
              })(v.fresh));
          });
      };
  };
  var evalQ = function (render) {
      return function (ref) {
          return function (q) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                  return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
              });
          };
      };
  };
  var evalM = function (render) {
      return function (initRef) {
          return function (v) {
              var evalChildQuery = function (ref) {
                  return function (cqb) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                          return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
                              var evalChild = function (v3) {
                                  return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (dsx) {
                                      return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                          return evalQ(render)(ds.selfRef)(v2.value1);
                                      })(dsx);
                                  }));
                              };
                              return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
                          })(cqb);
                      });
                  };
              };
              var go = function (ref) {
                  return function (v1) {
                      if (v1 instanceof Halogen_Query_HalogenM.State) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              var v3 = v1.value0(v2.state);
                              if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                              };
                              if (Data_Boolean.otherwise) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                                      component: v2.component,
                                      state: v3.value1,
                                      refs: v2.refs,
                                      children: v2.children,
                                      childrenIn: v2.childrenIn,
                                      childrenOut: v2.childrenOut,
                                      selfRef: v2.selfRef,
                                      handlerRef: v2.handlerRef,
                                      pendingQueries: v2.pendingQueries,
                                      pendingOuts: v2.pendingOuts,
                                      pendingHandlers: v2.pendingHandlers,
                                      rendering: v2.rendering,
                                      fresh: v2.fresh,
                                      subscriptions: v2.subscriptions,
                                      forks: v2.forks,
                                      lifecycleHandlers: v2.lifecycleHandlers
                                  })(ref)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                                      });
                                  });
                              };
                              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 86, column 7 - line 92, column 21): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (sid) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Halogen_Subscription.subscribe(v1.value0(sid))(function (act) {
                                  return handleAff(evalF(render)(ref)(new Halogen_Query_Input.Action(act)));
                              })))(function (finalize) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(sid)(finalize)))(v2.subscriptions)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(sid));
                                      });
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(unsubscribe(v1.value0)(ref)))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Lift) {
                          return v1.value0;
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
                          return evalChildQuery(ref)(v1.value0);
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Raise) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (handler) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(handler(v1.value0)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Par) {
                          return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp((function () {
                              var $79 = Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
                              var $80 = evalM(render)(ref);
                              return function ($81) {
                                  return $79($80($81));
                              };
                          })())(v1.value0)));
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Fork) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (fid) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (doneRef) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                          Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(fid))(v2.forks)();
                                          return Effect_Ref.write(true)(doneRef)();
                                      }))(evalM(render)(ref)(v1.value0))))(function (fiber) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(doneRef))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(fid)(fiber))(v2.forks))))(function () {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(fid));
                                          });
                                      });
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Kill) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (forkMap) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(forkMap)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
                          });
                      };
                      throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 83, column 12 - line 133, column 33): " + [ v1.constructor.name ]);
                  };
              };
              return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
          };
      };
  };
  var evalF = function (render) {
      return function (ref) {
          return function (v) {
              if (v instanceof Halogen_Query_Input.RefUpdate) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
                      return {
                          component: st.component,
                          state: st.state,
                          refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
                          children: st.children,
                          childrenIn: st.childrenIn,
                          childrenOut: st.childrenOut,
                          selfRef: st.selfRef,
                          handlerRef: st.handlerRef,
                          pendingQueries: st.pendingQueries,
                          pendingOuts: st.pendingOuts,
                          pendingHandlers: st.pendingHandlers,
                          rendering: st.rendering,
                          fresh: st.fresh,
                          subscriptions: st.subscriptions,
                          forks: st.forks,
                          lifecycleHandlers: st.lifecycleHandlers
                      };
                  })));
              };
              if (v instanceof Halogen_Query_Input.Action) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                      return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
                  });
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 52, column 20 - line 58, column 62): " + [ v.constructor.name ]);
          };
      };
  };
  exports["evalF"] = evalF;
  exports["evalQ"] = evalQ;
  exports["evalM"] = evalM;
  exports["handleLifecycle"] = handleLifecycle;
  exports["queueOrRun"] = queueOrRun;
  exports["handleAff"] = handleAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Aff.Driver"] = $PS["Halogen.Aff.Driver"] || {};
  var exports = $PS["Halogen.Aff.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_Eval = $PS["Halogen.Aff.Driver.Eval"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];                
  var newLifecycleHandlers = Effect_Ref["new"]({
      initializers: Data_List_Types.Nil.value,
      finalizers: Data_List_Types.Nil.value
  });
  var handlePending = function (ref) {
      return function __do() {
          var queue = Effect_Ref.read(ref)();
          Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(queue)((function () {
              var $28 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
              return function ($29) {
                  return Halogen_Aff_Driver_Eval.handleAff($28(Data_List.reverse($29)));
              };
          })())();
      };
  };
  var cleanupSubscriptionsAndForks = function (v) {
      return function __do() {
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(Halogen_Subscription.unsubscribe)))(Effect_Ref.read(v.subscriptions))();
          Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
              var $30 = Effect_Aff.killFiber(Effect_Exception.error("finalized"));
              return function ($31) {
                  return Halogen_Aff_Driver_Eval.handleAff($30($31));
              };
          })()))(Effect_Ref.read(v.forks))();
          return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
      };
  };
  var runUI = function (renderSpec) {
      return function (component) {
          return function (i) {
              var squashChildInitializers = function (lchs) {
                  return function (preInits) {
                      return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                          var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
                          return Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                              handlePending(st.pendingQueries)();
                                              return handlePending(st.pendingOuts)();
                                          });
                                      });
                                  }), preInits),
                                  finalizers: handlers.finalizers
                              };
                          })(lchs);
                      });
                  };
              };
              var runComponent = function (lchs) {
                  return function (handler) {
                      return function (j) {
                          return Halogen_Component.unComponent(function (c) {
                              return function __do() {
                                  var lchs$prime = newLifecycleHandlers();
                                  var $$var = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(lchs$prime)();
                                  var pre = Effect_Ref.read(lchs)();
                                  Effect_Ref.write({
                                      initializers: Data_List_Types.Nil.value,
                                      finalizers: pre.finalizers
                                  })(lchs)();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX((function () {
                                      var $32 = render(lchs);
                                      return function ($33) {
                                          return $32((function (v) {
                                              return v.selfRef;
                                          })($33));
                                      };
                                  })()))(Effect_Ref.read($$var))();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(pre.initializers))(Effect_Ref.read($$var))();
                                  return $$var;
                              };
                          });
                      };
                  };
              };
              var renderChild = function (lchs) {
                  return function (handler) {
                      return function (childrenInRef) {
                          return function (childrenOutRef) {
                              return Halogen_Component.unComponentSlot(function (slot) {
                                  return function __do() {
                                      var childrenIn = Data_Functor.map(Effect.functorEffect)(slot.pop)(Effect_Ref.read(childrenInRef))();
                                      var $$var = (function () {
                                          if (childrenIn instanceof Data_Maybe.Just) {
                                              Effect_Ref.write(childrenIn.value0.value1)(childrenInRef)();
                                              var dsx = Effect_Ref.read(childrenIn.value0.value0)();
                                              Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                  return function __do() {
                                                      Data_Function.flip(Effect_Ref.write)(st.handlerRef)((function () {
                                                          var $34 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                          return function ($35) {
                                                              return $34(slot.output($35));
                                                          };
                                                      })())();
                                                      return Halogen_Aff_Driver_Eval.handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Receive(slot.input, Data_Unit.unit))))();
                                                  };
                                              })(dsx)();
                                              return childrenIn.value0.value0;
                                          };
                                          if (childrenIn instanceof Data_Maybe.Nothing) {
                                              return runComponent(lchs)((function () {
                                                  var $36 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                  return function ($37) {
                                                      return $36(slot.output($37));
                                                  };
                                              })())(slot.input)(slot.component)();
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 211, column 14 - line 220, column 98): " + [ childrenIn.constructor.name ]);
                                      })();
                                      var isDuplicate = Data_Functor.map(Effect.functorEffect)(function ($38) {
                                          return Data_Maybe.isJust(slot.get($38));
                                      })(Effect_Ref.read(childrenOutRef))();
                                      Control_Applicative.when(Effect.applicativeEffect)(isDuplicate)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                                      Effect_Ref.modify_(slot.set($$var))(childrenOutRef)();
                                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read($$var))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v) {
                                          if (v instanceof Data_Maybe.Nothing) {
                                              return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                          };
                                          if (v instanceof Data_Maybe.Just) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v.value0));
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 225, column 37 - line 227, column 50): " + [ v.constructor.name ]);
                                      }))();
                                  };
                              });
                          };
                      };
                  };
              };
              var render = function (lchs) {
                  return function ($$var) {
                      return function __do() {
                          var v = Effect_Ref.read($$var)();
                          var shouldProcessHandlers = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
                          Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
                          Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
                          Effect_Ref.write(v.children)(v.childrenIn)();
                          var selfRef = Control_Category.identity(Control_Category.categoryFn)(v.selfRef);
                          var pendingQueries = Control_Category.identity(Control_Category.categoryFn)(v.pendingQueries);
                          var pendingHandlers = Control_Category.identity(Control_Category.categoryFn)(v.pendingHandlers);
                          var handler = (function () {
                              var $39 = Halogen_Aff_Driver_Eval.queueOrRun(pendingHandlers);
                              var $40 = Data_Functor["void"](Effect_Aff.functorAff);
                              var $41 = Halogen_Aff_Driver_Eval.evalF(render)(selfRef);
                              return function ($42) {
                                  return $39($40($41($42)));
                              };
                          })();
                          var childHandler = (function () {
                              var $43 = Halogen_Aff_Driver_Eval.queueOrRun(pendingQueries);
                              return function ($44) {
                                  return $43(handler(Halogen_Query_Input.Action.create($44)));
                              };
                          })();
                          var rendering = renderSpec.render(function ($45) {
                              return Halogen_Aff_Driver_Eval.handleAff(handler($45));
                          })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                          var children = Effect_Ref.read(v.childrenOut)();
                          var childrenIn = Effect_Ref.read(v.childrenIn)();
                          Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(childrenIn)(function (v1) {
                              return function __do() {
                                  var childDS = Effect_Ref.read(v1)();
                                  Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(childDS)();
                                  return finalize(lchs)(childDS)();
                              };
                          })();
                          Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
                              return {
                                  component: ds$prime.component,
                                  state: ds$prime.state,
                                  refs: ds$prime.refs,
                                  children: children,
                                  childrenIn: ds$prime.childrenIn,
                                  childrenOut: ds$prime.childrenOut,
                                  selfRef: ds$prime.selfRef,
                                  handlerRef: ds$prime.handlerRef,
                                  pendingQueries: ds$prime.pendingQueries,
                                  pendingOuts: ds$prime.pendingOuts,
                                  pendingHandlers: ds$prime.pendingHandlers,
                                  rendering: new Data_Maybe.Just(rendering),
                                  fresh: ds$prime.fresh,
                                  subscriptions: ds$prime.subscriptions,
                                  forks: ds$prime.forks,
                                  lifecycleHandlers: ds$prime.lifecycleHandlers
                              };
                          }))();
                          return Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v1) {
                              return function __do() {
                                  var handlers = Effect_Ref.read(pendingHandlers)();
                                  Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(pendingHandlers)();
                                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
                                      var $46 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
                                      return function ($47) {
                                          return Halogen_Aff_Driver_Eval.handleAff($46(Data_List.reverse($47)));
                                      };
                                  })())(handlers)();
                                  var mmore = Effect_Ref.read(pendingHandlers)();
                                  var $21 = Data_Maybe.maybe(false)(Data_List["null"])(mmore);
                                  if ($21) {
                                      return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                  };
                                  return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                              };
                          }))();
                      };
                  };
              };
              var finalize = function (lchs) {
                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                      return function __do() {
                          cleanupSubscriptionsAndForks(st)();
                          var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
                          Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: handlers.initializers,
                                  finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                              };
                          })(lchs)();
                          return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
                              return function __do() {
                                  var dsx = Effect_Ref.read(v)();
                                  return finalize(lchs)(dsx)();
                              };
                          })();
                      };
                  });
              };
              var evalDriver = function (disposed) {
                  return function (ref) {
                      return function (q) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
                              if (v) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                              };
                              return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
                          });
                      };
                  };
              };
              var dispose = function (disposed) {
                  return function (lchs) {
                      return function (dsx) {
                          return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                              var v = Effect_Ref.read(disposed)();
                              if (v) {
                                  return Data_Unit.unit;
                              };
                              Effect_Ref.write(true)(disposed)();
                              finalize(lchs)(dsx)();
                              return Halogen_Aff_Driver_State.unDriverStateX(function (v1) {
                                  return function __do() {
                                      var v2 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(v1.selfRef))();
                                      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v2.rendering)(renderSpec.dispose)();
                                  };
                              })(dsx)();
                          });
                      };
                  };
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (lchs) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (fresh) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (disposed) {
                          return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                              var sio = Halogen_Subscription.create();
                              var dsx = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(lchs)((function () {
                                  var $48 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                                  var $49 = Halogen_Subscription.notify(sio.listener);
                                  return function ($50) {
                                      return $48($49($50));
                                  };
                              })())(i)(component))();
                              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                  return Control_Applicative.pure(Effect.applicativeEffect)({
                                      query: evalDriver(disposed)(st.selfRef),
                                      messages: sio.emitter,
                                      dispose: dispose(disposed)(lchs)(dsx)
                                  });
                              })(dsx)();
                          });
                      });
                  });
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_querySelector"](qs);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var input = "input";
  var domcontentloaded = "DOMContentLoaded";
  var change = "change";
  exports["change"] = change;
  exports["domcontentloaded"] = domcontentloaded;
  exports["input"] = input;
})(PS);
(function(exports) {
  "use strict";

  exports._readyState = function (doc) {
    return function () {
      return doc.readyState;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.HTML.HTMLDocument.ReadyState"] = $PS["Web.HTML.HTMLDocument.ReadyState"] || {};
  var exports = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Interactive = (function () {
      function Interactive() {

      };
      Interactive.value = new Interactive();
      return Interactive;
  })();
  var Complete = (function () {
      function Complete() {

      };
      Complete.value = new Complete();
      return Complete;
  })();
  var parse = function (v) {
      if (v === "loading") {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === "interactive") {
          return new Data_Maybe.Just(Interactive.value);
      };
      if (v === "complete") {
          return new Data_Maybe.Just(Complete.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["Loading"] = Loading;
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var toParentNode = Unsafe_Coerce.unsafeCoerce; 
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var readyState = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)((function () {
          var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
          };
      })());
      return function ($1) {
          return $0($foreign["_readyState"]($1));
      };
  })();
  exports["toDocument"] = toDocument;
  exports["toParentNode"] = toParentNode;
  exports["readyState"] = readyState;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var fromElement = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["toNode"] = toNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.Aff.Util"] = $PS["Halogen.Aff.Util"] || {};
  var exports = $PS["Halogen.Aff.Util"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var selectElement = function (query) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)((function () {
          var $2 = Web_DOM_ParentNode.querySelector(query);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument.toParentNode($3));
          };
      })())(Web_HTML_Window.document))(Web_HTML.window)))(function (mel) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(mel));
      });
  };
  var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var awaitLoad = Effect_Aff.makeAff(function (callback) {
      return function __do() {
          var rs = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
          if (rs instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
              var et = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
              var listener = Web_Event_EventTarget.eventListener(function (v) {
                  return callback(new Data_Either.Right(Data_Unit.unit));
              })();
              Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et)();
              return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et));
          };
          callback(new Data_Either.Right(Data_Unit.unit))();
          return Effect_Aff.nonCanceler;
      };
  });
  var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(awaitLoad)(function () {
      return Control_Bind.bind(Effect_Aff.bindAff)(selectElement("body"))(function (body) {
          return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Could not find body")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(body);
      });
  });
  exports["awaitBody"] = awaitBody;
  exports["runHalogenAff"] = runHalogenAff;
})(PS);
(function(exports) {
  "use strict";

  exports._currentTarget = function (e) {
    return e.currentTarget;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var currentTarget = function ($5) {
      return Data_Nullable.toMaybe($foreign["_currentTarget"]($5));
  };
  exports["currentTarget"] = currentTarget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.UIEvent.MouseEvent.EventTypes"] = $PS["Web.UIEvent.MouseEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var click = "click";
  exports["click"] = click;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.HTML.Events"] = $PS["Halogen.HTML.Events"] || {};
  var exports = $PS["Halogen.HTML.Events"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_UIEvent_MouseEvent_EventTypes = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var mouseHandler = Unsafe_Coerce.unsafeCoerce;
  var handler$prime = function (et) {
      return function (f) {
          return Halogen_HTML_Core.handler(et)(function (ev) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_Input.Action.create)(f(ev));
          });
      };
  };
  var handler = function (et) {
      return function (f) {
          return Halogen_HTML_Core.handler(et)(function (ev) {
              return new Data_Maybe.Just(new Halogen_Query_Input.Action(f(ev)));
          });
      };
  };                             
  var onChange = handler(Web_HTML_Event_EventTypes.change);
  var onClick = (function () {
      var $1 = handler(Web_UIEvent_MouseEvent_EventTypes.click);
      return function ($2) {
          return $1(mouseHandler($2));
      };
  })();
  var addForeignPropHandler = function (key) {
      return function (prop) {
          return function (reader) {
              return function (f) {
                  var go = function (a) {
                      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(reader)(Foreign_Index.readProp(Data_Identity.monadIdentity)(prop))(Foreign.unsafeToForeign(a));
                  };
                  return handler$prime(key)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.currentTarget)(function (e) {
                      return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function ($71) {
                          return Data_Maybe.Just.create(f($71));
                      })(Control_Monad_Except.runExcept(go(e)));
                  }));
              };
          };
      };
  };
  var onChecked = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("checked")(Foreign.readBoolean(Data_Identity.monadIdentity)); 
  var onValueInput = addForeignPropHandler(Web_HTML_Event_EventTypes.input)("value")(Foreign.readString(Data_Identity.monadIdentity));
  exports["onChange"] = onChange;
  exports["onClick"] = onClick;
  exports["onValueInput"] = onValueInput;
  exports["onChecked"] = onChecked;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.VDom.DOM"] = $PS["Halogen.VDom.DOM"] || {};
  var exports = $PS["Halogen.VDom.DOM"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var haltWidget = function (v) {
      return Halogen_VDom_Machine.halt(v.widget);
  };
  var patchWidget = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Widget) {
          var res = Halogen_VDom_Machine.step(state.widget, vdom.value0);
          var res$prime = Halogen_VDom_Machine.unStep(function (v) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v.value0, {
                  build: state.build,
                  widget: res
              }, patchWidget, haltWidget));
          })(res);
          return res$prime;
      };
      haltWidget(state);
      return state.build(vdom);
  };
  var haltText = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      return Halogen_VDom_Util.removeChild(v.node, parent);
  };
  var patchText = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Text) {
          if (state.value === vdom.value0) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
          };
          if (Data_Boolean.otherwise) {
              var nextState = {
                  build: state.build,
                  node: state.node,
                  value: vdom.value0
              };
              Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
          };
      };
      haltText(state);
      return state.build(vdom);
  };
  var haltKeyed = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forInE(v.children, function (v1, s) {
          return Halogen_VDom_Machine.halt(s);
      });
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var haltElem = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var eqElemSpec = function (ns1, v, ns2, v1) {
      var $56 = v === v1;
      if ($56) {
          if (ns1 instanceof Data_Maybe.Just && (ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0)) {
              return true;
          };
          if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
              return true;
          };
          return false;
      };
      return false;
  };
  var patchElem = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          var v1 = Data_Array.length(state.children);
          if (v1 === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
          };
          var onThis = function (ix, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (ix, s, v2) {
              var res = Halogen_VDom_Machine.step(s, v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (ix, v2) {
              var res = state.build(v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
      };
      haltElem(state);
      return state.build(vdom);
  };
  var patchKeyed = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          if (state.length === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children,
                  length: 0
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
          };
          var onThis = function (v2, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (v2, ix$prime, s, v3) {
              var res = Halogen_VDom_Machine.step(s, v3.value1);
              Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (v2, ix, v3) {
              var res = state.build(v3.value1);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2,
              length: v
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
      };
      haltKeyed(state);
      return state.build(vdom);
  };
  var buildWidget = function (v, build, w) {
      var res = v.buildWidget(v)(w);
      var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
              build: build,
              widget: res
          }, patchWidget, haltWidget));
      })(res);
      return res$prime;
  };
  var buildText = function (v, build, s) {
      var node = Halogen_VDom_Util.createTextNode(s, v.document);
      var state = {
          build: build,
          node: node,
          value: s
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchText, haltText));
  };
  var buildKeyed = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (k, ix, v1) {
          var res = build(v1.value1);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children,
          length: Data_Array.length(ch1)
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
  };
  var buildElem = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (ix, child) {
          var res = build(child);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.forE(ch1, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
  };
  var buildVDom = function (spec) {
      var build = function (v) {
          if (v instanceof Halogen_VDom_Types.Text) {
              return buildText(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Elem) {
              return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Keyed) {
              return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Widget) {
              return buildWidget(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Grafted) {
              return build(Halogen_VDom_Types.runGraft(v.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [ v.constructor.name ]);
      };
      return build;
  };
  exports["buildVDom"] = buildVDom;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.VDom.Thunk"] = $PS["Halogen.VDom.Thunk"] || {};
  var exports = $PS["Halogen.VDom.Thunk"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];        
  var Thunk = (function () {
      function Thunk(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Thunk.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Thunk(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Thunk;
  })();                                          
  var unsafeEqThunk = function (v, v1) {
      return Halogen_VDom_Util.refEq(v.value0, v1.value0) && (Halogen_VDom_Util.refEq(v.value1, v1.value1) && v.value1(v.value3, v1.value3));
  };
  var thunk = function (tid, eqFn, f, a) {
      return new Thunk(tid, eqFn, f, a);
  };
  var runThunk = function (v) {
      return v.value2(v.value3);
  };
  var buildThunk = function (toVDom) {
      var haltThunk = function (state) {
          return Halogen_VDom_Machine.halt(state.vdom);
      };
      var patchThunk = function (state, t2) {
          var $43 = unsafeEqThunk(state.thunk, t2);
          if ($43) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
          };
          var vdom = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
              vdom: vdom,
              thunk: t2
          }, patchThunk, haltThunk));
      };
      var renderThunk = function (spec) {
          return function (t) {
              var vdom = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
                  thunk: t,
                  vdom: vdom
              }, patchThunk, haltThunk));
          };
      };
      return renderThunk;
  };
  exports["buildThunk"] = buildThunk;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports._parentNode = getEffProp("parentNode");          

  exports._nextSibling = getEffProp("nextSibling");

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        parent.removeChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var parentNode = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_parentNode"]($4));
      };
  })();
  var nextSibling = (function () {
      var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($15) {
          return $14($foreign["_nextSibling"]($15));
      };
  })();
  exports["parentNode"] = parentNode;
  exports["nextSibling"] = nextSibling;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Halogen.VDom.Driver"] = $PS["Halogen.VDom.Driver"] || {};
  var exports = $PS["Halogen.VDom.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver = $PS["Halogen.Aff.Driver"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Thunk = $PS["Halogen.VDom.Thunk"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var substInParent = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
              };
              if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var removeChild = function (v) {
      return function __do() {
          var npn = Web_DOM_Node.parentNode(v.node)();
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
              return Web_DOM_Node.removeChild(v.node)(pn);
          })(npn)();
      };
  };
  var mkSpec = function (handler) {
      return function (renderChildRef) {
          return function (document) {
              var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                  return v.node;
              });
              var done = function (st) {
                  if (st instanceof Data_Maybe.Just) {
                      return Halogen_VDom_Machine.halt(st.value0);
                  };
                  return Data_Unit.unit;
              };
              var buildWidget = function (spec) {
                  var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap())(spec);
                  var renderComponentSlot = function (cs) {
                      var renderChild = Effect_Ref.read(renderChildRef)();
                      var rsx = renderChild(cs)();
                      var node = getNode(rsx);
                      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
                  };
                  var render = function (slot) {
                      if (slot instanceof Halogen_Component.ComponentSlot) {
                          return renderComponentSlot(slot.value0);
                      };
                      if (slot instanceof Halogen_Component.ThunkSlot) {
                          var step = buildThunk(slot.value0);
                          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step), new Data_Maybe.Just(step), patch, done));
                      };
                      throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [ slot.constructor.name ]);
                  };
                  var patch = function (st, slot) {
                      if (st instanceof Data_Maybe.Just) {
                          if (slot instanceof Halogen_Component.ComponentSlot) {
                              Halogen_VDom_Machine.halt(st.value0);
                              return renderComponentSlot(slot.value0);
                          };
                          if (slot instanceof Halogen_Component.ThunkSlot) {
                              var step$prime = Halogen_VDom_Machine.step(st.value0, slot.value0);
                              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step$prime), new Data_Maybe.Just(step$prime), patch, done));
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [ slot.constructor.name ]);
                      };
                      return render(slot);
                  };
                  return render;
              };
              var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
              return {
                  buildWidget: buildWidget,
                  buildAttributes: buildAttributes,
                  document: document
              };
          };
      };
  };
  var renderSpec = function (document) {
      return function (container) {
          var render = function (handler) {
              return function (child) {
                  return function (v) {
                      return function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return function __do() {
                                  var renderChildRef = Effect_Ref["new"](child)();
                                  var spec = mkSpec(handler)(renderChildRef)(document);
                                  var machine = Halogen_VDom_DOM.buildVDom(spec)(v);
                                  var node = Halogen_VDom_Machine.extract(machine);
                                  Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                                  return {
                                      machine: machine,
                                      node: node,
                                      renderChildRef: renderChildRef
                                  };
                              };
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Effect_Ref.write(child)(v1.value0.renderChildRef)();
                                  var parent = Web_DOM_Node.parentNode(v1.value0.node)();
                                  var nextSib = Web_DOM_Node.nextSibling(v1.value0.node)();
                                  var machine$prime = Halogen_VDom_Machine.step(v1.value0.machine, v);
                                  var newNode = Halogen_VDom_Machine.extract(machine$prime);
                                  Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(nextSib)(parent))();
                                  return {
                                      machine: machine$prime,
                                      node: newNode,
                                      renderChildRef: v1.value0.renderChildRef
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [ v1.constructor.name ]);
                      };
                  };
              };
          };
          return {
              render: render,
              renderChild: Control_Category.identity(Control_Category.categoryFn),
              removeChild: removeChild,
              dispose: removeChild
          };
      };
  };
  var runUI = function (component) {
      return function (i) {
          return function (element) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (document) {
                  return Halogen_Aff_Driver.runUI(renderSpec(document)(element))(component)(i);
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function(exports) {
  exports.decodeHtmlEntity = function(input) {
    if (typeof DOMParser === "undefined") {
      return input;
    }

    // Leading whitespaces are stripped by DOMParser
    var matches = /^\s+/.exec(input);
    var space = "";
    if (matches) {
      space = matches[0];
    }

    // https://stackoverflow.com/a/34064434
    var doc = new DOMParser().parseFromString(input, "text/html");
    return space + doc.documentElement.textContent;
  };
})(PS["Html.Parser"] = PS["Html.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Text.Parsing.StringParser"] = $PS["Text.Parsing.StringParser"] || {};
  var exports = $PS["Text.Parsing.StringParser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                
  var Parser = function (x) {
      return x;
  };
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (v2) {
              return {
                  pos: v1.pos,
                  error: v2.error
              };
          })(v(v1));
      };
  };
  var runParser = function (v) {
      return function (s) {
          return Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return v1.result;
          })(v({
              str: s,
              pos: 0
          }));
      };
  };
  var lazyParser = new Control_Lazy.Lazy(function (f) {
      return Parser(function (str) {
          return unParser(f(Data_Unit.unit))(str);
      });
  });
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          var $61 = Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return {
                  result: f(v1.result),
                  suffix: v1.suffix
              };
          });
          return function ($62) {
              return $61(v($62));
          };
      };
  });
  var fail = function (error) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos,
              error: error
          });
      };
  };
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result),
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a,
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0,
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0,
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser (line 90, column 7 - line 90, column 70): " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a,
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var v2 = v(s);
              if (v2 instanceof Data_Either.Left) {
                  if (s.pos === v2.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: v2.value0.error,
                          pos: v2.value0.pos
                      });
                  };
              };
              return v2;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadRecParser"] = monadRecParser;
  exports["lazyParser"] = lazyParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Text.Parsing.StringParser.Combinators"] = $PS["Text.Parsing.StringParser.Combinators"] || {};
  var exports = $PS["Text.Parsing.StringParser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var optional = function (p) {
      return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Unit.unit);
      }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Unit.unit));
  };
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var many1Till = function (p) {
      return function (end) {
          var ending = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(end)(function () {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Done(Data_List_NonEmpty.reverse(acc)));
              });
          };
          var $$continue = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (c) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Loop(Data_List_NonEmpty.cons(c)(acc)));
              });
          };
          var inner = function (acc) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(ending(acc))($$continue(acc));
          };
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (x) {
              return Control_Monad_Rec_Class.tailRecM(Text_Parsing_StringParser.monadRecParser)(inner)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(x));
          });
      };
  };
  var manyTill = function (p) {
      return function (end) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(many1Till(p)(end)));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var cons$prime = function (h) {
      return function (t) {
          return new Data_NonEmpty.NonEmpty(h, t);
      };
  };
  var sepEndBy1 = function (p) {
      return function (sep) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (a) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(sep)(function () {
                  return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(sepEndBy(p)(sep))(function (as) {
                      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(cons$prime(a)(as));
                  });
              }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_NonEmpty.singleton(a)));
          });
      };
  };
  var sepEndBy = function (p) {
      return function (sep) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(sepEndBy1(p)(sep)))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
      };
  };
  exports["many"] = many;
  exports["option"] = option;
  exports["optional"] = optional;
  exports["sepEndBy"] = sepEndBy;
  exports["manyTill"] = manyTill;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Text.Parsing.StringParser.CodeUnits"] = $PS["Text.Parsing.StringParser.CodeUnits"] || {};
  var exports = $PS["Text.Parsing.StringParser.CodeUnits"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodeUnits["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt,
                  suffix: {
                      str: s.str,
                      pos: s.pos + Data_String_CodeUnits.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos,
              error: "Expected '" + (nt + "'.")
          });
      };
  };
  var regex = function (pat) {
      var pattern = (function () {
          var v = Data_String_CodeUnits.stripPrefix("^")(pat);
          if (v instanceof Data_Maybe.Nothing) {
              return "^" + pat;
          };
          return pat;
      })();
      var matchRegex = function (r) {
          return function (v) {
              var remainder = Data_String_CodeUnits.drop(v.pos)(v.str);
              var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.head)(Data_String_Regex.match(r)(remainder));
              if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v1.value0.value0,
                      suffix: {
                          str: v.str,
                          pos: v.pos + Data_String_CodeUnits.length(v1.value0.value0) | 0
                      }
                  });
              };
              return new Data_Either.Left({
                  pos: v.pos,
                  error: "no match"
              });
          };
      };
      var v = Data_String_Regex.regex(pattern)(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Text_Parsing_StringParser.fail("Text.Parsing.StringParser.String.regex': illegal regex " + pat);
      };
      if (v instanceof Data_Either.Right) {
          return matchRegex(v.value0);
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.CodeUnits (line 127, column 3 - line 131, column 19): " + [ v.constructor.name ]);
  };
  var anyChar = function (v) {
      var v1 = Data_String_CodeUnits.charAt(v.pos)(v.str);
      if (v1 instanceof Data_Maybe.Just) {
          return new Data_Either.Right({
              result: v1.value0,
              suffix: {
                  str: v.str,
                  pos: v.pos + 1 | 0
              }
          });
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left({
              pos: v.pos,
              error: "Unexpected EOF"
          });
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.CodeUnits (line 51, column 3 - line 53, column 53): " + [ v1.constructor.name ]);
  };  
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
          var $33 = f(c);
          if ($33) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " did not satisfy predicate"));
      }));
  };
  var whiteSpace = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many(satisfy(function (c) {
      return c === "\x0a" || (c === "\x0d" || (c === " " || c === "\x09"));
  })))(function (cs) {
      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_String_CodeUnits.singleton)(cs));
  });
  var skipSpaces = Data_Functor["void"](Text_Parsing_StringParser.functorParser)(whiteSpace);
  exports["anyChar"] = anyChar;
  exports["string"] = string;
  exports["whiteSpace"] = whiteSpace;
  exports["skipSpaces"] = skipSpaces;
  exports["regex"] = regex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Html.Parser"] = $PS["Html.Parser"] || {};
  var exports = $PS["Html.Parser"];
  var $foreign = $PS["Html.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_CodeUnits = $PS["Text.Parsing.StringParser.CodeUnits"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var HtmlAttribute = (function () {
      function HtmlAttribute(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HtmlAttribute.create = function (value0) {
          return function (value1) {
              return new HtmlAttribute(value0, value1);
          };
      };
      return HtmlAttribute;
  })();
  var HtmlElement = (function () {
      function HtmlElement(value0) {
          this.value0 = value0;
      };
      HtmlElement.create = function (value0) {
          return new HtmlElement(value0);
      };
      return HtmlElement;
  })();
  var HtmlText = (function () {
      function HtmlText(value0) {
          this.value0 = value0;
      };
      HtmlText.create = function (value0) {
          return new HtmlText(value0);
      };
      return HtmlText;
  })();
  var HtmlComment = (function () {
      function HtmlComment(value0) {
          this.value0 = value0;
      };
      HtmlComment.create = function (value0) {
          return new HtmlComment(value0);
      };
      return HtmlComment;
  })();
  var textParser = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function ($36) {
      return HtmlText.create($foreign.decodeHtmlEntity($36));
  })(Text_Parsing_StringParser_CodeUnits.regex("[^<]+"));
  var selfClosingTags = [ "br", "img", "hr", "meta", "input", "embed", "area", "base", "col", "keygen", "link", "param", "source", "command", "link", "track", "wbr" ];
  var quotedString2 = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.string("\""))(Text_Parsing_StringParser_CodeUnits.regex("[^\"]*")))(Text_Parsing_StringParser_CodeUnits.string("\""));
  var quotedString1 = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.string("'"))(Text_Parsing_StringParser_CodeUnits.regex("[^']*")))(Text_Parsing_StringParser_CodeUnits.string("'"));
  var quotedString = Control_Alt.alt(Text_Parsing_StringParser.altParser)(quotedString1)(quotedString2);
  var mkElement = function (v) {
      return function (v1) {
          return function (v2) {
              return {
                  name: v,
                  attributes: v1,
                  children: v2
              };
          };
      };
  };
  var isSelfClosingElement = function (ele) {
      return Data_Array.elem(Data_Eq.eqString)(ele.name)(selfClosingTags);
  };
  var equals = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.string("="))(Text_Parsing_StringParser_CodeUnits.whiteSpace);
  var charListToString = (function () {
      var $37 = Data_Array.fromFoldable(Data_List_Types.foldableList);
      return function ($38) {
          return Data_String_CodeUnits.fromCharArray($37($38));
      };
  })();
  var commentParser = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(function () {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.string("<!--"))(Text_Parsing_StringParser_Combinators.manyTill(Text_Parsing_StringParser_CodeUnits.anyChar)(Text_Parsing_StringParser_CodeUnits.string("-->"))))(function (comment) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(HtmlComment.create(charListToString(comment)));
      });
  });
  var attributeParser = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.regex("[^=>/ ]+"))(function (k) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Data_Functor["void"](Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_CodeUnits.whiteSpace))(function () {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.option("")(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(equals)(quotedString)))(function (v) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new HtmlAttribute(k, v));
          });
      });
  });
  var openingParser = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.string("<"))(function () {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.regex("[^/>\x0a ]+"))(function (tagName) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.whiteSpace)(Text_Parsing_StringParser_Combinators.sepEndBy(attributeParser)(Text_Parsing_StringParser_CodeUnits.whiteSpace)))(function (attributes) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(mkElement(tagName)(attributes)(Data_List_Types.Nil.value));
          });
      });
  });
  var nodeParser = Control_Lazy.defer(Text_Parsing_StringParser.lazyParser)(function (v) {
      return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](textParser))(Text_Parsing_StringParser["try"](commentParser)))(elementParser);
  });
  var elementParser = Control_Lazy.defer(Text_Parsing_StringParser.lazyParser)(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(function () {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(openingParser)(closingOrChildrenParser))((function () {
              var $39 = Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser);
              return function ($40) {
                  return $39(HtmlElement.create($40));
              };
          })());
      });
  });
  var closingOrChildrenParser = function (element) {
      var childrenParser = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.whiteSpace)(Text_Parsing_StringParser_CodeUnits.string(">")))(function () {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.manyTill(nodeParser)(Text_Parsing_StringParser_CodeUnits.string("</" + (element.name + ">"))))(function (children) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)({
                  children: children,
                  attributes: element.attributes,
                  name: element.name
              });
          });
      });
      return Control_Lazy.defer(Text_Parsing_StringParser.lazyParser)(function (v) {
          var $35 = isSelfClosingElement(element);
          if ($35) {
              return Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.whiteSpace)(Text_Parsing_StringParser_Combinators.optional(Text_Parsing_StringParser_CodeUnits.string("/"))))(Text_Parsing_StringParser_CodeUnits.string(">")))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(element));
          };
          return childrenParser;
      });
  };
  var parse = function (input) {
      return Text_Parsing_StringParser.runParser(Text_Parsing_StringParser_Combinators.many(nodeParser))(input);
  };
  exports["HtmlElement"] = HtmlElement;
  exports["HtmlText"] = HtmlText;
  exports["HtmlComment"] = HtmlComment;
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Html.Renderer.Halogen"] = $PS["Html.Renderer.Halogen"] || {};
  var exports = $PS["Html.Renderer.Halogen"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Html_Parser = $PS["Html.Parser"];                
  var htmlAttributeToProp = function (v) {
      return Halogen_HTML_Properties.attr(v.value0)(v.value1);
  };
  var nodeToHtml = function (v) {
      if (v instanceof Html_Parser.HtmlElement) {
          return elementToHtml(v.value0);
      };
      if (v instanceof Html_Parser.HtmlText) {
          return Halogen_HTML_Core.text(v.value0);
      };
      if (v instanceof Html_Parser.HtmlComment) {
          return Halogen_HTML_Core.text("");
      };
      throw new Error("Failed pattern match at Html.Renderer.Halogen (line 34, column 1 - line 34, column 50): " + [ v.constructor.name ]);
  };
  var elementToHtml = function (ele) {
      var children = Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(nodeToHtml)(ele.children));
      return Halogen_HTML_Elements.element(ele.name)(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(htmlAttributeToProp)(ele.attributes)))(children);
  };
  var parse = function (raw) {
      return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "error";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "pos";
      }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showString))))(Data_Functor.map(Data_Either.functorEither)((function () {
          var $9 = Data_Array.fromFoldable(Data_List_Types.foldableList);
          var $10 = Data_Functor.map(Data_List_Types.functorList)(nodeToHtml);
          return function ($11) {
              return $9($10($11));
          };
      })())(Html_Parser.parse(raw)));
  };
  var renderToArray = function (raw) {
      return Data_Either.either(function (err) {
          return [ Halogen_HTML_Core.text(err) ];
      })(Control_Category.identity(Control_Category.categoryFn))(parse(raw));
  };
  var render = function (props) {
      var $12 = Halogen_HTML_Elements.div(props);
      return function ($13) {
          return $12(renderToArray($13));
      };
  };
  var render_ = render([  ]);
  exports["render_"] = render_;
})(PS);
(function(exports) {
   

  exports.highlightString_ = codetext => {
    const highlightedCode = Prism.highlight(codetext, Prism.languages.purescript, 'purescript');
    return highlightedCode
  }
})(PS["Stories.Utilities"] = PS["Stories.Utilities"] || {});
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.Utilities"] = $PS["Stories.Utilities"] || {};
  var exports = $PS["Stories.Utilities"];
  var $foreign = $PS["Stories.Utilities"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Html_Renderer_Halogen = $PS["Html.Renderer.Halogen"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var syntaxHighlightedCode = function (codetext) {
      return [ Halogen_HTML_Elements.pre([ Halogen_HTML_Properties.class_("language-purescript") ])([ Halogen_HTML_Elements.code_([ Html_Renderer_Halogen.render_($foreign.highlightString_(codetext)) ]) ]) ];
  };
  var classed = function ($1) {
      return Halogen_HTML_Properties.class_(Web_HTML_Common.ClassName($1));
  };
  var tailwindClass = classed;
  var blurbParagraphs = function (dictFunctor) {
      return function (texts) {
          return Data_Functor.map(dictFunctor)(Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "m-2" ]) ]))(Data_Functor.map(dictFunctor)(function ($2) {
              return Data_Array.singleton(Halogen_HTML_Core.text($2));
          })(texts));
      };
  };
  exports["tailwindClass"] = tailwindClass;
  exports["blurbParagraphs"] = blurbParagraphs;
  exports["syntaxHighlightedCode"] = syntaxHighlightedCode;
  exports["highlightString_"] = $foreign.highlightString_;
})(PS);
(function($PS) {
  "use strict";
  $PS["Snippets"] = $PS["Snippets"] || {};
  var exports = $PS["Snippets"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Debug = $PS["Debug"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Html_Renderer_Halogen = $PS["Html.Renderer.Halogen"];
  var Stories_Utilities = $PS["Stories.Utilities"];                
  var Blurb = (function () {
      function Blurb(value0) {
          this.value0 = value0;
      };
      Blurb.create = function (value0) {
          return new Blurb(value0);
      };
      return Blurb;
  })();
  var SnippetFile = (function () {
      function SnippetFile(value0) {
          this.value0 = value0;
      };
      SnippetFile.create = function (value0) {
          return new SnippetFile(value0);
      };
      return SnippetFile;
  })();
  var Snippet = (function () {
      function Snippet(value0) {
          this.value0 = value0;
      };
      Snippet.create = function (value0) {
          return new Snippet(value0);
      };
      return Snippet;
  })();
  var PreRendered = (function () {
      function PreRendered(value0) {
          this.value0 = value0;
      };
      PreRendered.create = function (value0) {
          return new PreRendered(value0);
      };
      return PreRendered;
  })();
  var RenderWithState = (function () {
      function RenderWithState(value0) {
          this.value0 = value0;
      };
      RenderWithState.create = function (value0) {
          return new RenderWithState(value0);
      };
      return RenderWithState;
  })();
  var renderCell = function (v) {
      return function (v1) {
          if (v1 instanceof Blurb) {
              return Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "m-2" ]) ])([ Halogen_HTML_Core.text(v1.value0) ]);
          };
          if (v1 instanceof Snippet) {
              return Halogen_HTML_Elements.pre([ Halogen_HTML_Properties.class_(v1.value0.language) ])([ Halogen_HTML_Elements.code_([ Html_Renderer_Halogen.render_(Stories_Utilities.highlightString_(v1.value0.text)) ]) ]);
          };
          if (v1 instanceof SnippetFile) {
              return Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "m-2" ]) ])([ Halogen_HTML_Core.text("Snippet file not loaded: " + (v1.value0 + " Did you remember to call substituteSnippetCells on your Notebook?")) ]);
          };
          if (v1 instanceof PreRendered) {
              return v1.value0;
          };
          if (v1 instanceof RenderWithState) {
              return v1.value0(v);
          };
          throw new Error("Failed pattern match at Snippets (line 34, column 1 - line 34, column 71): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var renderNotebook = function (state) {
      return function (notebook) {
          return Data_Functor.map(Data_Functor.functorArray)(renderCell(state))(notebook);
      };
  };
  var renderNotebook_ = function (notebook) {
      return Data_Functor.map(Data_Functor.functorArray)(renderCell(Data_Unit.unit))(notebook);
  };
  var readSnippetFiles = function (name) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.get(Affjax_ResponseFormat.string)("./code-examples/" + name))(function (response) {
          if (response instanceof Data_Either.Left) {
              return Debug.spy()("couldn't read snippet, error: ")(Control_Applicative.pure(Effect_Aff.applicativeAff)(Affjax.printError(response.value0)));
          };
          if (response instanceof Data_Either.Right) {
              return Debug.spy()("read snippet: ")(Control_Applicative.pure(Effect_Aff.applicativeAff)(response.value0.body));
          };
          throw new Error("Failed pattern match at Snippets (line 60, column 3 - line 62, column 52): " + [ response.constructor.name ]);
      });
  };
  var substituteSnippetCells = function (dictBind) {
      return function (dictMonadAff) {
          return function (dictMonadState) {
              return function (v) {
                  if (v instanceof SnippetFile) {
                      return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(readSnippetFiles(v.value0)))(function (snippetText) {
                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(new Snippet({
                              file: v.value0,
                              text: snippetText,
                              language: "language-purescript"
                          }));
                      });
                  };
                  return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(v);
              };
          };
      };
  };
  exports["Blurb"] = Blurb;
  exports["SnippetFile"] = SnippetFile;
  exports["PreRendered"] = PreRendered;
  exports["RenderWithState"] = RenderWithState;
  exports["renderNotebook"] = renderNotebook;
  exports["renderNotebook_"] = renderNotebook_;
  exports["substituteSnippetCells"] = substituteSnippetCells;
  exports["readSnippetFiles"] = readSnippetFiles;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.GUP"] = $PS["Stories.GUP"] || {};
  var exports = $PS["Stories.GUP"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var D3_Examples_GUP = $PS["D3.Examples.GUP"];
  var D3Tagless_Block_Button = $PS["D3Tagless.Block.Button"];
  var D3Tagless_Block_Expandable = $PS["D3Tagless.Block.Expandable"];
  var D3Tagless_Block_FormField = $PS["D3Tagless.Block.FormField"];
  var D3Tagless_Block_Toggle = $PS["D3Tagless.Block.Toggle"];
  var D3Tagless_Instance_Selection = $PS["D3Tagless.Instance.Selection"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Random = $PS["Effect.Random"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Snippets = $PS["Snippets"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Running = (function () {
      function Running() {

      };
      Running.value = new Running();
      return Running;
  })();
  var Paused = (function () {
      function Paused() {

      };
      Paused.value = new Paused();
      return Paused;
  })();
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var SetStatus = (function () {
      function SetStatus(value0) {
          this.value0 = value0;
      };
      SetStatus.create = function (value0) {
          return new SetStatus(value0);
      };
      return SetStatus;
  })();
  var ToggleStatus = (function () {
      function ToggleStatus() {

      };
      ToggleStatus.value = new ToggleStatus();
      return ToggleStatus;
  })();
  var Finalize = (function () {
      function Finalize() {

      };
      Finalize.value = new Finalize();
      return Finalize;
  })();
  var ToggleCard = (function () {
      function ToggleCard(value0) {
          this.value0 = value0;
      };
      ToggleCard.create = function (value0) {
          return new ToggleCard(value0);
      };
      return ToggleCard;
  })();
  var showStatus = new Data_Show.Show(function (v) {
      if (v instanceof Running) {
          return "Running";
      };
      if (v instanceof Paused) {
          return "Paused";
      };
      throw new Error("Failed pattern match at Stories.GUP (line 46, column 1 - line 48, column 26): " + [ v.constructor.name ]);
  });
  var runUpdate = function (update) {
      var getLetters = (function () {
          var letters = Data_String_CodeUnits.toCharArray("abcdefghijklmnopqrstuvwxyz");
          var coinToss = function (c) {
              return function __do() {
                  var n = Effect_Random.random();
                  var $35 = n > 0.6;
                  if ($35) {
                      return new Data_Maybe.Just(c);
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
          return function __do() {
              var choices = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Functor.map(Data_Functor.functorArray)(coinToss)(letters))();
              return Data_Array.catMaybes(choices);
          };
      })();
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(getLetters))(function (letters) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(update(letters))(function () {
              return Effect_Aff.delay(2300.0);
          });
      });
  };
  var runGeneralUpdatePattern = function (dictBind) {
      return function (dictMonadEffect) {
          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Effect_Class_Console.log(dictMonadEffect)("General Update Pattern example"))(function () {
              return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadEffect)(D3Tagless_Instance_Selection.eval_D3M(D3_Examples_GUP.exGeneralUpdatePattern(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container"))))(function (update) {
                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(function (letters) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Apply.applySecond(Effect.applyEffect)(D3Tagless_Instance_Selection.runD3M(update(letters)))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)));
                  });
              });
          });
      };
  };
  var pauseUpdating = function (dictBind) {
      return function (dictMonadState) {
          return function (dictMonadAff) {
              return Control_Bind.bind(dictBind)(Control_Monad_State_Class.gets(dictMonadState)(function (v) {
                  return v.fiber;
              }))(function (maybeFiber) {
                  return Control_Bind.bind(dictBind)((function () {
                      if (maybeFiber instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                      };
                      if (maybeFiber instanceof Data_Maybe.Just) {
                          return Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.killFiber(Effect_Exception.error("Cancel fiber to suspend computation"))(maybeFiber.value0));
                      };
                      throw new Error("Failed pattern match at Stories.GUP (line 211, column 8 - line 213, column 100): " + [ maybeFiber.constructor.name ]);
                  })())(function () {
                      return Control_Monad_State_Class.modify_(dictMonadState)(function (state) {
                          var $38 = {};
                          for (var $39 in state) {
                              if ({}.hasOwnProperty.call(state, $39)) {
                                  $38[$39] = state[$39];
                              };
                          };
                          $38.status = Paused.value;
                          $38.fiber = Data_Maybe.Nothing.value;
                          return $38;
                      });
                  });
              });
          };
      };
  };
  var eqStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Running && y instanceof Running) {
              return true;
          };
          if (x instanceof Paused && y instanceof Paused) {
              return true;
          };
          return false;
      };
  });
  var startUpdating = function (dictBind) {
      return function (dictMonadState) {
          return function (dictMonadAff) {
              return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (v) {
                  var $44 = Data_Eq.notEq(eqStatus)(v.status)(Paused.value);
                  if ($44) {
                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                  };
                  if (v.update instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                  };
                  if (v.update instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.forkAff(Control_Monad_Rec_Class.forever(Effect_Aff.monadRecAff)(runUpdate(v.update.value0)))))(function (fiber) {
                          return Control_Monad_State_Class.modify_(dictMonadState)(function (state) {
                              var $46 = {};
                              for (var $47 in state) {
                                  if ({}.hasOwnProperty.call(state, $47)) {
                                      $46[$47] = state[$47];
                                  };
                              };
                              $46.status = Running.value;
                              $46.fiber = new Data_Maybe.Just(fiber);
                              return $46;
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Stories.GUP (line 226, column 5 - line 230, column 77): " + [ v.update.constructor.name ]);
              });
          };
      };
  };
  var blurbtext = Stories_Utilities.blurbParagraphs(Data_Functor.functorArray)([ "This deceptively simple example shows off an aspect of screen-based data\x0avisualization that has no analogue in paper visualizations: the ability to\x0aspecify how updates to the data should be represented.", "In this example, some letters of the alphabet are presented and then constantly\x0aupdated. When a letter enters at first, it falls in from the top and it is\x0agreen. If its still present in the next set of letters it stays on the screen,\x0abut it turns gray and moves to an alphabetically correct new position. And if\x0aits not present in the new data, it turns red and falls out before\x0adisappearing.", "In a more meaningful example, ie with some data that you actually care about,\x0athis helps give continuity, as the eye can track an individual letter thru its\x0aarrival, update and exit phases. Even if this tracking isn't interesting in\x0aitself, it can lessen the fatigue of looking at updated data and it conveys a\x0asense of how much the data has changed.", "This example is called \"General Update Pattern\" in an early Mike Bostock\x0apost explaining the (then new) D3.js. You can see in the code panel how the\x0a\"data join\" contains three separate specifications, each with their own\x0a*transition*." ]);
  var _snippets = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "snippets";
  }))()()(Type_Proxy["Proxy"].value);
  var _panels = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "panels";
  }))()()(Type_Proxy["Proxy"].value);
  var _handlerCode = function (dictStrong) {
      var $67 = _snippets(dictStrong);
      var $68 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "handler";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($69) {
          return $67($68($69));
      };
  };
  var _drawCode = function (dictStrong) {
      var $70 = _snippets(dictStrong);
      var $71 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "draw";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($72) {
          return $70($71($72));
      };
  };
  var handleAction = function (dictBind) {
      return function (dictMonadAff) {
          return function (dictMonadState) {
              return function (v) {
                  if (v instanceof ToggleCard) {
                      return Data_Lens_Setter.modifying(dictMonadState)(v.value0(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(D3Tagless_Block_Expandable.heytingAlgebraStatus));
                  };
                  if (v instanceof Initialize) {
                      return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Snippets.readSnippetFiles("GUP")))(function (text1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_drawCode(Data_Profunctor_Strong.strongFn))(text1))(function () {
                              return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Snippets.readSnippetFiles("GUPHandleActions")))(function (text2) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_handlerCode(Data_Profunctor_Strong.strongFn))(text2))(function () {
                                      return Control_Bind.bind(dictBind)(runGeneralUpdatePattern(dictBind)(dictMonadAff.MonadEffect0()))(function (updateFn) {
                                          return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.forkAff(Control_Monad_Rec_Class.forever(Effect_Aff.monadRecAff)(runUpdate(updateFn)))))(function (fiber) {
                                              return Control_Monad_State_Class.modify_(dictMonadState)(function (state) {
                                                  var $54 = {};
                                                  for (var $55 in state) {
                                                      if ({}.hasOwnProperty.call(state, $55)) {
                                                          $54[$55] = state[$55];
                                                      };
                                                  };
                                                  $54.status = Running.value;
                                                  $54.fiber = new Data_Maybe.Just(fiber);
                                                  $54.update = new Data_Maybe.Just(updateFn);
                                                  return $54;
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  };
                  if (v instanceof SetStatus) {
                      return Control_Monad_State_Class.modify_(dictMonadState)(function (state) {
                          var $57 = {};
                          for (var $58 in state) {
                              if ({}.hasOwnProperty.call(state, $58)) {
                                  $57[$58] = state[$58];
                              };
                          };
                          $57.status = v.value0;
                          return $57;
                      });
                  };
                  if (v instanceof ToggleStatus) {
                      return Control_Bind.bind(dictBind)(Control_Monad_State_Class.gets(dictMonadState)(function (v1) {
                          return v1.status;
                      }))(function (currentStatus) {
                          if (currentStatus instanceof Running) {
                              return pauseUpdating(dictBind)(dictMonadState)(dictMonadAff);
                          };
                          return startUpdating(dictBind)(dictMonadState)(dictMonadAff);
                      });
                  };
                  if (v instanceof Finalize) {
                      return Control_Bind.bind(dictBind)(Control_Monad_State_Class.gets(dictMonadState)(function (v1) {
                          return v1.fiber;
                      }))(function (maybeFiber) {
                          return Control_Bind.bind(dictBind)((function () {
                              if (maybeFiber instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                              };
                              if (maybeFiber instanceof Data_Maybe.Just) {
                                  return Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.killFiber(Effect_Exception.error("Cancelling fiber and terminating computation"))(maybeFiber.value0));
                              };
                              throw new Error("Failed pattern match at Stories.GUP (line 197, column 10 - line 199, column 111): " + [ maybeFiber.constructor.name ]);
                          })())(function () {
                              return Control_Monad_State_Class.modify_(dictMonadState)(function (state) {
                                  var $64 = {};
                                  for (var $65 in state) {
                                      if ({}.hasOwnProperty.call(state, $65)) {
                                          $64[$65] = state[$65];
                                      };
                                  };
                                  $64.status = Paused.value;
                                  $64.fiber = Data_Maybe.Nothing.value;
                                  $64.update = Data_Maybe.Nothing.value;
                                  return $64;
                              });
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Stories.GUP (line 173, column 16 - line 201, column 87): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var _code = function (dictStrong) {
      var $73 = _panels(dictStrong);
      var $74 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($75) {
          return $73($74($75));
      };
  };
  var _blurb = function (dictStrong) {
      var $76 = _panels(dictStrong);
      var $77 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "blurb";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($78) {
          return $76($77($78));
      };
  };
  var component = function (dictMonadAff) {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-container") ])([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-controls") ])([ D3Tagless_Block_Button.buttonGroup([ Halogen_HTML_Properties.class_("flex-col") ])([ D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](ToggleStatus.value)) ])([ Halogen_HTML_Core.text(Data_Show.show(showStatus)(state.status)) ]) ]) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-about") ])([ D3Tagless_Block_FormField.field_({
              label: Halogen_HTML_Core.text("About"),
              helpText: [  ],
              error: [  ],
              inputId: "show-blurb"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-blurb"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_blurb(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _blurb(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_blurb(Data_Lens_Internal_Forget.strongForget))(state))(blurbtext) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-code") ])([ D3Tagless_Block_FormField.field_({
              label: Halogen_HTML_Core.text("(hide this panel if screen too small)"),
              helpText: [  ],
              error: [  ],
              inputId: "show-code"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-code"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _code(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))(Stories_Utilities.syntaxHighlightedCode(Data_Lens_Getter.view(_drawCode(Data_Lens_Internal_Forget.strongForget))(state))) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("svg-container") ])([  ]) ]);
      };
      var initialState = {
          status: Paused.value,
          fiber: Data_Maybe.Nothing.value,
          update: Data_Maybe.Nothing.value,
          panels: {
              blurb: D3Tagless_Block_Expandable.Expanded.value,
              code: D3Tagless_Block_Expandable.Collapsed.value
          },
          snippets: {
              draw: "",
              handler: ""
          }
      };
      return Halogen_Component.mkComponent({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Halogen_Query_HalogenM.monadStateHalogenM),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: function ($79) {
                  return Data_Maybe.Just.create(SetStatus.create($79));
              },
              initialize: new Data_Maybe.Just(Initialize.value),
              finalize: new Data_Maybe.Just(Finalize.value)
          })
      });
  };
  exports["Paused"] = Paused;
  exports["component"] = component;
})(PS);
(function($PS) {
  "use strict";
  $PS["Ocelot.Block.FormField"] = $PS["Ocelot.Block.FormField"] || {};
  var exports = $PS["Ocelot.Block.FormField"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML = $PS["Halogen.HTML"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_Block_Format = $PS["Ocelot.Block.Format"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var labelClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "block", "font-medium", "leading-loose", "text-black-20" ]);
  var helpTextClasses = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Ocelot_Block_Format.mutedClasses)(Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "block", "font-light", "pt-3" ]));
  var helpText = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(helpTextClasses) ])(iprops));
  };
  var helpText_ = helpText([  ]);
  var fieldClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "w-full", "mb-10" ]);
  var errorTextClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "block", "text-red", "font-medium", "pt-3" ]);
  var error = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(errorTextClasses) ])(iprops));
  };
  var error_ = error([  ]);
  var field$prime = function (config) {
      return function (iprops) {
          return function (html) {
              return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(fieldClasses) ])(iprops))([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.classes(labelClasses), Halogen_HTML_Properties["for"](config.inputId) ])([ Halogen_HTML.fromPlainHTML(config.label) ]), html, error_(config.error), helpText_(config.helpText) ]);
          };
      };
  };
  var field = function (config) {
      return function (iprops) {
          return function (html) {
              return field$prime(config)(iprops)(Halogen_HTML_Elements.div([ Ocelot_HTML_Properties.css("my-1") ])(html));
          };
      };
  };
  var field_ = function (config) {
      return field(config)([  ]);
  };
  var fieldset = function (config) {
      return function (iprops) {
          return function (html) {
              return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(fieldClasses) ])(iprops))([ Halogen_HTML_Elements.fieldset([  ])([ Halogen_HTML_Elements.legend([ Halogen_HTML_Properties.classes(labelClasses) ])([ Halogen_HTML.fromPlainHTML(config.label) ]), Halogen_HTML_Elements.div([ Ocelot_HTML_Properties.css("my-1") ])(html), error_(config.error), helpText_(config.helpText) ]) ]);
          };
      };
  };
  var fieldset_ = function (config) {
      return fieldset(config)([  ]);
  };
  exports["field_"] = field_;
  exports["fieldset_"] = fieldset_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.LesMis"] = $PS["Stories.LesMis"] || {};
  var exports = $PS["Stories.LesMis"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Examples_LesMiserables = $PS["D3.Examples.LesMiserables"];
  var D3_Examples_LesMiserables_File = $PS["D3.Examples.LesMiserables.File"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Simulation_Config = $PS["D3.Simulation.Config"];
  var D3_Simulation_Forces = $PS["D3.Simulation.Forces"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var D3Tagless_Block_Button = $PS["D3Tagless.Block.Button"];
  var D3Tagless_Block_Expandable = $PS["D3Tagless.Block.Expandable"];
  var D3Tagless_Block_Toggle = $PS["D3Tagless.Block.Toggle"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var D3Tagless_Instance_Simulation = $PS["D3Tagless.Instance.Simulation"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Fold = $PS["Data.Lens.Fold"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Prism_Maybe = $PS["Data.Lens.Prism.Maybe"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Ocelot_Block_FormField = $PS["Ocelot.Block.FormField"];
  var Snippets = $PS["Snippets"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var Finalize = (function () {
      function Finalize() {

      };
      Finalize.value = new Finalize();
      return Finalize;
  })();
  var ToggleCard = (function () {
      function ToggleCard(value0) {
          this.value0 = value0;
      };
      ToggleCard.create = function (value0) {
          return new ToggleCard(value0);
      };
      return ToggleCard;
  })();
  var ToggleForce = (function () {
      function ToggleForce(value0) {
          this.value0 = value0;
      };
      ToggleForce.create = function (value0) {
          return new ToggleForce(value0);
      };
      return ToggleForce;
  })();
  var Freeze = (function () {
      function Freeze() {

      };
      Freeze.value = new Freeze();
      return Freeze;
  })();
  var Reheat = (function () {
      function Reheat() {

      };
      Reheat.value = new Reheat();
      return Reheat;
  })();
  var forceNames = {
      manyBodyNeg: "many body negative",
      manyBodyPos: "many body positive",
      collision: "collision",
      center: "center",
      links: D3_FFI.linksForceName
  };
  var forces = {
      manyBodyNeg: D3_Simulation_Forces.createForce(forceNames.manyBodyNeg)(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceManyBody.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(-40.0) ]),
      manyBodyPos: D3_Simulation_Forces.createForce(forceNames.manyBodyPos)(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceManyBody.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(30.0) ]),
      collision: D3_Simulation_Forces.createForce(forceNames.collision)(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceCollide.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.radius(D3_Attributes_Instances.toAttrNumber)(4.0) ]),
      center: D3_Simulation_Forces.createForce(forceNames.center)(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceCenter.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(1.0) ]),
      links: D3_Simulation_Forces.createLinkForce(Data_Maybe.Nothing.value)([  ])
  };
  var forceLibrary = D3_Simulation_Forces.initialize(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ forces.manyBodyNeg, forces.manyBodyPos, forces.collision, forces.center, forces.links ]);
  var _panels = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "panels";
  }))()()(Type_Proxy["Proxy"].value);
  var _notebook = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "notebook";
  }))()()(Type_Proxy["Proxy"].value);
  var _forceStatuses = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "forceStatuses";
  }))()()(Type_Proxy["Proxy"].value);
  var _forceStatus = function (dictAt) {
      return function (dictStrong) {
          return function (dictChoice) {
              return function (label) {
                  var $25 = Data_Lens_At.at(dictAt)(label)(dictStrong);
                  var $26 = Data_Lens_Prism_Maybe["_Just"](dictChoice);
                  return function ($27) {
                      return $25($26($27));
                  };
              };
          };
      };
  };
  var _linksSetting = function (dictStrong) {
      return function (dictChoice) {
          return _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(dictStrong)(dictChoice)(forceNames.links);
      };
  };
  var _manyBodyNegSetting = function (dictStrong) {
      return function (dictChoice) {
          return _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(dictStrong)(dictChoice)(forceNames.manyBodyNeg);
      };
  };
  var _manyBodyPosSetting = function (dictStrong) {
      return function (dictChoice) {
          return _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(dictStrong)(dictChoice)(forceNames.manyBodyPos);
      };
  };
  var _collisionSetting = function (dictStrong) {
      return function (dictChoice) {
          return _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(dictStrong)(dictChoice)(forceNames.collision);
      };
  };
  var controls = function (forceStatuses) {
      return D3Tagless_Block_Button.buttonGroup([ Halogen_HTML_Properties.class_("flex-col") ])([ D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](new ToggleForce(forceNames.links))) ])([ Halogen_HTML_Core.text("links: " + D3_Simulation_Types.showMaybeForceStatus(Data_Lens_Fold.preview(_linksSetting(Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(forceStatuses))) ]), D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](new ToggleForce(forceNames.manyBodyPos))) ])([ Halogen_HTML_Core.text("many body +: " + D3_Simulation_Types.showMaybeForceStatus(Data_Lens_Fold.preview(_manyBodyPosSetting(Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(forceStatuses))) ]), D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](new ToggleForce(forceNames.manyBodyNeg))) ])([ Halogen_HTML_Core.text("many body: -" + D3_Simulation_Types.showMaybeForceStatus(Data_Lens_Fold.preview(_manyBodyNegSetting(Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(forceStatuses))) ]), D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](new ToggleForce(forceNames.collision))) ])([ Halogen_HTML_Core.text("collision: " + D3_Simulation_Types.showMaybeForceStatus(Data_Lens_Fold.preview(_collisionSetting(Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(forceStatuses))) ]), D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](Freeze.value)) ])([ Halogen_HTML_Core.text("Freeze") ]), D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](Reheat.value)) ])([ Halogen_HTML_Core.text("Reheat!") ]) ]);
  };
  var lesMisNotebook = [ new Snippets.Blurb("This example introduces a new capability, signalled by the SimulationM\x0a    constraint on the function. This monad runs with a D3 Simulation engine in its\x0a    State. This allows us to let the simulation engine do the layout, we provide\x0a    the nodes and (optionally) links and configure the simulation with additional\x0a    forces. "), new Snippets.RenderWithState(controls), new Snippets.Blurb(" From the D3 docs: \"This module implements a velocity Verlet numerical\x0a  integrator for simulating physical forces on particles. The simulation is\x0a  simplified: it assumes a constant unit time step \u0394t = 1 for each step, and a\x0a  constant unit mass m = 1 for all particles. As a result, a force F acting on a\x0a  particle is equivalent to a constant acceleration a over the time interval \u0394t,\x0a  and can be simulated simply by adding to the particle\u2019s velocity, which is then\x0a  added to the particle\u2019s position.\"\"\x0a\x0a  "), new Snippets.SnippetFile("LesMisScript"), new Snippets.SnippetFile("LesMisHandleActions"), new Snippets.SnippetFile("LesMisAccessors") ];
  var toggleForceByName = function (dictMonadState) {
      return function (name) {
          if (name === forceNames.manyBodyNeg) {
              return Data_Lens_Setter.modifying(dictMonadState)((function () {
                  var $28 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                  var $29 = _manyBodyNegSetting(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn);
                  return function ($30) {
                      return $28($29($30));
                  };
              })())(D3_Simulation_Types.toggleForceStatus);
          };
          if (name === forceNames.manyBodyPos) {
              return Data_Lens_Setter.modifying(dictMonadState)((function () {
                  var $31 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                  var $32 = _manyBodyPosSetting(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn);
                  return function ($33) {
                      return $31($32($33));
                  };
              })())(D3_Simulation_Types.toggleForceStatus);
          };
          if (name === forceNames.collision) {
              return Data_Lens_Setter.modifying(dictMonadState)((function () {
                  var $34 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                  var $35 = _collisionSetting(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn);
                  return function ($36) {
                      return $34($35($36));
                  };
              })())(D3_Simulation_Types.toggleForceStatus);
          };
          if (name === forceNames.links) {
              return Data_Lens_Setter.modifying(dictMonadState)((function () {
                  var $37 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                  var $38 = _linksSetting(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn);
                  return function ($39) {
                      return $37($38($39));
                  };
              })())(D3_Simulation_Types.toggleForceStatus);
          };
          if (Data_Boolean.otherwise) {
              return Control_Applicative.pure((dictMonadState.Monad0()).Applicative0())(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at Stories.LesMis (line 96, column 1 - line 96, column 70): " + [ name.constructor.name ]);
      };
  };
  var handleAction = function (dictBind) {
      return function (dictMonadAff) {
          return function (dictMonadState) {
              return function (v) {
                  if (v instanceof ToggleCard) {
                      return Data_Lens_Setter.modifying(dictMonadState)(v.value0(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(D3Tagless_Block_Expandable.heytingAlgebraStatus));
                  };
                  if (v instanceof Initialize) {
                      return Control_Bind.bind(dictBind)(Data_Traversable.traverse(Data_Traversable.traversableArray)(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Snippets.substituteSnippetCells(dictBind)(dictMonadAff)(dictMonadState))(lesMisNotebook))(function (notebook$prime) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_notebook(Data_Profunctor_Strong.strongFn))(notebook$prime))(function () {
                              return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Affjax.get(Affjax_ResponseFormat.string)("./data/miserables.json")))(function (response) {
                                  var graph = D3_Examples_LesMiserables_File.readGraphFromFileContents(response);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.modifying(dictMonadState)((function () {
                                      var $40 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                                      var $41 = _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn)(forceNames.center);
                                      return function ($42) {
                                          return $40($41($42));
                                      };
                                  })())(Data_Function["const"](D3_Simulation_Types.ForceActive.value)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.modifying(dictMonadState)((function () {
                                          var $43 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                                          var $44 = _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn)(forceNames.manyBodyNeg);
                                          return function ($45) {
                                              return $43($44($45));
                                          };
                                      })())(Data_Function["const"](D3_Simulation_Types.ForceActive.value)))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.modifying(dictMonadState)((function () {
                                              var $46 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                                              var $47 = _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn)(forceNames.collision);
                                              return function ($48) {
                                                  return $46($47($48));
                                              };
                                          })())(Data_Function["const"](D3_Simulation_Types.ForceActive.value)))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.modifying(dictMonadState)((function () {
                                                  var $49 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                                                  var $50 = _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn)(forceNames.links);
                                                  return function ($51) {
                                                      return $49($50($51));
                                                  };
                                              })())(Data_Function["const"](D3_Simulation_Types.ForceActive.value)))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.modifying(dictMonadState)((function () {
                                                      var $52 = _forceStatuses(Data_Profunctor_Strong.strongFn);
                                                      var $53 = _forceStatus(Data_Lens_At.atMap(Data_Ord.ordString))(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn)(forceNames.manyBodyPos);
                                                      return function ($54) {
                                                          return $52($53($54));
                                                      };
                                                  })())(Data_Function["const"](D3_Simulation_Types.ForceDisabled.value)))(function () {
                                                      return D3Tagless_Instance_Simulation.runWithD3_Simulation(dictBind)(dictMonadState)(dictMonadAff.MonadEffect0())(Control_Bind.bind(D3Tagless_Instance_Simulation.bindD3SimM)(Data_Lens_Getter.use(D3Tagless_Instance_Simulation.monadStateD3SimM)(_forceStatuses(Data_Lens_Internal_Forget.strongForget)))(function (statuses) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.actualizeForces(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(statuses))(function () {
                                                              return D3_Examples_LesMiserables.draw(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Instance_Simulation.monadEffD3SimM)(D3Tagless_Instance_Simulation.monadStateD3SimM)(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(graph)("div.svg-container");
                                                          });
                                                      }));
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  };
                  if (v instanceof Finalize) {
                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                  };
                  if (v instanceof ToggleForce) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(toggleForceByName(dictMonadState)(v.value0))(function () {
                          return D3Tagless_Instance_Simulation.runWithD3_Simulation(dictBind)(dictMonadState)(dictMonadAff.MonadEffect0())(Control_Bind.bind(D3Tagless_Instance_Simulation.bindD3SimM)(Data_Lens_Getter.use(D3Tagless_Instance_Simulation.monadStateD3SimM)(_forceStatuses(Data_Lens_Internal_Forget.strongForget)))(function (statuses) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.actualizeForces(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(statuses))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.setConfigVariable(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(new D3_Simulation_Types.Alpha(0.7)))(function () {
                                      return D3Tagless_Capabilities.start(D3Tagless_Instance_Simulation.simulationMD3Selection_D3);
                                  });
                              });
                          }));
                      });
                  };
                  if (v instanceof Freeze) {
                      return D3Tagless_Instance_Simulation.runWithD3_Simulation(dictBind)(dictMonadState)(dictMonadAff.MonadEffect0())(D3Tagless_Capabilities.setConfigVariable(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(new D3_Simulation_Types.Alpha(0.0)));
                  };
                  if (v instanceof Reheat) {
                      return D3Tagless_Instance_Simulation.runWithD3_Simulation(dictBind)(dictMonadState)(dictMonadAff.MonadEffect0())(Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.setConfigVariable(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(new D3_Simulation_Types.Alpha(0.7)))(function () {
                          return D3Tagless_Capabilities.start(D3Tagless_Instance_Simulation.simulationMD3Selection_D3);
                      }));
                  };
                  throw new Error("Failed pattern match at Stories.LesMis (line 159, column 16 - line 196, column 12): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var _code = function (dictStrong) {
      var $55 = _panels(dictStrong);
      var $56 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($57) {
          return $55($56($57));
      };
  };
  var component = function (dictMonadAff) {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-container") ])([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-code") ])([ Ocelot_Block_FormField.field_({
              label: Halogen_HTML_Core.text("(hide this panel if screen too small)"),
              helpText: [  ],
              error: [  ],
              inputId: "show-code"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-code"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _code(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))(Snippets.renderNotebook(state.forceStatuses)(state.notebook)) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("svg-container") ])([  ]) ]);
      };
      var initialState = {
          simulation: D3_Simulation_Types.initialSimulationState(forceLibrary),
          panels: {
              code: D3Tagless_Block_Expandable.Expanded.value
          },
          notebook: lesMisNotebook,
          forceStatuses: D3_Simulation_Types.getStatusMap(forceLibrary)
      };
      return Halogen_Component.mkComponent({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Halogen_Query_HalogenM.monadStateHalogenM),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Initialize.value),
              finalize: new Data_Maybe.Just(Finalize.value)
          })
      });
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.MetaTree"] = $PS["Stories.MetaTree"] || {};
  var exports = $PS["Stories.MetaTree"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Examples_MetaTree = $PS["D3.Examples.MetaTree"];
  var D3_Examples_Tree_Configure = $PS["D3.Examples.Tree.Configure"];
  var D3_Layouts_Hierarchical = $PS["D3.Layouts.Hierarchical"];
  var D3Tagless_Block_Expandable = $PS["D3Tagless.Block.Expandable"];
  var D3Tagless_Block_Toggle = $PS["D3Tagless.Block.Toggle"];
  var D3Tagless_Instance_Selection = $PS["D3Tagless.Instance.Selection"];
  var D3Tagless_Utility = $PS["D3Tagless.Utility"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Ocelot_Block_FormField = $PS["Ocelot.Block.FormField"];
  var Snippets = $PS["Snippets"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var ToggleCard = (function () {
      function ToggleCard(value0) {
          this.value0 = value0;
      };
      ToggleCard.create = function (value0) {
          return new ToggleCard(value0);
      };
      return ToggleCard;
  })();
  var drawMetaTree = function (json) {
      return Control_Bind.bindFlipped(Effect_Aff.bindAff)(D3_Examples_MetaTree.drawTree)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(D3_Layouts_Hierarchical.makeModel(Effect_Aff.bindAff)(Effect_Aff.monadEffectAff)(D3_Data_Tree.TidyTree.value)(D3_Data_Tree.Vertical.value))(Control_Bind.bindFlipped(Effect_Aff.bindAff)(D3_Examples_Tree_Configure.getMetaTreeJSON)(D3_Layouts_Hierarchical.makeModel(Effect_Aff.bindAff)(Effect_Aff.monadEffectAff)(D3_Data_Tree.TidyTree.value)(D3_Data_Tree.Radial.value)(json))));
  };
  var blurbtext = [ Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "p-2" ]) ])([ Halogen_HTML_Core.text("The way this library works is by creating an embedded DSL in PureScript\x0a          which can be interpreted to cause a visualization to come into\x0a          existence...typically in your browser, as an SVG.\x0a          ") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "p-2" ]) ])([ Halogen_HTML_Core.text("\x0a          The primary interpreter that is provided, the one that powers all of the\x0a          other demos here except these two, turns the statements of this eDSL into D3\x0a          actions.\x0a          ") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "p-2" ]) ])([ Halogen_HTML_Core.text("\x0a          However, other interpreters are possible. This page shows two of them, both\x0a          quite rudimentary but showing some powerful ideas which could be taken a lot\x0a          further.\x0a          ") ]), Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.classes([ "text-2xl", "p-2" ]) ])([ Halogen_HTML_Core.text("MetaTree") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "p-2" ]) ])([ Halogen_HTML_Core.text("\x0a          The first one, called here \"MetaTree\" turns a \"script\" written in the DSL\x0a          into a syntax tree and then renders the resulting tree using the other,\x0a          D3-based, interpreter. The result is a kind of x-ray of the script, one which\x0a          visually describes the structure you are producing. Because interaction is easy\x0a          to add to DOM-based visualizations such as D3 this could also be a basis for\x0a          a point-and-click manner for writing visualizations, or perhaps for editing and\x0a          adapting them. \x0a          ") ]), Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.classes([ "text-2xl", "p-2" ]) ])([ Halogen_HTML_Core.text("Printer") ]), Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes([ "p-2" ]) ])([ Halogen_HTML_Core.text("\x0a          The second example shows that the \"script\" can be interpreted into a textual\x0a          form. This could be the basis for documentation or even transpilation. In\x0a          principle, it is possible to emit the JavaScript / D3 version of the script\x0a          via this mechanism, but the current implementation is only a proof-of-concept\x0a          and is not elaborated to that extent.\x0a          \x0a          ") ]) ];
  var _snippets = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "snippets";
  }))()()(Type_Proxy["Proxy"].value);
  var _panels = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "panels";
  }))()()(Type_Proxy["Proxy"].value);
  var _handlerCode = function (dictStrong) {
      var $18 = _snippets(dictStrong);
      var $19 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "handler";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($20) {
          return $18($19($20));
      };
  };
  var _evaluatorCode = function (dictStrong) {
      var $21 = _snippets(dictStrong);
      var $22 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "evaluator";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($23) {
          return $21($22($23));
      };
  };
  var _drawCode = function (dictStrong) {
      var $24 = _snippets(dictStrong);
      var $25 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "draw";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($26) {
          return $24($25($26));
      };
  };
  var handleAction = function (dictBind) {
      return function (dictMonadAff) {
          return function (dictMonadState) {
              return function (v) {
                  if (v instanceof ToggleCard) {
                      return Data_Lens_Setter.modifying(dictMonadState)(v.value0(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(D3Tagless_Block_Expandable.heytingAlgebraStatus));
                  };
                  if (v instanceof Initialize) {
                      return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Snippets.readSnippetFiles("MetaTreeDraw")))(function (text) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_drawCode(Data_Profunctor_Strong.strongFn))(text))(function () {
                              return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Snippets.readSnippetFiles("MetaTreeEvaluator")))(function (text1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_evaluatorCode(Data_Profunctor_Strong.strongFn))(text1))(function () {
                                      return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Snippets.readSnippetFiles("MetaTreeHandleActions")))(function (text2) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_handlerCode(Data_Profunctor_Strong.strongFn))(text2))(function () {
                                              return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M(D3Tagless_Utility.removeExistingSVG(D3Tagless_Instance_Selection.d3TaglessD3M)("div.d3story"))))(function (detached) {
                                                  return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(D3_Layouts_Hierarchical.getTreeViaAJAX("./data/flare-2.json")))(function (treeJSON) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)((function () {
                                                          if (treeJSON instanceof Data_Either.Left) {
                                                              return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                                          };
                                                          if (treeJSON instanceof Data_Either.Right) {
                                                              return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(drawMetaTree(treeJSON.value0)))(function () {
                                                                  return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                                              });
                                                          };
                                                          throw new Error("Failed pattern match at Stories.MetaTree (line 129, column 5 - line 133, column 18): " + [ treeJSON.constructor.name ]);
                                                      })())(function () {
                                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Stories.MetaTree (line 115, column 16 - line 134, column 14): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var _code = function (dictStrong) {
      var $27 = _panels(dictStrong);
      var $28 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($29) {
          return $27($28($29));
      };
  };
  var component = function (dictMonadAff) {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-container") ])([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-about") ])([ Halogen_HTML_Elements.h1([ Halogen_HTML_Properties.classes([ "text-3xl", "p-2" ]) ])([ Halogen_HTML_Core.text("Meta and Printer Interpreters") ]), Halogen_HTML_Elements.div_(blurbtext) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-code") ])([ Ocelot_Block_FormField.field_({
              label: Halogen_HTML_Core.text("(hide this panel if screen too small)"),
              helpText: [  ],
              error: [  ],
              inputId: "show-code"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-code"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _code(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Stories_Utilities.syntaxHighlightedCode(Data_Lens_Getter.view(_evaluatorCode(Data_Lens_Internal_Forget.strongForget))(state)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Stories_Utilities.syntaxHighlightedCode(Data_Lens_Getter.view(_drawCode(Data_Lens_Internal_Forget.strongForget))(state)))(Stories_Utilities.syntaxHighlightedCode(Data_Lens_Getter.view(_handlerCode(Data_Lens_Internal_Forget.strongForget))(state))))) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("svg-container") ])([  ]) ]);
      };
      var initialState = {
          tree: Data_Maybe.Nothing.value,
          panels: {
              blurb: D3Tagless_Block_Expandable.Expanded.value,
              code: D3Tagless_Block_Expandable.Collapsed.value
          },
          snippets: {
              draw: "",
              evaluator: "",
              handler: ""
          }
      };
      return Halogen_Component.mkComponent({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Halogen_Query_HalogenM.monadStateHalogenM),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Initialize.value),
              finalize: Halogen_Component.defaultEval.finalize
          })
      });
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.PrintTree"] = $PS["Stories.PrintTree"] || {};
  var exports = $PS["Stories.PrintTree"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Examples_Tree_Configure = $PS["D3.Examples.Tree.Configure"];
  var D3_Layouts_Hierarchical = $PS["D3.Layouts.Hierarchical"];
  var D3Tagless_Block_Expandable = $PS["D3Tagless.Block.Expandable"];
  var D3Tagless_Block_Toggle = $PS["D3Tagless.Block.Toggle"];
  var D3Tagless_Instance_Selection = $PS["D3Tagless.Instance.Selection"];
  var D3Tagless_Utility = $PS["D3Tagless.Utility"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Ocelot_Block_FormField = $PS["Ocelot.Block.FormField"];
  var Snippets = $PS["Snippets"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var ToggleCard = (function () {
      function ToggleCard(value0) {
          this.value0 = value0;
      };
      ToggleCard.create = function (value0) {
          return new ToggleCard(value0);
      };
      return ToggleCard;
  })();
  var blurbtext = "Id sint laboris reprehenderit officia anim nisi consectetur voluptate enim.\x0a  Commodo cillum minim nisi laborum eiusmod veniam ullamco id ex fugiat eu anim.\x0a  Irure est aute laborum duis. Lorem dolore id sunt incididunt ut ea. Nostrud\x0a  enim officia nisi anim consequat cupidatat consectetur consequat ex excepteur.\x0a  Lorem nisi in reprehenderit ex adipisicing magna elit aute sunt. Cillum non\x0a  Lorem minim duis culpa ullamco aute ex minim. Mollit anim in nisi tempor enim\x0a  exercitation dolore. Veniam consequat minim nostrud amet duis dolore tempor\x0a  voluptate quis culpa. Laborum dolor pariatur ut est cupidatat elit deserunt\x0a  occaecat tempor aliquip anim. \x0a  \x0a  Velit irure ea voluptate ipsum ex exercitation\x0a  dolore voluptate reprehenderit sit anim sunt. Anim fugiat ad ut qui cillum\x0a  tempor occaecat et deserunt nostrud non ipsum. Id non qui mollit culpa elit\x0a  cillum ipsum excepteur adipisicing qui. Incididunt adipisicing sit incididunt\x0a  consequat minim id do exercitation cupidatat est sunt mollit. Anim ut ullamco\x0a  enim culpa. Adipisicing ad non esse laboris anim consequat ut velit esse\x0a  consequat tempor. Commodo magna esse ullamco ipsum et ipsum minim dolore esse\x0a  veniam ea commodo labore. Nulla deserunt id ad anim anim proident labore\x0a  occaecat sint esse nostrud. Duis velit nostrud ullamco cillum cillum Lorem\x0a  cupidatat irure.";
  var _snippets = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "snippets";
  }))()()(Type_Proxy["Proxy"].value);
  var _panels = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "panels";
  }))()()(Type_Proxy["Proxy"].value);
  var _print = function (dictStrong) {
      var $26 = _panels(dictStrong);
      var $27 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "print";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($28) {
          return $26($27($28));
      };
  };
  var _handlerCode = function (dictStrong) {
      var $29 = _snippets(dictStrong);
      var $30 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "handler";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($31) {
          return $29($30($31));
      };
  };
  var handleAction = function (dictBind) {
      return function (dictMonadAff) {
          return function (dictMonadState) {
              return function (v) {
                  if (v instanceof ToggleCard) {
                      return Data_Lens_Setter.modifying(dictMonadState)(v.value0(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(D3Tagless_Block_Expandable.heytingAlgebraStatus));
                  };
                  if (v instanceof Initialize) {
                      return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M(D3Tagless_Utility.removeExistingSVG(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container"))))(function (detached) {
                          return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Snippets.readSnippetFiles("PrintTreeHandleActions")))(function (text) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_handlerCode(Data_Profunctor_Strong.strongFn))(text))(function () {
                                  return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(D3_Layouts_Hierarchical.getTreeViaAJAX("./data/flare-2.json")))(function (treeJSON) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)((function () {
                                          if (treeJSON instanceof Data_Either.Left) {
                                              return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                          };
                                          if (treeJSON instanceof Data_Either.Right) {
                                              return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(D3_Examples_Tree_Configure.getPrintTree)(D3_Layouts_Hierarchical.makeModel(Effect_Aff.bindAff)(Effect_Aff.monadEffectAff)(D3_Data_Tree.TidyTree.value)(D3_Data_Tree.Radial.value)(treeJSON.value0))))(function (textRep) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Control_Monad_State_Class.modify_(dictMonadState)(function (st) {
                                                      var $22 = {};
                                                      for (var $23 in st) {
                                                          if ({}.hasOwnProperty.call(st, $23)) {
                                                              $22[$23] = st[$23];
                                                          };
                                                      };
                                                      $22.tree = textRep;
                                                      return $22;
                                                  }))(function () {
                                                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                                  });
                                              });
                                          };
                                          throw new Error("Failed pattern match at Stories.PrintTree (line 143, column 5 - line 148, column 18): " + [ treeJSON.constructor.name ]);
                                      })())(function () {
                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                      });
                                  });
                              });
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Stories.PrintTree (line 132, column 16 - line 149, column 14): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var _code = function (dictStrong) {
      var $35 = _panels(dictStrong);
      var $36 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($37) {
          return $35($36($37));
      };
  };
  var _blurb = function (dictStrong) {
      var $38 = _panels(dictStrong);
      var $39 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "blurb";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($40) {
          return $38($39($40));
      };
  };
  var component = function (dictMonadAff) {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-container") ])([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-controls") ])([ Halogen_HTML_Core.text("Les Mis") ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-about") ])([ Ocelot_Block_FormField.field_({
              label: Halogen_HTML_Core.text("About"),
              helpText: [  ],
              error: [  ],
              inputId: "show-blurb"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-blurb"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_blurb(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _blurb(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_blurb(Data_Lens_Internal_Forget.strongForget))(state))([ Halogen_HTML_Core.text(blurbtext) ]) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-code") ])([ Ocelot_Block_FormField.field_({
              label: Halogen_HTML_Core.text("(hide this panel if screen too small)"),
              helpText: [  ],
              error: [  ],
              inputId: "show-code"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-code"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _code(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))(Stories_Utilities.syntaxHighlightedCode(Data_Lens_Getter.view(_handlerCode(Data_Lens_Internal_Forget.strongForget))(state))) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-code") ])([ Ocelot_Block_FormField.field_({
              label: Halogen_HTML_Core.text("Output"),
              helpText: [  ],
              error: [  ],
              inputId: "show-print"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-print"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_print(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _print(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_print(Data_Lens_Internal_Forget.strongForget))(state))([ Halogen_HTML_Elements.code_([ Halogen_HTML_Core.text(state.tree) ]) ]) ]) ]);
      };
      var initialState = {
          tree: "",
          panels: {
              blurb: D3Tagless_Block_Expandable.Collapsed.value,
              code: D3Tagless_Block_Expandable.Collapsed.value,
              print: D3Tagless_Block_Expandable.Expanded.value
          },
          snippets: {
              draw: "",
              handler: ""
          }
      };
      return Halogen_Component.mkComponent({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Halogen_Query_HalogenM.monadStateHalogenM),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Initialize.value),
              finalize: Halogen_Component.defaultEval.finalize
          })
      });
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.Spago.Forces"] = $PS["Stories.Spago.Forces"] || {};
  var exports = $PS["Stories.Spago.Forces"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Examples_Spago_Model = $PS["D3.Examples.Spago.Model"];
  var D3_Simulation_Config = $PS["D3.Simulation.Config"];
  var D3_Simulation_Forces = $PS["D3.Simulation.Forces"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];                
  var forceLibrary = (function () {
      var usedModulesOnly = Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("used modules only", D3_Examples_Spago_Model.datum_.isUsedModule));
      var useGridXY = function (d) {
          return function (v) {
              return D3_Examples_Spago_Model.datum_.gridPoint(d);
          };
      };
      var unusedModulesOnly = Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("unused modules only", D3_Examples_Spago_Model.datum_.isUnusedModule));
      var treeXY = function (d) {
          return function (v) {
              return D3_Examples_Spago_Model.datum_.treePoint(d);
          };
      };
      var treeExceptLeaves = Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("tree parent nodes only", D3_Examples_Spago_Model.datum_.isTreeParent));
      var packagesOnly = Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("all packages", D3_Examples_Spago_Model.datum_.isPackage));
      var modulesOnly = Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("all modules", D3_Examples_Spago_Model.datum_.isModule));
      var centerXY = function (v) {
          return function (v1) {
              return {
                  x: 0.0,
                  y: 0.0
              };
          };
      };
      return D3_Simulation_Forces.initialize(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ D3_Simulation_Forces.createForce("center")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceCenter.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.5), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumber)(0.0) ]), D3_Simulation_Forces.createForce("x")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceX.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(5.0e-2), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumber)(0.0) ]), D3_Simulation_Forces.createForce("y")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceY.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(7.0e-2), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumber)(0.0) ]), D3_Simulation_Forces.createForce("collide1")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceCollide.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(1.0), D3_Simulation_Config.radius(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.collideRadius) ]), D3_Simulation_Forces.createForce("collide2")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceCollide.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.7), D3_Simulation_Config.radius(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.collideRadiusBig) ]), D3_Simulation_Forces.createForce("charge1")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceManyBody.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(-50.0), D3_Simulation_Config.theta(D3_Attributes_Instances.toAttrNumber)(0.9), D3_Simulation_Config.distanceMin(D3_Attributes_Instances.toAttrNumber)(1.0), D3_Simulation_Config.distanceMax(D3_Attributes_Instances.toAttrNumber)(Data_Number.infinity) ]), D3_Simulation_Forces.createForce("charge2")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceManyBody.value))(D3_Simulation_Types.allNodes)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(-100.0), D3_Simulation_Config.theta(D3_Attributes_Instances.toAttrNumber)(0.9), D3_Simulation_Config.distanceMin(D3_Attributes_Instances.toAttrNumber)(1.0), D3_Simulation_Config.distanceMax(D3_Attributes_Instances.toAttrNumber)(400.0) ]), D3_Simulation_Forces.createForce("chargetree")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceManyBody.value))(treeExceptLeaves)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(-100.0), D3_Simulation_Config.theta(D3_Attributes_Instances.toAttrNumber)(0.9), D3_Simulation_Config.distanceMin(D3_Attributes_Instances.toAttrNumber)(1.0), D3_Simulation_Config.distanceMax(D3_Attributes_Instances.toAttrNumber)(400.0) ]), D3_Simulation_Forces.createForce("clusterx_M")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceX.value))(modulesOnly)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.2), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.gridPointX) ]), D3_Simulation_Forces.createForce("clustery_M")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceY.value))(modulesOnly)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.2), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.gridPointY) ]), D3_Simulation_Forces.createForce("clusterx_P")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceX.value))(packagesOnly)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.8), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.gridPointX) ]), D3_Simulation_Forces.createForce("clustery_P")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceY.value))(packagesOnly)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.8), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.gridPointY) ]), D3_Simulation_Forces.createForce("htreeNodesX")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceX.value))(Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("tree only", function (d) {
          return D3_Examples_Spago_Model.datum_.connected(d);
      })))([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.4), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.treePointX) ]), D3_Simulation_Forces.createForce("htreeNodesY")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceY.value))(Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("tree only", function (d) {
          return D3_Examples_Spago_Model.datum_.connected(d);
      })))([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.4), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.treePointY) ]), D3_Simulation_Forces.createForce("vtreeNodesX")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceX.value))(Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("tree only", function (d) {
          return D3_Examples_Spago_Model.datum_.connected(d);
      })))([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.4), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.treePointY) ]), D3_Simulation_Forces.createForce("vtreeNodesY")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceY.value))(Data_Maybe.Just.create(new D3_Simulation_Types.ForceFilter("tree only", function (d) {
          return D3_Examples_Spago_Model.datum_.connected(d);
      })))([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.4), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumberFn)(D3_Examples_Spago_Model.datum_.treePointX) ]), D3_Simulation_Forces.createForce("packageOrbit")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceRadial.value))(packagesOnly)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.7), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.radius(D3_Attributes_Instances.toAttrNumber)(500.0) ]), D3_Simulation_Forces.createForce("unusedOrbit")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceRadial.value))(unusedModulesOnly)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.8), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.radius(D3_Attributes_Instances.toAttrNumber)(900.0) ]), D3_Simulation_Forces.createForce("moduleOrbit")(new D3_Simulation_Types.RegularForce(D3_Simulation_Types.ForceRadial.value))(usedModulesOnly)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.8), D3_Simulation_Config.x(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.y(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.radius(D3_Attributes_Instances.toAttrNumber)(600.0) ]), D3_Simulation_Forces.createLinkForce(Data_Maybe.Nothing.value)([ D3_Simulation_Config.strength(D3_Attributes_Instances.toAttrNumber)(0.5), D3_Simulation_Config.distance(D3_Attributes_Instances.toAttrNumber)(0.0), D3_Simulation_Config.numKey(function ($4) {
          return Data_Int.toNumber(D3_Examples_Spago_Model.datum_.id($4));
      }) ]) ]);
  })();
  exports["forceLibrary"] = forceLibrary;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Ocelot.Block.Button"] = $PS["Ocelot.Block.Button"] || {};
  var exports = $PS["Ocelot.Block.Button"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var rightClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "rounded-r" ]);
  var leftClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "mr-px", "rounded-l" ]);
  var centerClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "mr-px" ]);
  var buttonSharedClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "no-outline", "px-4", "py-2", "!active:border-b", "active:border-t", "disabled:opacity-50", "disabled:cursor-default", "!disabled:cursor-pointer" ]);
  var buttonPrimaryClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "bg-blue-88", "border-blue-88", "hover:!disabled:bg-blue-82", "focus:bg-blue-82", "text-white" ]);
  var buttonMainClasses = Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonSharedClasses)(Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "rounded" ]));
  var buttonGroupClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "flex", "items-center" ]);
  var buttonGroupBuilder = function (classes) {
      return function (iprops) {
          return Halogen_HTML_Elements.button(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonSharedClasses)(classes)) ])(iprops));
      };
  };
  var buttonPrimaryCenter = buttonGroupBuilder(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonPrimaryClasses)(centerClasses));
  var buttonPrimaryLeft = buttonGroupBuilder(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonPrimaryClasses)(leftClasses));
  var buttonPrimaryRight = buttonGroupBuilder(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonPrimaryClasses)(rightClasses));
  var buttonGroup = function (iprops) {
      return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(buttonGroupClasses) ])(iprops));
  };
  var buttonGroup_ = buttonGroup([  ]);                                                                                               
  var buttonClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "bg-grey-50-a20", "border-grey-50-a20", "hover:!disabled:bg-grey-50-a30", "focus:bg-grey-50-a30", "text-black-20" ]);
  var buttonLeft = buttonGroupBuilder(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonClasses)(leftClasses));
  var buttonRight = buttonGroupBuilder(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonClasses)(rightClasses));
  var buttonCenter = buttonGroupBuilder(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonClasses)(centerClasses));
  var buttonBuilder = function (classes) {
      return function (iprops) {
          return Halogen_HTML_Elements.button(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buttonMainClasses)(classes)) ])(iprops));
      };
  };                                       
  var button = buttonBuilder(buttonClasses);
  exports["buttonGroup_"] = buttonGroup_;
  exports["buttonCenter"] = buttonCenter;
  exports["buttonPrimaryCenter"] = buttonPrimaryCenter;
  exports["buttonLeft"] = buttonLeft;
  exports["buttonPrimaryLeft"] = buttonPrimaryLeft;
  exports["buttonRight"] = buttonRight;
  exports["buttonPrimaryRight"] = buttonPrimaryRight;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Ocelot.Block.Checkbox"] = $PS["Ocelot.Block.Checkbox"] || {};
  var exports = $PS["Ocelot.Block.Checkbox"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var labelClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "flex", "flex-row", "inline-block", "py-2", "cursor-pointer", "text-black-20", "items-center", "text-left" ]);
  var inputClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "!disabled:sibling:bg-white", "disabled:sibling:bg-grey-95", "checked:sibling:before:opacity-100", "checked:sibling:before:scale-1", "checked:!disabled:sibling:border-blue-88", "focus:sibling:border-blue-88", "!checked:sibling:before:opacity-0", "!checked:sibling:before:scale-0", "!focus:hover:!checked:!disabled:sibling:border-grey-70", "focus:sibling:shadow", "checked:!disabled:sibling:before:bg-blue-88", "checked:disabled:sibling:before:bg-grey-80", "checked:disabled:sibling:border-grey-80", "offscreen", "checked:sibling:after:opacity-100", "checked:sibling:after:scale-1", "!checked:sibling:after:opacity-0", "!checked:sibling:after:scale-0" ]);
  var checkboxClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "relative", "content-box", "border-2", "border-solid", "h-5", "w-5", "flex-none", "no-content", "mr-3", "rounded", "before:transition-1/4-bounce", "before:absolute", "before:h-full", "before:w-full", "before:no-content", "after:transition-1/4-bounce", "after:absolute", "after:w-full", "after:h-2", "after:border-l-2", "after:border-b-2", "after:border-white", "after:no-content", "after:rotate-315", "after:shadow" ]);
  var checkbox = function (iprops) {
      return function (inprops) {
          return function (html) {
              return Halogen_HTML_Elements.label(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(labelClasses) ])(iprops))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.input(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(inputClasses), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputCheckbox.value) ])(inprops)), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes(checkboxClasses) ])([  ]) ])(html));
          };
      };
  };
  var checkbox_ = checkbox([  ]);
  exports["checkbox_"] = checkbox_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Ocelot.Block.Builder"] = $PS["Ocelot.Block.Builder"] || {};
  var exports = $PS["Ocelot.Block.Builder"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];                
  var blockBuilder = function (elem) {
      return function (classes) {
          return function (iprops) {
              return elem(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(classes) ])(iprops));
          };
      };
  };
  exports["blockBuilder"] = blockBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Ocelot.Block.Table"] = $PS["Ocelot.Block.Table"] || {};
  var exports = $PS["Ocelot.Block.Table"];
  var Data_Functor = $PS["Data.Functor"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Ocelot_Block_Builder = $PS["Ocelot.Block.Builder"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var tableClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "w-full", "text-left", "border-collapse" ]);
  var table = Ocelot_Block_Builder.blockBuilder(Halogen_HTML_Elements.table)(tableClasses);
  var table_ = table([  ]);
  var row_ = Halogen_HTML_Elements.tr_;
  var headerClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "bg-grey-90", "py-4", "px-5", "font-medium", "text-black-20" ]);
  var header = Ocelot_Block_Builder.blockBuilder(Halogen_HTML_Elements.th)(headerClasses);
  var cellClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "bg-white", "p-5", "min-h-20", "border-b", "border-grey-95" ]);
  var cell = Ocelot_Block_Builder.blockBuilder(Halogen_HTML_Elements.td)(cellClasses);
  var cell_ = cell([  ]);
  exports["table_"] = table_;
  exports["row_"] = row_;
  exports["header"] = header;
  exports["cell"] = cell;
  exports["cell_"] = cell_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.Spago.State"] = $PS["Stories.Spago.State"] || {};
  var exports = $PS["Stories.Spago.State"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Examples_Spago_Draw_Attributes = $PS["D3.Examples.Spago.Draw.Attributes"];
  var D3_Examples_Spago_Model = $PS["D3.Examples.Spago.Model"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_At = $PS["Data.Lens.At"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Prism_Maybe = $PS["Data.Lens.Prism.Maybe"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var initialScene = function (forceLibrary) {
      return {
          chooseNodes: D3_Examples_Spago_Model.isPackage,
          linksShown: Data_Function["const"](false),
          linksActive: Data_Function["const"](false),
          forceStatuses: D3_Simulation_Types.getStatusMap(forceLibrary),
          cssClass: "",
          attributes: D3_Examples_Spago_Draw_Attributes.clusterSceneAttributes,
          callback: D3_Attributes_Sugar.x(D3_Attributes_Instances.toAttrNumber)(0.0),
          nodeInitializerFunctions: [  ]
      };
  };
  var getSimulationVariables = function (state) {
      var handle = Data_Lens_Getter.view(D3_Simulation_Types["_handle"](Data_Lens_Internal_Forget.strongForget))(state);
      return D3_FFI.readSimulationVariables(handle);
  };
  var _staging = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "staging";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _scene = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "scene";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _sceneAttributes = function (dictStrong) {
      var $28 = _scene(dictStrong);
      var $29 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "attributes";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($30) {
          return $28($29($30));
      };
  };
  var _rawdata = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "rawdata";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _nodes = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "nodes";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _stagingNodes = function (dictStrong) {
      return function (dictChoice) {
          var $31 = _staging(dictStrong);
          var $32 = _rawdata(dictStrong);
          var $33 = _nodes(dictStrong);
          return function ($34) {
              return $31($32($33($34)));
          };
      };
  };
  var _nodeInitializerFunctions = function (dictStrong) {
      var $35 = _scene(dictStrong);
      var $36 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "nodeInitializerFunctions";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($37) {
          return $35($36($37));
      };
  };
  var _model = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "model";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _modelNodes = function (dictStrong) {
      return function (dictChoice) {
          var $38 = _model(dictStrong);
          var $39 = Data_Lens_Prism_Maybe["_Just"](dictChoice);
          var $40 = _nodes(dictStrong);
          return function ($41) {
              return $38($39($40($41)));
          };
      };
  };
  var _linksWithForce = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "linksWithForce";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _stagingLinkFilter = function (dictStrong) {
      var $42 = _staging(dictStrong);
      var $43 = _linksWithForce(dictStrong);
      return function ($44) {
          return $42($43($44));
      };
  };
  var _linksShown = function (dictStrong) {
      var $45 = _scene(dictStrong);
      var $46 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "linksShown";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($47) {
          return $45($46($47));
      };
  };
  var _linksActive = function (dictStrong) {
      var $48 = _scene(dictStrong);
      var $49 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "linksActive";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($50) {
          return $48($49($50));
      };
  };
  var _links = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "links";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _modelLinks = function (dictStrong) {
      return function (dictChoice) {
          var $51 = _model(dictStrong);
          var $52 = Data_Lens_Prism_Maybe["_Just"](dictChoice);
          var $53 = _links(dictStrong);
          return function ($54) {
              return $51($52($53($54)));
          };
      };
  };
  var _stagingLinks = function (dictStrong) {
      return function (dictChoice) {
          var $55 = _staging(dictStrong);
          var $56 = _rawdata(dictStrong);
          var $57 = _links(dictStrong);
          return function ($58) {
              return $55($56($57($58)));
          };
      };
  };
  var _forceStatuses = function (dictStrong) {
      var $59 = _scene(dictStrong);
      var $60 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "forceStatuses";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($61) {
          return $59($60($61));
      };
  };
  var _forceStatus = function (dictStrong) {
      return function (dictChoice) {
          return function (label) {
              var $62 = _forceStatuses(dictStrong);
              var $63 = Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordString))(label)(dictStrong);
              var $64 = Data_Lens_Prism_Maybe["_Just"](dictChoice);
              return function ($65) {
                  return $62($63($64($65)));
              };
          };
      };
  };
  var _enterselections = function (dictStrong) {
      return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "selections";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
  };
  var _cssClass = function (dictStrong) {
      var $66 = _scene(dictStrong);
      var $67 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "cssClass";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($68) {
          return $66($67($68));
      };
  };
  var _chooseNodes = function (dictStrong) {
      var $69 = _scene(dictStrong);
      var $70 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "chooseNodes";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($71) {
          return $69($70($71));
      };
  };
  var _callback = function (dictStrong) {
      var $72 = _scene(dictStrong);
      var $73 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "callback";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($74) {
          return $72($73($74));
      };
  };
  exports["initialScene"] = initialScene;
  exports["_model"] = _model;
  exports["_staging"] = _staging;
  exports["_nodes"] = _nodes;
  exports["_links"] = _links;
  exports["_enterselections"] = _enterselections;
  exports["_forceStatus"] = _forceStatus;
  exports["_forceStatuses"] = _forceStatuses;
  exports["_chooseNodes"] = _chooseNodes;
  exports["_linksShown"] = _linksShown;
  exports["_linksActive"] = _linksActive;
  exports["_cssClass"] = _cssClass;
  exports["_callback"] = _callback;
  exports["_sceneAttributes"] = _sceneAttributes;
  exports["_nodeInitializerFunctions"] = _nodeInitializerFunctions;
  exports["getSimulationVariables"] = getSimulationVariables;
  exports["_modelNodes"] = _modelNodes;
  exports["_modelLinks"] = _modelLinks;
  exports["_stagingNodes"] = _stagingNodes;
  exports["_stagingLinks"] = _stagingLinks;
  exports["_stagingLinkFilter"] = _stagingLinkFilter;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["UIGuide.Block.Backdrop"] = $PS["UIGuide.Block.Backdrop"] || {};
  var exports = $PS["UIGuide.Block.Backdrop"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];
  var backdropClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "p-6", "flex", "flex-1" ]);
  var backdropDefaultClasses = Data_Semigroup.append(Data_Semigroup.semigroupArray)(backdropClasses)(Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "bg-grey-95" ]));
  var backdrop = function (iprops) {
      return function (html) {
          return Halogen_HTML_Elements.div(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(backdropDefaultClasses) ])(iprops))(html);
      };
  };
  var backdrop_ = backdrop([  ]);
  exports["backdrop"] = backdrop;
  exports["backdrop_"] = backdrop_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.Spago.HTML"] = $PS["Stories.Spago.HTML"] || {};
  var exports = $PS["Stories.Spago.HTML"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Examples_Spago_Draw_Attributes = $PS["D3.Examples.Spago.Draw.Attributes"];
  var D3_Examples_Spago_Files = $PS["D3.Examples.Spago.Files"];
  var D3_Examples_Spago_Model = $PS["D3.Examples.Spago.Model"];
  var D3_Simulation_Forces = $PS["D3.Simulation.Forces"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var D3Tagless_Block_Card = $PS["D3Tagless.Block.Card"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var DOM_HTML_Indexed_StepValue = $PS["DOM.HTML.Indexed.StepValue"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_Block_Button = $PS["Ocelot.Block.Button"];
  var Ocelot_Block_Checkbox = $PS["Ocelot.Block.Checkbox"];
  var Ocelot_Block_Format = $PS["Ocelot.Block.Format"];
  var Ocelot_Block_Table = $PS["Ocelot.Block.Table"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Stories_Spago_Actions = $PS["Stories.Spago.Actions"];
  var Stories_Spago_State = $PS["Stories.Spago.State"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var UIGuide_Block_Backdrop = $PS["UIGuide.Block.Backdrop"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var slider = function (dictShow) {
      return function (config) {
          var toScale = function (s) {
              return Data_Int.toNumber(Data_Maybe.fromMaybe(0)(Data_Int.fromString(s))) / 100.0;
          };
          return [ Halogen_HTML_Events.onValueInput(function ($3) {
              return Stories_Spago_Actions.ChangeSimConfig.create(config["var"](toScale($3)));
          }), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputRange.value), Halogen_HTML_Properties.id(config.id), Halogen_HTML_Properties.class_("scaling-slider"), Halogen_HTML_Properties.min(config.min), Halogen_HTML_Properties.max(config.max), Halogen_HTML_Properties.step(new DOM_HTML_Indexed_StepValue.Step(config.step)), Halogen_HTML_Properties.value(Data_Show.show(dictShow)(config.value)) ];
      };
  };
  var renderTableForces = function (state) {
      var tableData = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Lens_Getter.view(D3_Simulation_Types["_forceLibrary"](Data_Lens_Internal_Forget.strongForget))(state)));
      var renderHeader = Ocelot_Block_Table.row_([ Ocelot_Block_Table.header([ Ocelot_HTML_Properties.css("w-10") ])([ Halogen_HTML_Core.text("Active") ]), Ocelot_Block_Table.header([ Ocelot_HTML_Properties.css("w-2/3 text-left") ])([ Halogen_HTML_Core.text("Details") ]), Ocelot_Block_Table.header([ Ocelot_HTML_Properties.css("w-2/3 text-left") ])([ Halogen_HTML_Core.text("Acting on...") ]) ]);
      var renderData = function (v) {
          return [ Ocelot_Block_Table.cell_([ Ocelot_Block_Checkbox.checkbox_([ Halogen_HTML_Properties.checked(Data_Eq.eq(D3_Simulation_Types.eqForceStatus)(v.status)(D3_Simulation_Types.ForceActive.value)), Halogen_HTML_Events.onChecked(Data_Function["const"](new Stories_Spago_Actions.ToggleForce(v.name))) ])([  ]) ]), Ocelot_Block_Table.cell([ Ocelot_HTML_Properties.css("text-left") ])([ Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(v.name + ("\x0a" + D3_Simulation_Forces.showType(v.type))) ]) ]), Ocelot_Block_Table.cell([ Ocelot_HTML_Properties.css("text-left") ])([ Halogen_HTML_Core.text(D3_Simulation_Types.showForceFilter(v.filter)) ]) ];
      };
      var renderBody = Data_Functor.map(Data_Functor.functorArray)(Ocelot_Block_Table.row_)(Data_Functor.map(Data_Functor.functorArray)(renderData)(tableData));
      var renderTable = Ocelot_Block_Table.table_(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ renderHeader ])(renderBody));
      return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("text-sm") ])([ UIGuide_Block_Backdrop.backdrop_([ Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.h2_([ Halogen_HTML_Core.text("Control which forces are acting") ]), renderTable ]) ]) ]) ]);
  };
  var renderSimState = function (state) {
      return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "m-6" ]) ])([ Ocelot_Block_Format.caption_([ Halogen_HTML_Core.text("Simulation state") ]), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("class: " + Data_Lens_Getter.view(Stories_Spago_State["_cssClass"](Data_Lens_Internal_Forget.strongForget))(state)) ]), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("link count: " + Data_Show.show(Data_Show.showInt)(Data_Array.length(Data_Lens_Getter.view(Stories_Spago_State["_stagingLinks"](Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Monoid.monoidArray)))(state)))) ]), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("node count:" + Data_Show.show(Data_Show.showInt)(Data_Array.length(Data_Lens_Getter.view(Stories_Spago_State["_stagingNodes"](Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Monoid.monoidArray)))(state)))) ]) ]);
  };
  var renderSimControls = function (state) {
      var params = Stories_Spago_State.getSimulationVariables(state);
      return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "m-6" ]) ])([ Ocelot_Block_Format.subHeading_([ Halogen_HTML_Core.text("Simulation controls") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Format.contentHeading_([ Halogen_HTML_Core.text("Scenes") ]), Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonPrimaryLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](new Stories_Spago_Actions.Scene(Stories_Spago_Actions.PackageGrid.value))) ])([ Halogen_HTML_Core.text("Package Grid") ]), Ocelot_Block_Button.buttonPrimaryRight([ Halogen_HTML_Events.onClick(Data_Function["const"](new Stories_Spago_Actions.Scene(Stories_Spago_Actions.PackageGraph.value))) ])([ Halogen_HTML_Core.text("Package Graph") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonPrimaryLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Scene.create(new Stories_Spago_Actions.ModuleTree(D3_Data_Tree.Horizontal.value)))) ])([ Halogen_HTML_Core.text("Horiz. Tree") ]), Ocelot_Block_Button.buttonPrimaryCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Scene.create(new Stories_Spago_Actions.ModuleTree(D3_Data_Tree.Vertical.value)))) ])([ Halogen_HTML_Core.text("Vert. Tree") ]), Ocelot_Block_Button.buttonPrimaryRight([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Scene.create(new Stories_Spago_Actions.ModuleTree(D3_Data_Tree.Radial.value)))) ])([ Halogen_HTML_Core.text("Radial Tree") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonPrimaryLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](new Stories_Spago_Actions.Scene(Stories_Spago_Actions.LayerSwarm.value))) ])([ Halogen_HTML_Core.text("LayerSwarm") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Format.contentHeading_([ Halogen_HTML_Core.text("Params") ]), Halogen_HTML_Elements.input(slider(Data_Show.showNumber)({
          "var": D3_Simulation_Types.Alpha.create,
          id: "alpha-slider",
          min: 0.0,
          max: 100.0,
          step: 10.0,
          value: params.alpha * 100.0
      })), Ocelot_Block_Format.caption_([ Halogen_HTML_Core.text("Alpha: " + Data_Show.show(Data_Show.showNumber)(params.alpha)) ]), Halogen_HTML_Elements.input(slider(Data_Show.showNumber)({
          "var": D3_Simulation_Types.AlphaTarget.create,
          id: "alphatarget-slider",
          min: 0.0,
          max: 100.0,
          step: 10.0,
          value: params.alphaTarget * 100.0
      })), Ocelot_Block_Format.caption_([ Halogen_HTML_Core.text("AlphaTarget: " + Data_Show.show(Data_Show.showNumber)(params.alphaTarget)) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonPrimaryLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.StopSim.value)) ])([ Halogen_HTML_Core.text("Stop") ]), Ocelot_Block_Button.buttonPrimaryCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeSimConfig.create(new D3_Simulation_Types.AlphaTarget(0.3)))) ])([ Halogen_HTML_Core.text("Heat") ]), Ocelot_Block_Button.buttonPrimaryCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeSimConfig.create(new D3_Simulation_Types.AlphaTarget(0.0)))) ])([ Halogen_HTML_Core.text("Cool") ]), Ocelot_Block_Button.buttonPrimaryRight([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.StartSim.value)) ])([ Halogen_HTML_Core.text("Start") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Format.contentHeading_([ Halogen_HTML_Core.text("Which nodes should be displayed?") ]), Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.NodeFilter(D3_Examples_Spago_Model.isPackage)))) ])([ Halogen_HTML_Core.text("Packages") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.NodeFilter(Data_Function["const"](true))))) ])([ Halogen_HTML_Core.text("Both") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.NodeFilter(Data_Function["const"](false))))) ])([ Halogen_HTML_Core.text("Neither") ]), Ocelot_Block_Button.buttonRight([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.NodeFilter(D3_Examples_Spago_Model.isUsedModule)))) ])([ Halogen_HTML_Core.text("Modules") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Format.contentHeading_([ Halogen_HTML_Core.text("Put links into simulation") ]), Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkShowFilter(D3_Examples_Spago_Files.isM2M_Tree_Link)))) ])([ Halogen_HTML_Core.text("Treelink") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkShowFilter(D3_Examples_Spago_Files.isM2M_Graph_Link)))) ])([ Halogen_HTML_Core.text("Graphlink") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkShowFilter(D3_Examples_Spago_Files.isM2P_Link)))) ])([ Halogen_HTML_Core.text("M2P") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkShowFilter(D3_Examples_Spago_Files.isP2P_Link)))) ])([ Halogen_HTML_Core.text("P2P") ]), Ocelot_Block_Button.buttonRight([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkShowFilter(Data_Function["const"](false))))) ])([ Halogen_HTML_Core.text("none") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Format.contentHeading_([ Halogen_HTML_Core.text("Limit only these links to exert force?") ]), Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkForceFilter(D3_Examples_Spago_Model.isM2M_Tree_Link_)))) ])([ Halogen_HTML_Core.text("Treelink") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkForceFilter(D3_Examples_Spago_Model.isM2M_Graph_Link_)))) ])([ Halogen_HTML_Core.text("Graphlink") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkForceFilter(D3_Examples_Spago_Model.isM2P_Link_)))) ])([ Halogen_HTML_Core.text("M2P") ]), Ocelot_Block_Button.buttonRight([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.Filter.create(new Stories_Spago_Actions.LinkForceFilter(D3_Examples_Spago_Model.isP2P_Link_)))) ])([ Halogen_HTML_Core.text("P2P") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Format.contentHeading_([ Halogen_HTML_Core.text("D3 attributes chosen") ]), Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeStyling.create(new Stories_Spago_Actions.GraphStyle(D3_Examples_Spago_Draw_Attributes.clusterSceneAttributes)))) ])([ Halogen_HTML_Core.text("Clusters") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeStyling.create(new Stories_Spago_Actions.GraphStyle(D3_Examples_Spago_Draw_Attributes.graphSceneAttributes)))) ])([ Halogen_HTML_Core.text("Graph") ]), Ocelot_Block_Button.buttonRight([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeStyling.create(new Stories_Spago_Actions.GraphStyle(D3_Examples_Spago_Draw_Attributes.treeSceneAttributes)))) ])([ Halogen_HTML_Core.text("Tree") ]) ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "mb-6" ]) ])([ Ocelot_Block_Format.contentHeading_([ Halogen_HTML_Core.text("Stylesheet") ]), Ocelot_Block_Button.buttonGroup_([ Ocelot_Block_Button.buttonLeft([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeStyling.create(new Stories_Spago_Actions.TopLevelCSS("cluster")))) ])([ Halogen_HTML_Core.text("Clusters") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeStyling.create(new Stories_Spago_Actions.TopLevelCSS("graph")))) ])([ Halogen_HTML_Core.text("Graph") ]), Ocelot_Block_Button.buttonCenter([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeStyling.create(new Stories_Spago_Actions.TopLevelCSS("tree")))) ])([ Halogen_HTML_Core.text("Tree") ]), Ocelot_Block_Button.buttonRight([ Halogen_HTML_Events.onClick(Data_Function["const"](Stories_Spago_Actions.ChangeStyling.create(new Stories_Spago_Actions.TopLevelCSS("none")))) ])([ Halogen_HTML_Core.text("None") ]) ]) ]) ]);
  };
  var blurbtext = (function () {
      var titleClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "font-bold text-2xl" ]);
      var title = Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.classes(titleClasses) ])([ Halogen_HTML_Core.text("About this Example") ]);
      var paraTexts = Data_Functor.map(Data_Functor.functorArray)(function (s) {
          return [ Halogen_HTML_Core.text(s) ];
      })([ "This example synthesizes a complex dependency graph from the optional JSON\x0a        graph outputs of the PureScript compiler, together with the package\x0a        dependencies from Spago and adds simple line-count per module to give an\x0a        idea of the size of each one.", "With this dataset, operated on by the physics simulation engine, we can\x0a      explore different aspects of the project dependencies. The layout can be\x0a      entirely driven by forces and relationships or partially or totally laid-out\x0a      using algorithms.", "For example, a dependency tree starting at the Main module can be laid-out as\x0a      a radial tree and either fixed in that position or allowed to move under the\x0a      influences of other forces.", "Un-connected modules (which are only present because something in their\x0a      package has been required) can be hidden or clustered separately.", "Modules can be clustered on their packages and the packages can be positioned\x0a      on a simple grid or arranged in a circle by a radial force that applies only\x0a      to them.", "Clicking on a module highlights it and its immediate dependents and\x0a      dependencies. Clicking outside the highlighted module undoes the\x0a      highlighting." ]);
      var paraClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "m-4 " ]);
      var paras = Data_Functor.map(Data_Functor.functorArray)(Halogen_HTML_Elements.p([ Halogen_HTML_Properties.classes(paraClasses) ]))(paraTexts);
      return Halogen_HTML_Elements.div_(Data_Array.cons(title)(paras));
  })();
  var render = function (state) {
      return Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-container spago") ])([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-about") ])([ D3Tagless_Block_Card.card_([ blurbtext ]), renderSimControls(state), renderSimState(state), renderTableForces(state) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("svg-container " + Data_Lens_Getter.view(Stories_Spago_State["_cssClass"](Data_Lens_Internal_Forget.strongForget))(state)) ])([  ]) ]);
  };
  exports["render"] = render;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.Spago"] = $PS["Stories.Spago"] || {};
  var exports = $PS["Stories.Spago"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Data_Types = $PS["D3.Data.Types"];
  var D3_Examples_Spago_Draw = $PS["D3.Examples.Spago.Draw"];
  var D3_Examples_Spago_Draw_Attributes = $PS["D3.Examples.Spago.Draw.Attributes"];
  var D3_Examples_Spago_Files = $PS["D3.Examples.Spago.Files"];
  var D3_Examples_Spago_Model = $PS["D3.Examples.Spago.Model"];
  var D3_Examples_Spago_Tree = $PS["D3.Examples.Spago.Tree"];
  var D3_FFI = $PS["D3.FFI"];
  var D3_Simulation_Types = $PS["D3.Simulation.Types"];
  var D3Tagless_Capabilities = $PS["D3Tagless.Capabilities"];
  var D3Tagless_Instance_Simulation = $PS["D3Tagless.Instance.Simulation"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Subscription = $PS["Halogen.Subscription"];
  var Stories_Spago_Actions = $PS["Stories.Spago.Actions"];
  var Stories_Spago_Forces = $PS["Stories.Spago.Forces"];
  var Stories_Spago_HTML = $PS["Stories.Spago.HTML"];
  var Stories_Spago_State = $PS["Stories.Spago.State"];                
  var stageDataFromModel = function (dictMonadState) {
      return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Control_Monad_State_Class.get(dictMonadState))(function (state) {
          return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_linksShown"](Data_Lens_Internal_Forget.strongForget)))(function (linksShown) {
              return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_linksActive"](Data_Lens_Internal_Forget.strongForget)))(function (linksActive) {
                  return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_chooseNodes"](Data_Lens_Internal_Forget.strongForget)))(function (chooseNodes) {
                      return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_nodeInitializerFunctions"](Data_Lens_Internal_Forget.strongForget)))(function (nodeInitializerFunctions) {
                          return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadState.Monad0()).Bind1())(Data_Lens_Setter.assign(dictMonadState)(Stories_Spago_State["_stagingLinks"](Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn))(Data_Array.filter(linksShown)(Data_Lens_Getter.view(Stories_Spago_State["_modelLinks"](Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Monoid.monoidArray)))(state))))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadState.Monad0()).Bind1())(Data_Lens_Setter.assign(dictMonadState)(Stories_Spago_State["_stagingLinkFilter"](Data_Profunctor_Strong.strongFn))(linksActive))(function () {
                                  var rawnodes = Data_Array.filter(chooseNodes)(Data_Lens_Getter.view(Stories_Spago_State["_modelNodes"](Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Monoid.monoidArray)))(state));
                                  var initializedNodes = Data_Array.foldl(function (b) {
                                      return function (a) {
                                          return a(b);
                                      };
                                  })(rawnodes)(nodeInitializerFunctions);
                                  return Data_Lens_Setter.assign(dictMonadState)(Stories_Spago_State["_stagingNodes"](Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn))(initializedNodes);
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var simulationEvent = function (l) {
      return D3_Attributes_Sugar.onMouseEventEffectful(D3_Data_Types.MouseClick.value)(function (e) {
          return function (d) {
              return function (t) {
                  return Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Halogen_Subscription.notify(l)(new Stories_Spago_Actions.EventFromVizualization(D3_Examples_Spago_Draw.getVizEventFromClick(e)(d)(t))));
              };
          };
      });
  };
  var runSimulation = function (dictMonadEffect) {
      return function (dictMonadState) {
          return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(stageDataFromModel(dictMonadState))(function () {
              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_staging"](Data_Lens_Internal_Forget.strongForget)))(function (staging) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_callback"](Data_Lens_Internal_Forget.strongForget)))(function (callback) {
                      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_sceneAttributes"](Data_Lens_Internal_Forget.strongForget)))(function (sceneAttributes) {
                          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Data_Lens_Getter.use(dictMonadState)(Stories_Spago_State["_forceStatuses"](Data_Lens_Internal_Forget.strongForget)))(function (forceStatuses) {
                              var attributesWithCallback = {
                                  circles: Data_Array.cons(callback)(sceneAttributes.circles),
                                  labels: sceneAttributes.labels
                              };
                              return D3Tagless_Instance_Simulation.runWithD3_Simulation((dictMonadEffect.Monad0()).Bind1())(dictMonadState)(dictMonadEffect)(Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.stop(D3Tagless_Instance_Simulation.simulationMD3Selection_D3))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.actualizeForces(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(forceStatuses))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3_Examples_Spago_Draw.updateSimulation(Data_Eq.eqInt)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Instance_Simulation.monadEffD3SimM)(D3Tagless_Instance_Simulation.selectionMD3Selection_D3S)(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(staging)(attributesWithCallback))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.setConfigVariable(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(new D3_Simulation_Types.Alpha(1.0)))(function () {
                                              return D3Tagless_Capabilities.start(D3Tagless_Instance_Simulation.simulationMD3Selection_D3);
                                          });
                                      });
                                  });
                              }));
                          });
                      });
                  });
              });
          });
      };
  };
  var addTreeToModel = function (rootName) {
      return function (maybeModel) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(maybeModel)(function (model) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Ord.ordString)(rootName)(model.maps.name2ID))(function (rootID) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(D3_Examples_Spago_Tree.treeReduction(rootID)(model));
              });
          });
      };
  };
  var readModelData = Control_Bind.bind(Effect_Aff.bindAff)(Affjax.get(Affjax_ResponseFormat.string)("./data/spago-data/" + "modules.json"))(function (moduleJSON) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.get(Affjax_ResponseFormat.string)("./data/spago-data/" + "packages.json"))(function (packageJSON) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.get(Affjax_ResponseFormat.string)("./data/spago-data/" + "lsdeps.jsonlines"))(function (lsdepJSON) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.get(Affjax_ResponseFormat.string)("./data/spago-data/" + "LOC.json"))(function (locJSON) {
                  var model = Data_Either.hush(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(D3_Examples_Spago_Model.convertFilesToGraphModel)(moduleJSON))(packageJSON))(lsdepJSON))(locJSON));
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(addTreeToModel("Main")(model));
              });
          });
      });
  });
  var handleAction = function ($copy_dictMonadAff) {
      return function ($copy_v) {
          var $tco_var_dictMonadAff = $copy_dictMonadAff;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(dictMonadAff, v) {
              if (v instanceof Stories_Spago_Actions.Initialize) {
                  $tco_done = true;
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(readModelData))(function (v1) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_model"](Data_Profunctor_Strong.strongFn))(Data_Function["const"](v1)))(function () {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(D3Tagless_Instance_Simulation.evalEffectSimulation(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(D3_Examples_Spago_Draw.initialize(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Instance_Simulation.monadEffD3SimM)(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(D3Tagless_Instance_Simulation.selectionMD3Selection_D3S)))(function (openSelections) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                                  var $47 = Stories_Spago_State["_staging"](Data_Profunctor_Strong.strongFn);
                                  var $48 = Stories_Spago_State["_enterselections"](Data_Profunctor_Strong.strongFn);
                                  var $49 = Stories_Spago_State["_nodes"](Data_Profunctor_Strong.strongFn);
                                  return function ($50) {
                                      return $47($48($49($50)));
                                  };
                              })())(Data_Function["const"](openSelections.nodes)))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)((function () {
                                      var $51 = Stories_Spago_State["_staging"](Data_Profunctor_Strong.strongFn);
                                      var $52 = Stories_Spago_State["_enterselections"](Data_Profunctor_Strong.strongFn);
                                      var $53 = Stories_Spago_State["_links"](Data_Profunctor_Strong.strongFn);
                                      return function ($54) {
                                          return $51($52($53($54)));
                                      };
                                  })())(Data_Function["const"](openSelections.links)))(function () {
                                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Subscription.create))(function (v2) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(Halogen_Query_HalogenM.subscribe(v2.emitter)))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_callback"](Data_Profunctor_Strong.strongFn))(simulationEvent(v2.listener)))(function () {
                                                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Stories_Spago_Actions.Finalize) {
                  $tco_done = true;
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
              };
              if (v instanceof Stories_Spago_Actions.EventFromVizualization) {
                  if (v.value0.value0 instanceof D3_Examples_Spago_Files.IsPackage) {
                      $tco_var_dictMonadAff = dictMonadAff;
                      $copy_v = new Stories_Spago_Actions.ToggleChildrenOfNode(v.value0.value1);
                      return;
                  };
                  if (v.value0.value0 instanceof D3_Examples_Spago_Files.IsModule) {
                      $tco_var_dictMonadAff = dictMonadAff;
                      $copy_v = new Stories_Spago_Actions.SpotlightNode(v.value0.value1);
                      return;
                  };
                  throw new Error("Failed pattern match at Stories.Spago (line 90, column 5 - line 92, column 68): " + [ v.value0.constructor.name ]);
              };
              if (v instanceof Stories_Spago_Actions.ToggleChildrenOfNode) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.isPackageOrVisibleModule(v.value0)))(function () {
                      return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                  });
              };
              if (v instanceof Stories_Spago_Actions.UnToggleChildrenOfNode) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.isPackage))(function () {
                      return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                  });
              };
              if (v instanceof Stories_Spago_Actions.SpotlightNode) {
                  $tco_done = true;
                  return D3Tagless_Instance_Simulation.runWithD3_Simulation(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(D3Tagless_Capabilities.stop(D3Tagless_Instance_Simulation.simulationMD3Selection_D3));
              };
              if (v instanceof Stories_Spago_Actions.Scene && v.value0 instanceof Stories_Spago_Actions.PackageGrid) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.allNodes))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksShown"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Files.isM2P_Link))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksActive"](Data_Profunctor_Strong.strongFn))(Data_Function["const"](true)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_cssClass"](Data_Profunctor_Strong.strongFn))("cluster"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_sceneAttributes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Draw_Attributes.clusterSceneAttributes))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_forceStatuses"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Types.onlyTheseForcesActive(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ "clusterx_P", "clustery_P", "clusterx_M", "clustery_M", "collide2" ])))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_nodeInitializerFunctions"](Data_Profunctor_Strong.strongFn))([ D3_Examples_Spago_Model.unpinAllNodes, D3_Examples_Spago_Model.packageNodesToGridXY, D3_Examples_Spago_Model.moduleNodesToContainerXY ]))(function () {
                                              return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Stories_Spago_Actions.Scene && v.value0 instanceof Stories_Spago_Actions.PackageGraph) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.isPackage))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksShown"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Files.isP2P_Link))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksActive"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.sourcePackageIs("my-project")))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_forceStatuses"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Types.onlyTheseForcesActive(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ "center", "collide2", "charge2", "packageOrbit", D3_FFI.linksForceName ])))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_cssClass"](Data_Profunctor_Strong.strongFn))("graph"))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_sceneAttributes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Draw_Attributes.graphSceneAttributes))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_nodeInitializerFunctions"](Data_Profunctor_Strong.strongFn))([ D3_Examples_Spago_Model.unpinAllNodes, D3_Examples_Spago_Model.packagesNodesToPhyllotaxis, D3_Examples_Spago_Model.fixNamedNodeTo("my-project")({
                                              x: 0.0,
                                              y: 0.0
                                          }) ]))(function () {
                                              return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Stories_Spago_Actions.Scene && v.value0 instanceof Stories_Spago_Actions.LayerSwarm) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.isUsedModule))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksShown"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Files.isM2M_Tree_Link))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksActive"](Data_Profunctor_Strong.strongFn))(Data_Function["const"](true)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_cssClass"](Data_Profunctor_Strong.strongFn))("tree"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_sceneAttributes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Draw_Attributes.treeSceneAttributes))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_forceStatuses"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Types.onlyTheseForcesActive(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ "htreeNodesX", "collide1", "y", D3_FFI.linksForceName ])))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_nodeInitializerFunctions"](Data_Profunctor_Strong.strongFn))([ D3_Examples_Spago_Model.unpinAllNodes ]))(function () {
                                              return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Stories_Spago_Actions.Scene && (v.value0 instanceof Stories_Spago_Actions.ModuleTree && v.value0.value0 instanceof D3_Data_Tree.Radial)) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.isUsedModule))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksShown"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Files.isM2M_Tree_Link))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksActive"](Data_Profunctor_Strong.strongFn))(Data_Function["const"](true)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_cssClass"](Data_Profunctor_Strong.strongFn))("tree radial"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_sceneAttributes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Draw_Attributes.treeSceneAttributes))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_forceStatuses"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Types.onlyTheseForcesActive(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ "center", "collide2", "chargetree", "charge2", D3_FFI.linksForceName ])))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_nodeInitializerFunctions"](Data_Profunctor_Strong.strongFn))([ D3_Examples_Spago_Model.unpinAllNodes, D3_Examples_Spago_Model.treeNodesToTreeXY_R, D3_Examples_Spago_Model.fixNamedNodeTo("Main")({
                                              x: 0.0,
                                              y: 0.0
                                          }) ]))(function () {
                                              return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Stories_Spago_Actions.Scene && (v.value0 instanceof Stories_Spago_Actions.ModuleTree && v.value0.value0 instanceof D3_Data_Tree.Horizontal)) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.isUsedModule))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksShown"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Files.isM2M_Tree_Link))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksActive"](Data_Profunctor_Strong.strongFn))(Data_Function["const"](false)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_cssClass"](Data_Profunctor_Strong.strongFn))("tree horizontal"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_sceneAttributes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Draw_Attributes.treeSceneAttributes))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_forceStatuses"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Types.onlyTheseForcesActive(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ "htreeNodesX", "htreeNodesY", "charge1", "collide2" ])))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_nodeInitializerFunctions"](Data_Profunctor_Strong.strongFn))([ D3_Examples_Spago_Model.unpinAllNodes ]))(function () {
                                              return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Stories_Spago_Actions.Scene && (v.value0 instanceof Stories_Spago_Actions.ModuleTree && v.value0.value0 instanceof D3_Data_Tree.Vertical)) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Model.isUsedModule))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksShown"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Files.isM2M_Tree_Link))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksActive"](Data_Profunctor_Strong.strongFn))(Data_Function["const"](false)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_cssClass"](Data_Profunctor_Strong.strongFn))("tree vertical"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_sceneAttributes"](Data_Profunctor_Strong.strongFn))(D3_Examples_Spago_Draw_Attributes.treeSceneAttributes))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_forceStatuses"](Data_Profunctor_Strong.strongFn))(D3_Simulation_Types.onlyTheseForcesActive(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ "vtreeNodesX", "vtreeNodesY", "charge1", "collide2" ])))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_nodeInitializerFunctions"](Data_Profunctor_Strong.strongFn))([ D3_Examples_Spago_Model.unpinAllNodes ]))(function () {
                                              return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
              if (v instanceof Stories_Spago_Actions.ToggleForce) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_forceStatus"](Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn)(v.value0))(D3_Simulation_Types.toggleForceStatus))(function () {
                      return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                  });
              };
              if (v instanceof Stories_Spago_Actions.Filter && v.value0 instanceof Stories_Spago_Actions.LinkShowFilter) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksShown"](Data_Profunctor_Strong.strongFn))(v.value0.value0))(function () {
                      return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                  });
              };
              if (v instanceof Stories_Spago_Actions.Filter && v.value0 instanceof Stories_Spago_Actions.LinkForceFilter) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_linksActive"](Data_Profunctor_Strong.strongFn))(v.value0.value0))(function () {
                      return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                  });
              };
              if (v instanceof Stories_Spago_Actions.Filter && v.value0 instanceof Stories_Spago_Actions.NodeFilter) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_chooseNodes"](Data_Profunctor_Strong.strongFn))(v.value0.value0))(function () {
                      return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                  });
              };
              if (v instanceof Stories_Spago_Actions.ChangeStyling && v.value0 instanceof Stories_Spago_Actions.TopLevelCSS) {
                  $tco_done = true;
                  return Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_cssClass"](Data_Profunctor_Strong.strongFn))(v.value0.value0);
              };
              if (v instanceof Stories_Spago_Actions.ChangeStyling && v.value0 instanceof Stories_Spago_Actions.GraphStyle) {
                  $tco_done = true;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Stories_Spago_State["_sceneAttributes"](Data_Profunctor_Strong.strongFn))(v.value0.value0))(function () {
                      return runSimulation(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadStateHalogenM);
                  });
              };
              if (v instanceof Stories_Spago_Actions.ChangeSimConfig) {
                  $tco_done = true;
                  return D3Tagless_Instance_Simulation.runWithD3_Simulation(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(D3Tagless_Capabilities.setConfigVariable(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(v.value0));
              };
              if (v instanceof Stories_Spago_Actions.StartSim) {
                  $tco_done = true;
                  return D3Tagless_Instance_Simulation.runWithD3_Simulation(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.setConfigVariable(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(new D3_Simulation_Types.Alpha(1.0)))(function () {
                      return D3Tagless_Capabilities.start(D3Tagless_Instance_Simulation.simulationMD3Selection_D3);
                  }));
              };
              if (v instanceof Stories_Spago_Actions.StopSim) {
                  $tco_done = true;
                  return D3Tagless_Instance_Simulation.runWithD3_Simulation(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Control_Bind.discard(Control_Bind.discardUnit)(D3Tagless_Instance_Simulation.bindD3SimM)(D3Tagless_Capabilities.setConfigVariable(D3Tagless_Instance_Simulation.simulationMD3Selection_D3)(new D3_Simulation_Types.Alpha(0.0)))(function () {
                      return D3Tagless_Capabilities.stop(D3Tagless_Instance_Simulation.simulationMD3Selection_D3);
                  }));
              };
              throw new Error("Failed pattern match at Stories.Spago (line 65, column 16 - line 209, column 11): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_dictMonadAff, $copy_v);
          };
          return $tco_result;
      };
  };
  var component = function (dictMonadAff) {
      var initialState = {
          model: Data_Maybe.Nothing.value,
          staging: {
              selections: {
                  nodes: Data_Maybe.Nothing.value,
                  links: Data_Maybe.Nothing.value
              },
              linksWithForce: Data_Function["const"](true),
              rawdata: {
                  nodes: [  ],
                  links: [  ]
              }
          },
          simulation: D3_Simulation_Types.initialSimulationState(Stories_Spago_Forces.forceLibrary),
          scene: Stories_Spago_State.initialScene(Stories_Spago_Forces.forceLibrary)
      };
      return Halogen_Component.mkComponent({
          initialState: Data_Function["const"](initialState),
          render: Stories_Spago_HTML.render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(dictMonadAff),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Stories_Spago_Actions.Initialize.value),
              finalize: new Data_Maybe.Just(Stories_Spago_Actions.Finalize.value)
          })
      });
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.ThreeLittleCircles"] = $PS["Stories.ThreeLittleCircles"] || {};
  var exports = $PS["Stories.ThreeLittleCircles"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var D3_Examples_ThreeLittleCircles = $PS["D3.Examples.ThreeLittleCircles"];
  var D3Tagless_Block_Button = $PS["D3Tagless.Block.Button"];
  var D3Tagless_Block_Expandable = $PS["D3Tagless.Block.Expandable"];
  var D3Tagless_Block_FormField = $PS["D3Tagless.Block.FormField"];
  var D3Tagless_Block_Toggle = $PS["D3Tagless.Block.Toggle"];
  var D3Tagless_Instance_Selection = $PS["D3Tagless.Instance.Selection"];
  var D3Tagless_Utility = $PS["D3Tagless.Utility"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Snippets = $PS["Snippets"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var Finalize = (function () {
      function Finalize() {

      };
      Finalize.value = new Finalize();
      return Finalize;
  })();
  var ToggleCard = (function () {
      function ToggleCard(value0) {
          this.value0 = value0;
      };
      ToggleCard.create = function (value0) {
          return new ToggleCard(value0);
      };
      return ToggleCard;
  })();
  var ToggleExample = (function () {
      function ToggleExample() {

      };
      ToggleExample.value = new ToggleExample();
      return ToggleExample;
  })();
  var simple = [ new Snippets.Blurb("Simplest possible example, just to show syntax."), new Snippets.SnippetFile("TLCSimple"), new Snippets.Blurb("Click the button to see a slightly more realistic example."), Snippets.PreRendered.create(D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](ToggleExample.value)) ])([ Halogen_HTML_Core.text("Simple") ])) ];
  var parabola = [ new Snippets.Blurb("This extends the super-simple model in the direction one would go for a more real-world example."), new Snippets.SnippetFile("TLCParabola"), new Snippets.Blurb("In this example, the data is passed in and must match the type\x0a  specified in the Model. Because the data loses its type information when\x0a  put into D3 we recover the type of Datum and Index using a couple of\x0a  functions to wrap unsafeCoerce. These functions are then used to write\x0a  any attribute setters that are derived from the data elements themselves,\x0a  or their indices"), new Snippets.SnippetFile("TLCDatum_"), new Snippets.Blurb("Again, we're just showing syntax and shape of the DSL here: it's still extremely simple, and the Model,\x0a  datum_ and so on might not be needed for such a simple example."), Snippets.PreRendered.create(D3Tagless_Block_Button.buttonVertical([ Halogen_HTML_Events.onClick(Data_Function["const"](ToggleExample.value)) ])([ Halogen_HTML_Core.text("Parabola") ])) ];
  var _notebooks = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "notebooks";
  }))()()(Type_Proxy["Proxy"].value);
  var _parabola = function (dictStrong) {
      var $19 = _notebooks(dictStrong);
      var $20 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "parabola";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($21) {
          return $19($20($21));
      };
  };
  var _simple = function (dictStrong) {
      var $22 = _notebooks(dictStrong);
      var $23 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "simple";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($24) {
          return $22($23($24));
      };
  };
  var handleAction = function (dictBind) {
      return function (dictMonadAff) {
          return function (dictMonadState) {
              return function (v) {
                  if (v instanceof ToggleCard) {
                      return Data_Lens_Setter.modifying(dictMonadState)(v.value0(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(D3Tagless_Block_Expandable.heytingAlgebraStatus));
                  };
                  if (v instanceof Initialize) {
                      return Control_Bind.bind(dictBind)(Data_Traversable.traverse(Data_Traversable.traversableArray)(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Snippets.substituteSnippetCells(dictBind)(dictMonadAff)(dictMonadState))(simple))(function (simple$prime) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_simple(Data_Profunctor_Strong.strongFn))(simple$prime))(function () {
                              return Control_Bind.bind(dictBind)(Data_Traversable.traverse(Data_Traversable.traversableArray)(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Snippets.substituteSnippetCells(dictBind)(dictMonadAff)(dictMonadState))(parabola))(function (parabola$prime) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_parabola(Data_Profunctor_Strong.strongFn))(parabola$prime))(function () {
                                      return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M(D3_Examples_ThreeLittleCircles.drawThreeCircles(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container"))))(function () {
                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                      });
                                  });
                              });
                          });
                      });
                  };
                  if (v instanceof ToggleExample) {
                      return Control_Bind.bind(dictBind)(Control_Monad_State_Class.gets(dictMonadState)(function (v1) {
                          return v1.toggle;
                      }))(function (toggle) {
                          var toggle$prime = !toggle;
                          return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Functor["void"]((dictBind.Apply0()).Functor0())(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M(D3Tagless_Utility.removeExistingSVG(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container")))))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Functor["void"]((dictBind.Apply0()).Functor0())(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M((function () {
                                  if (toggle$prime) {
                                      return D3_Examples_ThreeLittleCircles.drawThreeCircles(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container");
                                  };
                                  return D3_Examples_ThreeLittleCircles.drawWithData(D3Tagless_Instance_Selection.d3TaglessD3M)([ 310, 474, 613, 726, 814, 877, 914, 926, 914, 877, 814, 726, 613, 474, 310 ])("div.svg-container");
                              })()))))(function () {
                                  return Control_Monad_State_Class.modify_(dictMonadState)(function (s) {
                                      var $15 = {};
                                      for (var $16 in s) {
                                          if ({}.hasOwnProperty.call(s, $16)) {
                                              $15[$16] = s[$16];
                                          };
                                      };
                                      $15.toggle = toggle$prime;
                                      return $15;
                                  });
                              });
                          });
                      });
                  };
                  if (v instanceof Finalize) {
                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                  };
                  throw new Error("Failed pattern match at Stories.ThreeLittleCircles (line 90, column 16 - line 112, column 24): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var _code = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))()()(Type_Proxy["Proxy"].value);
  var component = function (dictMonadAff) {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-container") ])([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-code") ])([ D3Tagless_Block_FormField.field_({
              label: Halogen_HTML_Core.text("(hide this panel if screen too small)"),
              helpText: [  ],
              error: [  ],
              inputId: "show-code"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-code"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(state.code)), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _code(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(state.code)((function () {
              if (state.toggle) {
                  return Snippets.renderNotebook_(Data_Lens_Getter.view(_simple(Data_Lens_Internal_Forget.strongForget))(state));
              };
              return Snippets.renderNotebook_(Data_Lens_Getter.view(_parabola(Data_Lens_Internal_Forget.strongForget))(state));
          })()) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("svg-container") ])([  ]) ]);
      };
      var initialState = {
          toggle: true,
          code: D3Tagless_Block_Expandable.Expanded.value,
          notebooks: {
              simple: simple,
              parabola: parabola
          }
      };
      return Halogen_Component.mkComponent({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Halogen_Query_HalogenM.monadStateHalogenM),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Initialize.value),
              finalize: new Data_Maybe.Just(Finalize.value)
          })
      });
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Ocelot.Block.Radio"] = $PS["Ocelot.Block.Radio"] || {};
  var exports = $PS["Ocelot.Block.Radio"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Web_HTML_Common = $PS["Web.HTML.Common"];                
  var radioClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "inline-flex", "justify-center", "items-center", "content-box", "border-2", "border-solid", "h-4", "w-4", "p-1", "flex-none", "no-content", "rounded-full", "mr-3", "before:transition-1/4-bounce", "before:h-full", "before:w-full", "before:bg-blue-88", "before:no-content", "before:rounded-full", "before:shadow" ]);
  var labelClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "flex", "flex-row", "inline-block", "py-2", "cursor-pointer", "text-black-20", "items-center", "text-left" ]);
  var inputClasses = Data_Functor.map(Data_Functor.functorArray)(Web_HTML_Common.ClassName)([ "!disabled:sibling:bg-white", "disabled:sibling:bg-grey-95", "checked:sibling:before:opacity-100", "checked:sibling:before:scale-1", "checked:!disabled:sibling:border-blue-88", "focus:sibling:border-blue-88", "!checked:sibling:before:opacity-0", "!checked:sibling:before:scale-0", "!focus:hover:!checked:!disabled:sibling:border-grey-70", "focus:sibling:shadow", "checked:!disabled:sibling:before:bg-blue-88", "checked:disabled:sibling:before:bg-grey-80", "checked:disabled:sibling:border-grey-80", "offscreen" ]);
  var radio = function (iprops) {
      return function (inprops) {
          return function (html) {
              return Halogen_HTML_Elements.label(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(labelClasses) ])(iprops))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.input(Ocelot_HTML_Properties.appendIProps([ Halogen_HTML_Properties.classes(inputClasses), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputRadio.value) ])(inprops)), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes(radioClasses) ])([  ]) ])(html));
          };
      };
  };
  exports["radio"] = radio;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Stories.Trees"] = $PS["Stories.Trees"] || {};
  var exports = $PS["Stories.Trees"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var D3_Data_Tree = $PS["D3.Data.Tree"];
  var D3_Examples_Tree_Configure = $PS["D3.Examples.Tree.Configure"];
  var D3_Layouts_Hierarchical = $PS["D3.Layouts.Hierarchical"];
  var D3Tagless_Block_Expandable = $PS["D3Tagless.Block.Expandable"];
  var D3Tagless_Block_Toggle = $PS["D3Tagless.Block.Toggle"];
  var D3Tagless_Instance_Selection = $PS["D3Tagless.Instance.Selection"];
  var D3Tagless_Utility = $PS["D3Tagless.Utility"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Ocelot_Block_FormField = $PS["Ocelot.Block.FormField"];
  var Ocelot_Block_Radio = $PS["Ocelot.Block.Radio"];
  var Ocelot_HTML_Properties = $PS["Ocelot.HTML.Properties"];
  var Snippets = $PS["Snippets"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var SetLayout = (function () {
      function SetLayout(value0) {
          this.value0 = value0;
      };
      SetLayout.create = function (value0) {
          return new SetLayout(value0);
      };
      return SetLayout;
  })();
  var SetType = (function () {
      function SetType(value0) {
          this.value0 = value0;
      };
      SetType.create = function (value0) {
          return new SetType(value0);
      };
      return SetType;
  })();
  var ToggleCard = (function () {
      function ToggleCard(value0) {
          this.value0 = value0;
      };
      ToggleCard.create = function (value0) {
          return new ToggleCard(value0);
      };
      return ToggleCard;
  })();
  var blurbtext = Stories_Utilities.blurbParagraphs(Data_Functor.functorArray)([ "An abstract data type like a tree can be rendered in a number of different\x0a    ways including at least the 6 variations shown here, arising from a\x0a    combination of three layout orientations (Horizontal, Vertical and Radial)\x0a    and to layout types (TidyTree or Dendrogram)", "Each format has it's uses, TidyTree forms are generally more compact and\x0a  will often be preferred.", "In addition to the six options shown here (which have fundamentally the\x0a  same structure in the DOM) there are radically different representations such\x0a  as Sunflowers and TreeMaps which can be used to show the same hierarchical\x0a  data in ways that serve different purposes or make different aspects of the\x0a  data salient.", "The code shown in this example makes use of higher order functions to\x0a  parameterize the drawing, thus enabling one function to encode all six\x0a  forms." ]);
  var _snippets = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "snippets";
  }))()()(Type_Proxy["Proxy"].value);
  var _panels = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
      return "panels";
  }))()()(Type_Proxy["Proxy"].value);
  var _drawCode = function (dictStrong) {
      var $44 = _snippets(dictStrong);
      var $45 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "draw";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($46) {
          return $44($45($46));
      };
  };
  var handleAction = function (dictBind) {
      return function (dictMonadAff) {
          return function (dictMonadState) {
              return function (v) {
                  if (v instanceof ToggleCard) {
                      return Data_Lens_Setter.modifying(dictMonadState)(v.value0(Data_Profunctor_Strong.strongFn))(Data_HeytingAlgebra.not(D3Tagless_Block_Expandable.heytingAlgebraStatus));
                  };
                  if (v instanceof Initialize) {
                      return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M(D3Tagless_Utility.removeExistingSVG(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container"))))(function (detached) {
                          return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Snippets.readSnippetFiles("TreeDraw")))(function (text1) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Data_Lens_Setter.assign(dictMonadState)(_drawCode(Data_Profunctor_Strong.strongFn))(text1))(function () {
                                  return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(D3_Layouts_Hierarchical.getTreeViaAJAX("./data/flare-2.json")))(function (treeJSON) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)((function () {
                                          if (treeJSON instanceof Data_Either.Left) {
                                              return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                          };
                                          if (treeJSON instanceof Data_Either.Right) {
                                              return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(D3_Layouts_Hierarchical.makeModel(Effect_Aff.bindAff)(Effect_Aff.monadEffectAff)(D3_Data_Tree.TidyTree.value)(D3_Data_Tree.Vertical.value)(treeJSON.value0)))(function (model) {
                                                  return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(D3_Examples_Tree_Configure.drawTree(model)("div.svg-container")))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Control_Monad_State_Class.modify_(dictMonadState)(function (st) {
                                                          var $24 = {};
                                                          for (var $25 in st) {
                                                              if ({}.hasOwnProperty.call(st, $25)) {
                                                                  $24[$25] = st[$25];
                                                              };
                                                          };
                                                          $24.tree = new Data_Maybe.Just(model);
                                                          return $24;
                                                      }))(function () {
                                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                                      });
                                                  });
                                              });
                                          };
                                          throw new Error("Failed pattern match at Stories.Trees (line 180, column 5 - line 186, column 18): " + [ treeJSON.constructor.name ]);
                                      })())(function () {
                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                      });
                                  });
                              });
                          });
                      });
                  };
                  if (v instanceof SetLayout) {
                      return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M(D3Tagless_Utility.removeExistingSVG(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container"))))(function (detached) {
                          return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (v1) {
                              if (v1.tree instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                              };
                              if (v1.tree instanceof Data_Maybe.Just) {
                                  var updated = {
                                      treeLayout: v.value0,
                                      json: v1.tree.value0.json,
                                      svgConfig: v1.tree.value0.svgConfig,
                                      treeLayoutFn: v1.tree.value0.treeLayoutFn,
                                      treeType: v1.tree.value0.treeType
                                  };
                                  return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(D3_Examples_Tree_Configure.drawTree(updated)("div.svg-container")))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Control_Monad_State_Class.modify_(dictMonadState)(function (st) {
                                          var $30 = {};
                                          for (var $31 in st) {
                                              if ({}.hasOwnProperty.call(st, $31)) {
                                                  $30[$31] = st[$31];
                                              };
                                          };
                                          $30.tree = new Data_Maybe.Just(updated);
                                          return $30;
                                      }))(function () {
                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                      });
                                  });
                              };
                              throw new Error("Failed pattern match at Stories.Trees (line 193, column 5 - line 199, column 18): " + [ v1.tree.constructor.name ]);
                          });
                      });
                  };
                  if (v instanceof SetType) {
                      return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(D3Tagless_Instance_Selection.eval_D3M(D3Tagless_Utility.removeExistingSVG(D3Tagless_Instance_Selection.d3TaglessD3M)("div.svg-container"))))(function (detached) {
                          return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (v1) {
                              if (v1.tree instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                              };
                              if (v1.tree instanceof Data_Maybe.Just) {
                                  var updated = {
                                      treeType: v.value0,
                                      json: v1.tree.value0.json,
                                      svgConfig: v1.tree.value0.svgConfig,
                                      treeLayout: v1.tree.value0.treeLayout,
                                      treeLayoutFn: v1.tree.value0.treeLayoutFn
                                  };
                                  return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(D3_Examples_Tree_Configure.drawTree(updated)("div.svg-container")))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Control_Monad_State_Class.modify_(dictMonadState)(function (st) {
                                          var $38 = {};
                                          for (var $39 in st) {
                                              if ({}.hasOwnProperty.call(st, $39)) {
                                                  $38[$39] = st[$39];
                                              };
                                          };
                                          $38.tree = new Data_Maybe.Just(updated);
                                          return $38;
                                      }))(function () {
                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                                      });
                                  });
                              };
                              throw new Error("Failed pattern match at Stories.Trees (line 205, column 5 - line 211, column 18): " + [ v1.tree.constructor.name ]);
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Stories.Trees (line 169, column 16 - line 211, column 18): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var _code = function (dictStrong) {
      var $47 = _panels(dictStrong);
      var $48 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "code";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($49) {
          return $47($48($49));
      };
  };
  var _blurb = function (dictStrong) {
      var $50 = _panels(dictStrong);
      var $51 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
          return "blurb";
      }))()()(Type_Proxy["Proxy"].value)(dictStrong);
      return function ($52) {
          return $50($51($52));
      };
  };
  var component = function (dictMonadAff) {
      var initialState = {
          tree: Data_Maybe.Nothing.value,
          panels: {
              blurb: D3Tagless_Block_Expandable.Collapsed.value,
              code: D3Tagless_Block_Expandable.Collapsed.value
          },
          snippets: {
              draw: ""
          }
      };
      var controlsRadio = Halogen_HTML_Elements.div([ Ocelot_HTML_Properties.css("flex-1") ])([ Ocelot_Block_FormField.fieldset_({
          label: Halogen_HTML_Core.text("Tree orientation"),
          inputId: "radio-vertical",
          helpText: [  ],
          error: [  ]
      })([ Halogen_HTML_Elements.div([ Ocelot_HTML_Properties.css("flex-1") ])([ Ocelot_Block_Radio.radio([ Ocelot_HTML_Properties.css("pr-6") ])([ Halogen_HTML_Properties.name("tree-layout"), Halogen_HTML_Properties.checked(true), Halogen_HTML_Events.onClick(Data_Function["const"](new SetLayout(D3_Data_Tree.Vertical.value))) ])([ Halogen_HTML_Core.text("Vertical") ]), Ocelot_Block_Radio.radio([ Ocelot_HTML_Properties.css("pr-6") ])([ Halogen_HTML_Properties.name("tree-layout"), Halogen_HTML_Events.onClick(Data_Function["const"](new SetLayout(D3_Data_Tree.Horizontal.value))) ])([ Halogen_HTML_Core.text("Horizontal") ]), Ocelot_Block_Radio.radio([ Ocelot_HTML_Properties.css("pr-6") ])([ Halogen_HTML_Properties.name("tree-layout"), Halogen_HTML_Events.onClick(Data_Function["const"](new SetLayout(D3_Data_Tree.Radial.value))) ])([ Halogen_HTML_Core.text("Radial") ]) ]) ]), Ocelot_Block_FormField.fieldset_({
          label: Halogen_HTML_Core.text("Tree topology"),
          inputId: "radio-vertical",
          helpText: [  ],
          error: [  ]
      })([ Halogen_HTML_Elements.div([ Ocelot_HTML_Properties.css("flex-1") ])([ Ocelot_Block_Radio.radio([ Ocelot_HTML_Properties.css("pr-6") ])([ Halogen_HTML_Properties.name("tree-type"), Halogen_HTML_Properties.checked(true), Halogen_HTML_Events.onClick(Data_Function["const"](new SetType(D3_Data_Tree.TidyTree.value))) ])([ Halogen_HTML_Core.text("TidyTree") ]), Ocelot_Block_Radio.radio([ Ocelot_HTML_Properties.css("pr-6") ])([ Halogen_HTML_Properties.name("tree-type"), Halogen_HTML_Events.onClick(Data_Function["const"](new SetType(D3_Data_Tree.Dendrogram.value))) ])([ Halogen_HTML_Core.text("Dendrogram") ]) ]) ]) ]);
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-container") ])([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-controls") ])([ controlsRadio ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-about") ])([ Ocelot_Block_FormField.field_({
              label: Halogen_HTML_Core.text("About"),
              helpText: [  ],
              error: [  ],
              inputId: "show-blurb"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-blurb"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_blurb(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _blurb(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_blurb(Data_Lens_Internal_Forget.strongForget))(state))(blurbtext) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("story-panel-code") ])([ Ocelot_Block_FormField.field_({
              label: Halogen_HTML_Core.text("(hide this panel if screen too small)"),
              helpText: [  ],
              error: [  ],
              inputId: "show-code"
          })([ D3Tagless_Block_Toggle.toggle([ Halogen_HTML_Properties.id("show-code"), Halogen_HTML_Properties.checked(D3Tagless_Block_Expandable.toBoolean(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))), Halogen_HTML_Events.onChange(function (v) {
              return new ToggleCard(function (dictStrong) {
                  return _code(dictStrong);
              });
          }) ]) ]), D3Tagless_Block_Expandable.content_(Data_Lens_Getter.view(_code(Data_Lens_Internal_Forget.strongForget))(state))(Stories_Utilities.syntaxHighlightedCode(Data_Lens_Getter.view(_drawCode(Data_Lens_Internal_Forget.strongForget))(state))) ]), Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("svg-container") ])([  ]) ]);
      };
      return Halogen_Component.mkComponent({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(Halogen_Query_HalogenM.monadStateHalogenM),
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Initialize.value),
              finalize: Halogen_Component.defaultEval.finalize
          })
      });
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Halogen_Aff_Util = $PS["Halogen.Aff.Util"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML = $PS["Halogen.HTML"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_VDom_Driver = $PS["Halogen.VDom.Driver"];
  var Ocelot_Block_Format = $PS["Ocelot.Block.Format"];
  var Stories_GUP = $PS["Stories.GUP"];
  var Stories_LesMis = $PS["Stories.LesMis"];
  var Stories_MetaTree = $PS["Stories.MetaTree"];
  var Stories_PrintTree = $PS["Stories.PrintTree"];
  var Stories_Spago = $PS["Stories.Spago"];
  var Stories_ThreeLittleCircles = $PS["Stories.ThreeLittleCircles"];
  var Stories_Trees = $PS["Stories.Trees"];
  var Stories_Utilities = $PS["Stories.Utilities"];
  var Type_Proxy = $PS["Type.Proxy"];
  var UIGuide_Block_Backdrop = $PS["UIGuide.Block.Backdrop"];                
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var ExampleCircles = (function () {
      function ExampleCircles() {

      };
      ExampleCircles.value = new ExampleCircles();
      return ExampleCircles;
  })();
  var ExampleGUP = (function () {
      function ExampleGUP() {

      };
      ExampleGUP.value = new ExampleGUP();
      return ExampleGUP;
  })();
  var ExampleTrees = (function () {
      function ExampleTrees() {

      };
      ExampleTrees.value = new ExampleTrees();
      return ExampleTrees;
  })();
  var ExampleLesMis = (function () {
      function ExampleLesMis() {

      };
      ExampleLesMis.value = new ExampleLesMis();
      return ExampleLesMis;
  })();
  var ExampleMetaTree = (function () {
      function ExampleMetaTree() {

      };
      ExampleMetaTree.value = new ExampleMetaTree();
      return ExampleMetaTree;
  })();
  var ExamplePrinter = (function () {
      function ExamplePrinter() {

      };
      ExamplePrinter.value = new ExamplePrinter();
      return ExamplePrinter;
  })();
  var ExampleSpago = (function () {
      function ExampleSpago() {

      };
      ExampleSpago.value = new ExampleSpago();
      return ExampleSpago;
  })();
  var Initialize = (function () {
      function Initialize() {

      };
      Initialize.value = new Initialize();
      return Initialize;
  })();
  var Example = (function () {
      function Example(value0) {
          this.value0 = value0;
      };
      Example.create = function (value0) {
          return new Example(value0);
      };
      return Example;
  })();
  var eqExampleType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return true;
          };
          if (x instanceof ExampleCircles && y instanceof ExampleCircles) {
              return true;
          };
          if (x instanceof ExampleGUP && y instanceof ExampleGUP) {
              return true;
          };
          if (x instanceof ExampleTrees && y instanceof ExampleTrees) {
              return true;
          };
          if (x instanceof ExampleLesMis && y instanceof ExampleLesMis) {
              return true;
          };
          if (x instanceof ExampleMetaTree && y instanceof ExampleMetaTree) {
              return true;
          };
          if (x instanceof ExamplePrinter && y instanceof ExamplePrinter) {
              return true;
          };
          if (x instanceof ExampleSpago && y instanceof ExampleSpago) {
              return true;
          };
          return false;
      };
  });
  var showExampleType = new Data_Show.Show(function (v) {
      if (v instanceof None) {
          return "No example selected";
      };
      if (v instanceof ExampleCircles) {
          return "Three Little Circles";
      };
      if (v instanceof ExampleGUP) {
          return "General Update Pattern";
      };
      if (v instanceof ExampleTrees) {
          return "Trees";
      };
      if (v instanceof ExampleLesMis) {
          return "LesMis";
      };
      if (v instanceof ExampleMetaTree) {
          return "MetaTree";
      };
      if (v instanceof ExamplePrinter) {
          return "Printer";
      };
      if (v instanceof ExampleSpago) {
          return "Spago";
      };
      throw new Error("Failed pattern match at Main (line 65, column 10 - line 73, column 31): " + [ v.constructor.name ]);
  });
  var _trees = Type_Proxy["Proxy"].value;
  var _spago = Type_Proxy["Proxy"].value;
  var _printtree = Type_Proxy["Proxy"].value;
  var _metatree = Type_Proxy["Proxy"].value;
  var _lesmis = Type_Proxy["Proxy"].value;
  var _index = Type_Proxy["Proxy"].value;
  var _gup = Type_Proxy["Proxy"].value;
  var _circles = Type_Proxy["Proxy"].value;
  var parent = function (dictMonadAff) {
      var renderExampleNav = function (current) {
          return function (example) {
              return Halogen_HTML_Elements.li([ Halogen_HTML_Properties.class_("mb-3") ])([ Halogen_HTML_Elements.a([ Halogen_HTML_Properties.classes(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Ocelot_Block_Format.linkClasses)((function () {
                  var $14 = Data_Eq.eq(eqExampleType)(current)(example);
                  if ($14) {
                      return [ "font-medium" ];
                  };
                  return [  ];
              })())), Halogen_HTML_Events.onClick(Data_Function["const"](new Example(example))) ])([ Halogen_HTML_Core.text(Data_Show.show(showExampleType)(example)) ]) ]);
          };
      };
      var renderNavGroup = function (currentExample) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("text-base overflow-y-auto") ])([ Ocelot_Block_Format.caption_([ Halogen_HTML_Core.text("Simple examples") ]), Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.class_("list-reset") ])(Data_Functor.map(Data_Functor.functorArray)(renderExampleNav(currentExample))([ ExampleCircles.value, ExampleGUP.value, ExampleTrees.value, ExampleLesMis.value ])), Ocelot_Block_Format.caption_([ Halogen_HTML_Core.text("Alternate interpreters") ]), Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.class_("list-reset") ])(Data_Functor.map(Data_Functor.functorArray)(renderExampleNav(currentExample))([ ExampleMetaTree.value, ExamplePrinter.value ])), Ocelot_Block_Format.caption_([ Halogen_HTML_Core.text("Halogen Application") ]), Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.class_("list-reset") ])(Data_Functor.map(Data_Functor.functorArray)(renderExampleNav(currentExample))([ ExampleSpago.value ])) ]);
      };
      var renderSidebar = function (currentExample) {
          return UIGuide_Block_Backdrop.backdrop([ Stories_Utilities.tailwindClass("story-sidebar") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("flex-1 p-2 overflow-y-auto") ])([ Halogen_HTML_Elements.img([ Halogen_HTML_Properties.class_("w-24 mb-8 p-2 bg-white"), Halogen_HTML_Properties.src("PSD3-logo.png") ]), Halogen_HTML_Elements.nav([ Halogen_HTML_Properties.class_("text-base overflow-y-auto") ])([ renderNavGroup(currentExample) ]) ]) ]);
      };
      var renderExample = function (v) {
          if (v instanceof None) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "index";
              }))(Data_Ord.ordUnit)(_index)(Data_Unit.unit)(Stories_Spago.component(dictMonadAff))(Data_Unit.unit);
          };
          if (v instanceof ExampleCircles) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "circles";
              }))(Data_Ord.ordUnit)(_circles)(Data_Unit.unit)(Stories_ThreeLittleCircles.component(dictMonadAff))(Data_Unit.unit);
          };
          if (v instanceof ExampleGUP) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "gup";
              }))(Data_Ord.ordUnit)(_gup)(Data_Unit.unit)(Stories_GUP.component(dictMonadAff))(Stories_GUP.Paused.value);
          };
          if (v instanceof ExampleTrees) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "trees";
              }))(Data_Ord.ordUnit)(_trees)(Data_Unit.unit)(Stories_Trees.component(dictMonadAff))(Data_Unit.unit);
          };
          if (v instanceof ExampleMetaTree) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "metatree";
              }))(Data_Ord.ordUnit)(_metatree)(Data_Unit.unit)(Stories_MetaTree.component(dictMonadAff))(Data_Unit.unit);
          };
          if (v instanceof ExamplePrinter) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "printtree";
              }))(Data_Ord.ordUnit)(_printtree)(Data_Unit.unit)(Stories_PrintTree.component(dictMonadAff))(Data_Unit.unit);
          };
          if (v instanceof ExampleLesMis) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "lesmis";
              }))(Data_Ord.ordUnit)(_lesmis)(Data_Unit.unit)(Stories_LesMis.component(dictMonadAff))(Data_Unit.unit);
          };
          if (v instanceof ExampleSpago) {
              return Halogen_HTML.slot_()(new Data_Symbol.IsSymbol(function () {
                  return "spago";
              }))(Data_Ord.ordUnit)(_spago)(Data_Unit.unit)(Stories_Spago.component(dictMonadAff))(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at Main (line 149, column 5 - line 159, column 71): " + [ v.constructor.name ]);
      };
      var render = function (currentExample) {
          return Halogen_HTML_Elements.body_([ Halogen_HTML_Elements.div([ Stories_Utilities.tailwindClass("app-container") ])([ renderSidebar(currentExample), renderExample(currentExample) ]) ]);
      };
      var initialState = function (v) {
          return ExampleSpago.value;
      };
      var handleAction = function (v) {
          if (v instanceof Initialize) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                  return None.value;
              });
          };
          if (v instanceof Example) {
              return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                  return v.value0;
              });
          };
          throw new Error("Failed pattern match at Main (line 164, column 18 - line 166, column 39): " + [ v.constructor.name ]);
      };
      return Halogen_Component.mkComponent({
          initialState: initialState,
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction,
              handleQuery: Halogen_Component.defaultEval.handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Initialize.value),
              finalize: Halogen_Component.defaultEval.finalize
          })
      });
  };
  var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (body) {
      return Halogen_VDom_Driver.runUI(parent(Effect_Aff_Class.monadAffAff))(Data_Unit.unit)(body);
  }));
  exports["main"] = main;
  exports["_index"] = _index;
  exports["_circles"] = _circles;
  exports["_gup"] = _gup;
  exports["_trees"] = _trees;
  exports["_metatree"] = _metatree;
  exports["_printtree"] = _printtree;
  exports["_lesmis"] = _lesmis;
  exports["_spago"] = _spago;
  exports["None"] = None;
  exports["ExampleCircles"] = ExampleCircles;
  exports["ExampleGUP"] = ExampleGUP;
  exports["ExampleTrees"] = ExampleTrees;
  exports["ExampleLesMis"] = ExampleLesMis;
  exports["ExampleMetaTree"] = ExampleMetaTree;
  exports["ExamplePrinter"] = ExamplePrinter;
  exports["ExampleSpago"] = ExampleSpago;
  exports["Initialize"] = Initialize;
  exports["Example"] = Example;
  exports["parent"] = parent;
  exports["eqExampleType"] = eqExampleType;
  exports["showExampleType"] = showExampleType;
})(PS);
PS["Main"].main();