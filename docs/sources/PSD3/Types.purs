-- | PSD3.Types - Common type definitions
-- |
-- | This module re-exports type definitions used throughout PSD3. These types
-- | represent DOM elements, selections, simulation state, mouse events, and more.
-- |
-- | Most users won't need to import this module directly since the main `PSD3`
-- | module already re-exports the most commonly used types. Import this module
-- | when you need access to all PSD3 types for type signatures or documentation.
-- |
-- | ## Core Types
-- |
-- | ### Opaque Types
-- |
-- | These types are opaque (implementation hidden) to maintain type safety:
-- |
-- | **D3Selection_**
-- | - Represents a D3 selection (group of DOM elements)
-- | - Created by operations like `attach`, `appendTo`, `selectUnder`
-- | - Used throughout the Selection API
-- |
-- | **D3Simulation_**
-- | - Handle to a D3 force simulation engine
-- | - Managed internally by SimulationM2 operations
-- | - Advanced users can access via `simulationHandle`
-- |
-- | **D3SimulationState_**
-- | - Complete state of a force simulation (handle, forces, tick functions, data, config)
-- | - Stored in your component's State as `{ simulation :: D3SimulationState_ }`
-- | - Managed by the `D3SimM` monad
-- |
-- | **Datum_**
-- | - Opaque type representing data bound to DOM elements
-- | - D3's internal representation of your data
-- | - Create coercion functions in an `Unsafe.purs` module (see wizard-generated examples)
-- |
-- | **Index_**
-- | - Element index in D3's internal representation
-- | - Convert with `index_ToInt` and `intToIndex_`
-- | - Used in indexed attribute functions
-- |
-- | ### Element Types
-- |
-- | **Element** - SVG and HTML element types:
-- | ```purescript
-- | data Element = Div | Svg | Circle | Line | Group | Text | Path | Rect
-- | ```
-- |
-- | Used when creating elements with `appendTo`:
-- | ```purescript
-- | svg <- appendTo root Svg [width 800.0, height 600.0]
-- | circles <- appendTo svg Circle [radius 5.0, fill "red"]
-- | ```
-- |
-- | ### Selection Types
-- |
-- | **Selector**
-- | - CSS selector string (e.g., "#chart", ".data-point", "circle")
-- | - Used with `attach` and `selectUnder`
-- |
-- | **SelectionAttribute**
-- | - Attribute that can be applied to a selection
-- | - Created by functions from `PSD3.Attributes`
-- | - Examples: `fill "red"`, `cx 100.0`, `text "Hello"`
-- |
-- | ### Mouse Events
-- |
-- | **MouseEvent** - Mouse event types:
-- | ```purescript
-- | data MouseEvent = MouseEnter | MouseLeave | MouseClick
-- |                 | MouseDown | MouseUp
-- | ```
-- |
-- | Used with event handlers:
-- | ```purescript
-- | onMouseEvent MouseClick (\d i el -> trace ("Clicked: " <> show d))
-- | onMouseEventEffectful MouseEnter (\d i el -> do
-- |   log "Mouse entered element"
-- | )
-- | ```
-- |
-- | ### Interactive Behaviors
-- |
-- | **Behavior** - Interactive behaviors to attach to selections:
-- | ```purescript
-- | data Behavior selection
-- |   = Drag DragBehavior
-- |   | Zoom ZoomConfig
-- | ```
-- |
-- | **DragBehavior** - Drag interaction modes:
-- | - `DefaultDrag` - Standard drag behavior
-- | - `SimulationDrag` - Drag that works with force simulations
-- | - `CustomDrag` - Custom drag behavior
-- |
-- | Example:
-- | ```purescript
-- | on circles (Drag DefaultDrag)
-- | on svg (Zoom { extent: ..., scaleExtent: ..., name: "main", target: svg })
-- | ```
-- |
-- | ### Simulation Types
-- |
-- | **SimVariable** - Simulation configuration variables:
-- | ```purescript
-- | data SimVariable
-- |   = Alpha Number         -- Current animation energy (1.0 = full, 0.0 = stopped)
-- |   | AlphaTarget Number   -- Minimum alpha to maintain
-- |   | AlphaMin Number      -- Alpha threshold for stopping
-- |   | AlphaDecay Number    -- How quickly simulation cools
-- |   | VelocityDecay Number -- Friction applied to movement
-- | ```
-- |
-- | Used to control simulation behavior:
-- | ```purescript
-- | setConfigVariable $ Alpha 1.0         -- Reheat simulation
-- | setConfigVariable $ AlphaTarget 0.3   -- Keep simulation "warm"
-- | ```
-- |
-- | **Step** - Tick function definition:
-- | ```purescript
-- | data Step selection
-- |   = Step selection (Array SelectionAttribute)
-- |   | StepTransformFFI selection (Datum_ -> String)
-- | ```
-- |
-- | Defines what happens on each simulation tick:
-- | ```purescript
-- | addTickFunction "nodes" $ Step circles [cx nodeX, cy nodeY]
-- | addTickFunction "links" $ Step lines [x1 linkSourceX, y1 linkSourceY, ...]
-- | ```
-- |
-- | ### Sankey Types
-- |
-- | **SankeyConfig** - Sankey layout configuration:
-- | ```purescript
-- | type SankeyConfig = {
-- |   alignment :: String,      -- "justify", "left", "right", "center"
-- |   linkColorMode :: String,  -- "source", "target", "source-target", "static"
-- |   nodeWidth :: Number,      -- Width of node rectangles
-- |   nodePadding :: Number     -- Vertical spacing between nodes
-- | }
-- | ```
-- |
-- | **SankeyLayoutState_**
-- | - Opaque type representing Sankey layout state
-- | - Stored in State: `{ sankeyLayout :: SankeyLayoutState_ }`
-- |
-- | **SankeyNode_**, **SankeyLink_**
-- | - Opaque types for Sankey-processed nodes and links
-- | - Returned by `setSankeyData` and `setSankeyDataWithConfig`
-- | - Have computed properties: positions, dimensions, colors
-- |
-- | ### Zoom Types
-- |
-- | **ZoomConfig** - Zoom interaction configuration:
-- | ```purescript
-- | type ZoomConfig = {
-- |   extent :: ZoomExtent,        -- Area that can be zoomed
-- |   scaleExtent :: ScaleExtent,  -- Min/max zoom levels
-- |   name :: String,              -- Identifier for this zoom behavior
-- |   target :: D3Selection_       -- Selection to apply zoom transform to
-- | }
-- | ```
-- |
-- | **ZoomExtent** - Defines zoomable area:
-- | - `DefaultExtent` - Entire SVG is zoomable
-- | - `CustomExtent [[minX, minY], [maxX, maxY]]` - Custom zoomable region
-- |
-- | **ScaleExtent** - Zoom scale limits:
-- | - `DefaultScaleExtent` - Default zoom range
-- | - `CustomScaleExtent [minScale, maxScale]` - Custom limits (e.g., [0.5, 10.0])
-- |
-- | ### Other Types
-- |
-- | **PointXY** - 2D point:
-- | ```purescript
-- | type PointXY = { x :: Number, y :: Number }
-- | ```
-- |
-- | **Transition** - Transition configuration:
-- | ```purescript
-- | type Transition = {
-- |   name :: String,
-- |   delay :: Milliseconds,
-- |   duration :: Milliseconds,
-- |   easing :: EasingFunction
-- | }
-- | ```
-- |
-- | **EasingFunction** - Easing curve for animations:
-- | - `DefaultCubic` - Standard cubic easing
-- | - `EasingFunction (Number -> Number)` - Custom easing function
-- | - `EasingFactory` - Context-aware easing function factory
-- |
-- | **UnitType** - CSS unit types (currently not widely used):
-- | ```purescript
-- | data UnitType = Px | Pt | Em | Rem | Percent
-- | ```
-- |
-- | ## Usage Examples
-- |
-- | **Type signatures with common types**:
-- | ```purescript
-- | import PSD3
-- | import PSD3.Types
-- |
-- | myChart :: forall m.
-- |   SelectionM D3Selection_ m =>
-- |   Array DataPoint ->
-- |   Selector D3Selection_ ->
-- |   m Unit
-- | myChart data selector = do
-- |   root <- attach selector
-- |   svg <- appendTo root Svg [width 800.0, height 600.0]
-- |   -- ... rest of visualization
-- | ```
-- |
-- | **Simulation with full type signature**:
-- | ```purescript
-- | forceGraph :: forall m.
-- |   SimulationM2 D3Selection_ m =>
-- |   MonadState { simulation :: D3SimulationState_ } m =>
-- |   GraphData ->
-- |   m Unit
-- | forceGraph graph = do
-- |   -- ... simulation setup
-- | ```
-- |
-- | ## See Also
-- |
-- | - `PSD3` - Main module with re-exported common types
-- | - `PSD3.Capabilities.Selection` - For working with D3Selection_
-- | - `PSD3.Capabilities.Simulation` - For working with simulations
-- | - `PSD3.Capabilities.Sankey` - For Sankey diagrams
module PSD3.Types (module X) where

import PSD3.Internal.Types (D3Selection_, D3Simulation_, Datum_, Element(..), Index_, MouseEvent(..), PointXY, Selector, Transition, UnitType(..), EasingFunction(..)) as X
import PSD3.Internal.Selection.Types (Behavior(..), DragBehavior(..), SelectionAttribute) as X
import PSD3.Internal.Simulation.Types (D3SimulationState_, SimVariable(..), Step(..)) as X
import PSD3.Internal.Sankey.Types (SankeyConfig, SankeyLayoutState_, SankeyLink_, SankeyNode_) as X
import PSD3.Internal.Zoom (ScaleExtent(..), ZoomConfig, ZoomExtent(..)) as X
