// Generated by purs bundle 0.14.0
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();                                                                                                 
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["runStateT"] = runStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["D3.Attributes.Instances"] = $PS["D3.Attributes.Instances"] || {};
  var exports = $PS["D3.Attributes.Instances"];
  var Static = (function () {
      function Static(value0) {
          this.value0 = value0;
      };
      Static.create = function (value0) {
          return new Static(value0);
      };
      return Static;
  })();
  var Fn = (function () {
      function Fn(value0) {
          this.value0 = value0;
      };
      Fn.create = function (value0) {
          return new Fn(value0);
      };
      return Fn;
  })();
  var FnI = (function () {
      function FnI(value0) {
          this.value0 = value0;
      };
      FnI.create = function (value0) {
          return new FnI(value0);
      };
      return FnI;
  })();
  var StringAttr = (function () {
      function StringAttr(value0) {
          this.value0 = value0;
      };
      StringAttr.create = function (value0) {
          return new StringAttr(value0);
      };
      return StringAttr;
  })();
  var NumberAttr = (function () {
      function NumberAttr(value0) {
          this.value0 = value0;
      };
      NumberAttr.create = function (value0) {
          return new NumberAttr(value0);
      };
      return NumberAttr;
  })();
  var ArrayAttr = (function () {
      function ArrayAttr(value0) {
          this.value0 = value0;
      };
      ArrayAttr.create = function (value0) {
          return new ArrayAttr(value0);
      };
      return ArrayAttr;
  })();
  var Attribute = (function () {
      function Attribute(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attribute.create = function (value0) {
          return function (value1) {
              return new Attribute(value0, value1);
          };
      };
      return Attribute;
  })();
  var ToAttr = function (toAttr) {
      this.toAttr = toAttr;
  };
  var unbox = function (v) {
      if (v instanceof StringAttr && v.value0 instanceof Static) {
          return v.value0.value0;
      };
      if (v instanceof StringAttr && v.value0 instanceof Fn) {
          return v.value0.value0;
      };
      if (v instanceof StringAttr && v.value0 instanceof FnI) {
          return v.value0.value0;
      };
      if (v instanceof NumberAttr && v.value0 instanceof Static) {
          return v.value0.value0;
      };
      if (v instanceof NumberAttr && v.value0 instanceof Fn) {
          return v.value0.value0;
      };
      if (v instanceof NumberAttr && v.value0 instanceof FnI) {
          return v.value0.value0;
      };
      if (v instanceof ArrayAttr && v.value0 instanceof Static) {
          return v.value0.value0;
      };
      if (v instanceof ArrayAttr && v.value0 instanceof Fn) {
          return v.value0.value0;
      };
      if (v instanceof ArrayAttr && v.value0 instanceof FnI) {
          return v.value0.value0;
      };
      throw new Error("Failed pattern match at D3.Attributes.Instances (line 23, column 3 - line 34, column 46): " + [ v.constructor.name ]);
  }; 
  var toAttrStringFn = new ToAttr(function ($21) {
      return StringAttr.create(Fn.create($21));
  });
  var toAttrString = new ToAttr(function ($22) {
      return StringAttr.create(Static.create($22));
  });
  var toAttrNumber = new ToAttr(function ($25) {
      return NumberAttr.create(Static.create($25));
  });
  var toAttr = function (dict) {
      return dict.toAttr;
  };
  exports["toAttr"] = toAttr;
  exports["Attribute"] = Attribute;
  exports["unbox"] = unbox;
  exports["toAttrString"] = toAttrString;
  exports["toAttrStringFn"] = toAttrStringFn;
  exports["toAttrNumber"] = toAttrNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["D3.Attributes.Sugar"] = $PS["D3.Attributes.Sugar"] || {};
  var exports = $PS["D3.Attributes.Sugar"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var strokeOpacity = function (dictToAttr) {
      var $33 = D3_Attributes_Instances.Attribute.create("stroke-opacity");
      var $34 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($35) {
          return $33($34($35));
      };
  };
  var strokeColor = function (dictToAttr) {
      var $36 = D3_Attributes_Instances.Attribute.create("stroke");
      var $37 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($38) {
          return $36($37($38));
      };
  };
  var fill = function (dictToAttr) {
      var $51 = D3_Attributes_Instances.Attribute.create("fill");
      var $52 = D3_Attributes_Instances.toAttr(dictToAttr);
      return function ($53) {
          return $51($52($53));
      };
  };
  exports["strokeColor"] = strokeColor;
  exports["strokeOpacity"] = strokeOpacity;
  exports["fill"] = fill;
})(PS);
(function(exports) {
  exports.nullD3Selection = null

  // d3SelectAll_ :: Selector -> D3Selection
  exports.d3SelectAllInDOM_ = selector => {
    console.log(`\td3SelectAllInDOM: ${selector}`);
    return "rootSelection";
    // return d3.selectAll(selector);
  } 
  // d3SelectAll_ :: Selector -> D3Selection
  exports.d3SelectionSelectAll_ = selector => selection => {
    console.log(`\td3SelectionSelectAll: ${selection}.selectAll(${selector})`);
    return "JoinSelection";
    // return selection.selectAll(selector);
  }
  // d3Exit_ :: D3Selection -> D3Selection
  exports.d3Exit_ = selection => {
    console.log(`\td3Exit: ${selection}.exit()`);
    return "exit selection"
    // return selection.exit();
  }
  // d3AddTransition :: D3Selection -> D3Selection
  exports.d3AddTransition = selection => transition => {
    var handle; 
    if (transition.name == "") {
      console.log(`\td3addTransition: ${selection}.transition(${transition})`);
      handle = selection.transition();
    } else {
      console.log(`\td3addNamedTransition: ${selection}.transition(${transition})`);
      handle = selection.transition();
    }
    if (transition.duration != 0) {
      console.log(`transition.duration(${transition.duration})`);
      handle.duration(transition.duration);
    }
    if (transition.delay != 0) {
      console.log(`transition.delay(${transition.delay})`);
      handle.delay(transition.delay);
    }
    return handle;
  }

  // d3RemoveSelection_ :: D3Selection -> D3Selection
  exports.d3RemoveSelection_ = selection => {
    console.log(`\td3Remove: ${selection}.remove()`);
    return "removedSelection"
    // return selection.remove()
  }
  // d3Append_ :: String -> D3Selection -> D3Selection
  exports.d3Append_ = element => selection => {
    console.log(`\td3Append: ${selection}.append(${element})`);
    return "appendedSelection";
    // return selection.append(selector);
  }
  // d3Data_ :: D3Data -> D3Selection -> D3Selection
  exports.d3Data_ = data => selection => {
    console.log(`\td3Data: ${selection}.data(${data})`);
    return "dataBoundSelection"
  }
  // d3SetAttr_      :: String -> D3Attr -> D3Selection -> Unit 
  exports.d3SetAttr_ = name => value => selection => {
    console.log(`\t${selection}.attr(${name}, ${value})`);
    // selection.attr(name, value);
    return `attrAdded`
  }
})(PS["D3.Selection"] = PS["D3.Selection"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  }; 
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["D3.Selection"] = $PS["D3.Selection"] || {};
  var exports = $PS["D3.Selection"];
  var $foreign = $PS["D3.Selection"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Div = (function () {
      function Div() {

      };
      Div.value = new Div();
      return Div;
  })();
  var Svg = (function () {
      function Svg() {

      };
      Svg.value = new Svg();
      return Svg;
  })();
  var Circle = (function () {
      function Circle() {

      };
      Circle.value = new Circle();
      return Circle;
  })();
  var Line = (function () {
      function Line() {

      };
      Line.value = new Line();
      return Line;
  })();
  var Group = (function () {
      function Group() {

      };
      Group.value = new Group();
      return Group;
  })();
  var Node = (function () {
      function Node(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Node.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Node(value0, value1, value2);
              };
          };
      };
      return Node;
  })();
  var showElement = new Data_Show.Show(function (v) {
      if (v instanceof Div) {
          return "div";
      };
      if (v instanceof Svg) {
          return "svg";
      };
      if (v instanceof Circle) {
          return "circle";
      };
      if (v instanceof Line) {
          return "line";
      };
      if (v instanceof Group) {
          return "group";
      };
      throw new Error("Failed pattern match at D3.Selection (line 14, column 1 - line 19, column 24): " + [ v.constructor.name ]);
  });
  var node__ = function (e) {
      return new Node(e, [  ], [  ]);
  };
  var coerceD3Data = Unsafe_Coerce.unsafeCoerce;
  exports["Svg"] = Svg;
  exports["Circle"] = Circle;
  exports["Group"] = Group;
  exports["coerceD3Data"] = coerceD3Data;
  exports["Node"] = Node;
  exports["node__"] = node__;
  exports["showElement"] = showElement;
  exports["nullD3Selection"] = $foreign.nullD3Selection;
  exports["d3SelectAllInDOM_"] = $foreign.d3SelectAllInDOM_;
  exports["d3SelectionSelectAll_"] = $foreign.d3SelectionSelectAll_;
  exports["d3Append_"] = $foreign.d3Append_;
  exports["d3Exit_"] = $foreign.d3Exit_;
  exports["d3Data_"] = $foreign.d3Data_;
  exports["d3RemoveSelection_"] = $foreign.d3RemoveSelection_;
  exports["d3AddTransition"] = $foreign.d3AddTransition;
  exports["d3SetAttr_"] = $foreign.d3SetAttr_;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["foldl"] = foldl;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["applicativeEffect"] = applicativeEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["D3.Interpreter.Tagless"] = $PS["D3.Interpreter.Tagless"] || {};
  var exports = $PS["D3.Interpreter.Tagless"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var D3_Attributes_Instances = $PS["D3.Attributes.Instances"];
  var D3_Attributes_Sugar = $PS["D3.Attributes.Sugar"];
  var D3_Selection = $PS["D3.Selection"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var D3Tagless = function (Monad0, append, hook, join) {
      this.Monad0 = Monad0;
      this.append = append;
      this.hook = hook;
      this.join = join;
  };
  var setAttributeOnSelection = function (selection) {
      return function (v) {
          return D3_Selection.d3SetAttr_(v.value0)(D3_Attributes_Instances.unbox(v.value1))(selection);
      };
  };
  var setAttributesAndTransition = function (selection) {
      return function (v) {
          if (v.value1 instanceof Data_Maybe.Just) {
              var v1 = Data_Functor.map(Data_Functor.functorArray)(setAttributeOnSelection(selection))(v.value0);
              return D3_Selection.d3AddTransition(selection)(v.value1.value0);
          };
          if (v.value1 instanceof Data_Maybe.Nothing) {
              var v1 = Data_Functor.map(Data_Functor.functorArray)(setAttributeOnSelection(selection))(v.value0);
              return selection;
          };
          throw new Error("Failed pattern match at D3.Interpreter.Tagless (line 72, column 1 - line 72, column 76): " + [ selection.constructor.name, v.constructor.name ]);
      };
  };
  var monadStateD3M = Control_Monad_State_Trans.monadStateStateT(Effect.monadEffect);          
  var monadD3M = Control_Monad_State_Trans.monadStateT(Effect.monadEffect);
  var join = function (dict) {
      return dict.join;
  };
  var hook = function (dict) {
      return dict.hook;
  };
  var d3Run = function (v) {
      return Control_Applicative.liftA1(Effect.applicativeEffect)(Data_Tuple.fst)(Control_Monad_State_Trans.runStateT(v)(D3_Selection.nullD3Selection));
  };
  var coerceFromSomeDatum = Unsafe_Coerce.unsafeCoerce;
  var someAttributes = function (v) {
      return [ D3_Attributes_Sugar.strokeColor(D3_Attributes_Instances.toAttrString)("green"), D3_Attributes_Sugar.strokeOpacity(D3_Attributes_Instances.toAttrNumber)(0.75), D3_Attributes_Sugar.fill(D3_Attributes_Instances.toAttrStringFn)(coerceFromSomeDatum(function (d) {
          return d.fillColorField;
      })) ];
  };
  var bindD3M = Control_Monad_State_Trans.bindStateT(Effect.monadEffect);  
  var applicativeD3M = Control_Monad_State_Trans.applicativeStateT(Effect.monadEffect);
  var append = function (dict) {
      return dict.append;
  };
  var addChildToExisting = function (selection) {
      return function (v) {
          var appended = D3_Selection.d3Append_(Data_Show.show(D3_Selection.showElement)(v.value0))(selection);
          var v1 = D3_Selection.d3SetAttr_("x")("baar")(appended);
          var v2 = Data_Functor.map(Data_Functor.functorArray)(setAttributeOnSelection(appended))(v.value1);
          return appended;
      };
  };
  var doAppend = function (v) {
      return function (selection) {
          var appended = D3_Selection.d3Append_(Data_Show.show(D3_Selection.showElement)(v.value0))(selection);
          var v1 = D3_Selection.d3SetAttr_("x")("foo")(appended);
          var v2 = Data_Functor.map(Data_Functor.functorArray)(setAttributeOnSelection(appended))(v.value1);
          var v3 = Data_Functor.map(Data_Functor.functorArray)(addChildToExisting(appended))(v.value2);
          return appended;
      };
  };
  var d3TaglessD3M = new D3Tagless(function () {
      return monadD3M;
  }, function (node) {
      return Control_Bind.bind(bindD3M)(Control_Monad_State_Class.get(monadStateD3M))(function (selection) {
          var appended = doAppend(node)(selection);
          return Control_Bind.discard(Control_Bind.discardUnit)(bindD3M)(Control_Monad_State_Class.put(monadStateD3M)(appended))(function () {
              return Control_Applicative.pure(applicativeD3M)(appended);
          });
      });
  }, function (selector) {
      var selection = D3_Selection.d3SelectAllInDOM_(selector);
      return Control_Bind.discard(Control_Bind.discardUnit)(bindD3M)(Control_Monad_State_Class.put(monadStateD3M)(selection))(function () {
          return Control_Applicative.pure(applicativeD3M)(selection);
      });
  }, function (element) {
      return function (enterUpdateExit) {
          return Control_Bind.bind(bindD3M)(Control_Monad_State_Class.get(monadStateD3M))(function (selection) {
              var initialS = D3_Selection.d3SelectionSelectAll_(Data_Show.show(D3_Selection.showElement)(element))(selection);
              var updateS = D3_Selection.d3Data_(D3_Selection.coerceD3Data([ 1, 2, 3 ]))(initialS);
              var v = Data_Foldable.foldl(Data_Foldable.foldableArray)(setAttributesAndTransition)(updateS)(enterUpdateExit.update);
              var enterS = D3_Selection.d3Append_(Data_Show.show(D3_Selection.showElement)(element))(updateS);
              var v1 = Data_Foldable.foldl(Data_Foldable.foldableArray)(setAttributesAndTransition)(enterS)(enterUpdateExit.enter);
              var exitS = D3_Selection.d3Exit_(updateS);
              var v2 = Data_Foldable.foldl(Data_Foldable.foldableArray)(setAttributesAndTransition)(exitS)(enterUpdateExit.exit);
              var v3 = D3_Selection.d3RemoveSelection_(exitS);
              return Control_Bind.discard(Control_Bind.discardUnit)(bindD3M)(Control_Monad_State_Class.put(monadStateD3M)(updateS))(function () {
                  return Control_Applicative.pure(applicativeD3M)(updateS);
              });
          });
      };
  });                                             
  var _SomeDatum = Type_Proxy["Proxy"].value;
  exports["append"] = append;
  exports["hook"] = hook;
  exports["join"] = join;
  exports["d3Run"] = d3Run;
  exports["_SomeDatum"] = _SomeDatum;
  exports["someAttributes"] = someAttributes;
  exports["d3TaglessD3M"] = d3TaglessD3M;
})(PS);
(function($PS) {
  "use strict";
  $PS["D3.Examples.GUP"] = $PS["D3.Examples.GUP"] || {};
  var exports = $PS["D3.Examples.GUP"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var D3_Interpreter_Tagless = $PS["D3.Interpreter.Tagless"];
  var D3_Selection = $PS["D3.Selection"];                
  var script = function (dictD3Tagless) {
      return Control_Bind.bind((dictD3Tagless.Monad0()).Bind1())(D3_Interpreter_Tagless.hook(dictD3Tagless)("div#root"))(function (root) {
          return Control_Bind.bind((dictD3Tagless.Monad0()).Bind1())(D3_Interpreter_Tagless.append(dictD3Tagless)(new D3_Selection.Node(D3_Selection.Svg.value, D3_Interpreter_Tagless.someAttributes(D3_Interpreter_Tagless["_SomeDatum"]), [ new D3_Selection.Node(D3_Selection.Group.value, [  ], [ D3_Selection.node__(D3_Selection.Circle.value) ]) ])))(function (svg) {
              return Control_Bind.bind((dictD3Tagless.Monad0()).Bind1())(D3_Interpreter_Tagless.join(dictD3Tagless)(D3_Selection.Circle.value)({
                  enter: [  ],
                  update: [  ],
                  exit: [  ]
              }))(function () {
                  return Control_Applicative.pure((dictD3Tagless.Monad0()).Applicative0())(D3_Selection.nullD3Selection);
              });
          });
      });
  };
  exports["script"] = script;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var D3_Examples_GUP = $PS["D3.Examples.GUP"];
  var D3_Interpreter_Tagless = $PS["D3.Interpreter.Tagless"];
  var Effect_Console = $PS["Effect.Console"];                
  var main = function __do() {
      D3_Interpreter_Tagless.d3Run(D3_Examples_GUP.script(D3_Interpreter_Tagless.d3TaglessD3M))();
      return Effect_Console.log("\ud83c\udf5d")();
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();